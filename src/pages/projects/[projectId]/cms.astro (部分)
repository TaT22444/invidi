---
// 必要なインポートを追加
import Products from "../../../components/Products.astro";
import { getProjectProducts, getProductCategories, createProduct, updateProductStatus, deleteProduct } from "../../../services/productService";
import { generateCSRFToken, getCSRFCookieHeader, validateCSRFToken } from "../../../utils/csrf";
import { getCookies } from "../../../lib/cookie-utils";

// 既存のコード...

// CSRFトークンを生成
const csrfToken = generateCSRFToken();
// トークンをクッキーにセット
const csrfCookieHeader = getCSRFCookieHeader(csrfToken);
Astro.response.headers.append("Set-Cookie", csrfCookieHeader["Set-Cookie"]);

// クッキーからCSRFトークンを取得（検証用）
const cookies = getCookies(Astro.request);
const cookieToken = cookies.csrf_token;

// POSTリクエスト処理
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const action = formData.get("action")?.toString();
  
  // CSRFトークンをリクエストから取得
  const requestToken = formData.get("csrf_token")?.toString();
  
  // CSRFトークンを検証
  if (!validateCSRFToken(requestToken, cookieToken)) {
    errorMessage = "セキュリティトークンの検証に失敗しました。ページを再読み込みして再試行してください。";
    return new Response("セキュリティトークンが無効です", { 
      status: 403,
      headers: {
        "Location": `/projects/${projectId}/cms?error=invalid_csrf_token`
      }
    });
  }
  
  // 以下、既存のPOST処理を続行
  try {
    if (action === "create_blog") {
      // ブログ作成処理...
    } else if (action === "create_notice") {
      // お知らせ作成処理...
    } else if (action === "create_product") {
      // 商品作成処理...
    } else if (action === "update_product_status") {
      // 商品ステータス更新処理...
    } else if (action === "delete_product") {
      // 商品削除処理...
    }
    // リダイレクト等の処理...
  } catch (error) {
    console.error(`${action}処理エラー:`, error);
    errorMessage = `処理中にエラーが発生しました: ${error.message}`;
    // エラー時の処理...
  }
}

// 既存のコード...

let errorMessage = ""; // エラーメッセージがまだ定義されていない場合
let products: any[] = [];
let productCategoryTags: string[] = [];

// 既存のデータ取得コード（ブログやお知らせの取得コード）の後に追加
try {
  // 商品データとカテゴリを取得
  if (projectId) {
    products = await getProjectProducts(projectId) || [];
    productCategoryTags = await getProductCategories(projectId) || [];
  }
} catch (error) {
  console.error("EC商品データの取得に失敗しました:", error);
}
---

<!-- HTML部分... -->

<!-- 各フォームにCSRFトークンを追加 -->

<!-- ブログフォーム -->
<form class="cms" method="POST" enctype="multipart/form-data" id="blog-form">
  <input type="hidden" name="action" value="create_blog" />
  <input type="hidden" name="csrf_token" value={csrfToken} />
  <!-- 既存のフォームフィールド... -->
</form>

<!-- お知らせフォーム -->
<form class="cms" method="POST" id="notice-form">
  <input type="hidden" name="action" value="create_notice" />
  <input type="hidden" name="csrf_token" value={csrfToken} />
  <!-- 既存のフォームフィールド... -->
</form>

<!-- Products コンポーネントへトークンを渡す -->
<div id="products-panel" class="cms-panel" style="display: none;">
  <Products
    projectId={projectId || ""}
    existingTags={productCategoryTags || []}
    productsList={products || []}
    csrfToken={csrfToken}
  />
</div> 