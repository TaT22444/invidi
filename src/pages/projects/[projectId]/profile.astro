---
export const prerender = false;
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/profile.scss';
import ProjectNav from '../../../components/ProjectNav.astro';

import admin from "firebase-admin";
// Firebase Admin SDK の初期化（初回のみ実施）
if (!admin.apps.length) {
  const serviceAccountStr =
    process.env.FIREBASE_SERVICE_ACCOUNT || import.meta.env.FIREBASE_SERVICE_ACCOUNT;
  console.log("Service Account:", serviceAccountStr);
  const serviceAccount = JSON.parse(serviceAccountStr!);
  
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}
const adminAuth = admin.auth();
const db = admin.firestore();

// Cookie ヘッダーから "token" をパースする
const cookieHeader = Astro.request.headers.get("cookie") || "";
const cookies = Object.fromEntries(
  cookieHeader.split("; ").filter(Boolean).map(c => {
    const [key, ...v] = c.split("=");
    return [key, v.join("=")];
  })
);
const token = cookies["token"] || "";
let authUser = null;
if (token) {
  try {
    // 第二引数にfalseを追加して、チェックを緩和
    authUser = await adminAuth.verifyIdToken(token, false);
    
    // 以下のような警告ログを追加するとよい（任意）
    const tokenIssuedAt = authUser.iat * 1000; // UNIX時間（秒）をミリ秒に変換
    const currentTime = Date.now();
    const tokenAge = currentTime - tokenIssuedAt;
    
    if (tokenAge > 60 * 60 * 1000) { // 1時間（60分）
      console.warn("トークンが1時間以上前に発行されましたが、有効として処理します");
    }
  } catch (err) {
    console.error("IDトークンの検証に失敗:", err);
  }
}

// Firestore からユーザーの登録情報を取得（ログイン中の場合）
let userData = null;
if (authUser) {
  const userSnap = await db.collection("users").doc(authUser.uid).get();
  if (userSnap.exists) {
    userData = userSnap.data();
  } else {
    console.error("ユーザーデータが存在しません", authUser.uid);
  }
}

// ここで accountName を設定（ログイン中なら displayName、未ログインなら "ログイン"）
const accountName = authUser && userData && userData.displayName
  ? userData.displayName
  : "ログイン";

const projects = userData && userData.projects ? userData.projects : [];

let postError = "";
let defaultFormMode = "login";

const method = Astro.request.method.toUpperCase();
if (method === "POST") {
  const formData = await Astro.request.formData();
  const action = formData.get("action")?.toString() || "";

  if (action === "login") {
    // ログイン処理：Firebase Auth REST API を使ってサインイン
    const email = formData.get("email")?.toString() || "";
    const password = formData.get("password")?.toString() || "";
    const apiKey = import.meta.env.PUBLIC_FIREBASE_API_KEY;
    const res = await fetch(
      `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${apiKey}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email,
          password,
          returnSecureToken: true,
        }),
      }
    );
    const data = await res.json();
    if (data.error) {
      console.error("[Login Error]", data.error);
      postError = "ログインに失敗しました";
    } else {
      return new Response(null, {
        status: 303,
        headers: {
          "Set-Cookie": `token=${data.idToken}; Path=/; HttpOnly`,
          Location: "/",
        },
      });
    }
  } else if (action === "register") {
    // 新規登録処理：Admin SDK を使ってユーザー作成し、Firestore にユーザーデータを保存
    const email = formData.get("email")?.toString() || "";
    const password = formData.get("password")?.toString() || "";
		const confirmPassword = formData.get("confirmPassword")?.toString() || "";
    const displayName = formData.get("displayName")?.toString() || "";
    const bio = formData.get("bio")?.toString() || "";
    // パスワード一致チェック
    if (password !== confirmPassword) {
      postError = "パスワードが一致しません";
			defaultFormMode = "register";
    } else {
      try {
        const userRecord = await adminAuth.createUser({
          email,
          password,
          displayName,
        });
        await db.collection("users").doc(userRecord.uid).set({
          displayName,
          email,
          bio,
          plan: "free",    // デフォルトはフリープラン
          projects: []     // 初期はプロジェクト未登録
        });
        const customToken = await adminAuth.createCustomToken(userRecord.uid);
        return new Response(null, {
          status: 303,
          headers: {
            "Set-Cookie": `token=${customToken}; Path=/; HttpOnly`,
            Location: "/",
          },
        });
      } catch (err) {
        console.error("[Register Error]", err);
        postError = "登録に失敗しました";
      }
    }
  } else if (action === "logout") {
    // ログアウト：Cookie をクリア
    return new Response(null, {
      status: 303,
      headers: {
        "Set-Cookie": `token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT`,
        Location: "/",
      },
    });
  } else if (action === "create_project") {
    // 新しいプロジェクトの作成処理
    if (!authUser) {
      postError = "ログインしてください";
    } else {
      const projectName = formData.get("projectName")?.toString() || "";
      const projectDescription = formData.get("projectDescription")?.toString() || "";
      // 初期値としてフォロワー数 0、現在のページ 0、最大ページ 3 を設定
      const newProject = {
        name: projectName,
        description: projectDescription,
        followers: 0,
        currentPages: 0,
        maxPages: 3,
        createdAt: new Date()
      };
      const userRef = db.collection("users").doc(authUser.uid);
      const userSnap = await userRef.get();
      if (userSnap.exists) {
        const currentProjects = userSnap.data().projects || [];
        currentProjects.push(newProject);
        await userRef.update({ projects: currentProjects });
        return new Response(null, {
          status: 303,
          headers: { Location: "/" },
        });
      } else {
        postError = "ユーザーデータが見つかりません";
      }
    }
  } else if (action === "update_project_banner") {
    const bannerImage = formData.get("bannerImage");
    const projectIdFromForm = formData.get("projectId")?.toString();
    
    if (bannerImage && bannerImage instanceof File && projectIdFromForm) {
      try {
        // バケット名を明示的に指定
        const bucket = process.env.FIREBASE_STORAGE_BUCKET || "test-87192.firebasestorage.app";
        const storageRef = admin.storage().bucket(bucket);
        
        const fileRef = storageRef.file(`projects/${projectIdFromForm}/banner/${Date.now()}_${bannerImage.name}`);
        
        // 残りのコードはそのまま
        const buffer = Buffer.from(await bannerImage.arrayBuffer());
        
        await fileRef.save(buffer, {
          metadata: {
            contentType: bannerImage.type
          }
        });
        
        // 公開URLを取得
        const [url] = await fileRef.getSignedUrl({
          action: "read",
          expires: "03-01-2500"
        });
        
        // Firestoreにバナー画像URLを保存
        const projectRef = db.collection("projects").doc(projectIdFromForm);
        await projectRef.update({
          bannerUrl: url
        });
        
        // ユーザーのprojects配列内の該当プロジェクトも更新
        if (userData && userData.projects) {
          const updatedProjects = userData.projects.map((p) => {
            if (p.id === projectIdFromForm) {
              return { ...p, bannerUrl: url };
            }
            return p;
          });
          
          await db.collection("users").doc(authUser.uid).update({
            projects: updatedProjects
          });
        }
        
        // 成功レスポンスを返す
        return new Response(JSON.stringify({
          success: true,
          imageUrl: url
        }), {
          status: 200,
          headers: {
            "Content-Type": "application/json"
          }
        });
      } catch (error) {
        console.error("バナー画像アップロードエラー:", error);
        return new Response(JSON.stringify({
          success: false,
          error: "画像のアップロードに失敗しました"
        }), {
          status: 500,
          headers: {
            "Content-Type": "application/json"
          }
        });
      }
    }
  } else if (action === "update_project_profile") {
    const profileImage = formData.get("profileImage");
    const projectIdFromForm = formData.get("projectId")?.toString();
    
    if (profileImage && profileImage instanceof File && projectIdFromForm) {
      try {
        // バケット名を明示的に指定
        const bucket = process.env.FIREBASE_STORAGE_BUCKET || "test-87192.firebasestorage.app";
        const storageRef = admin.storage().bucket(bucket);
        
        const fileRef = storageRef.file(`projects/${projectIdFromForm}/profile/${Date.now()}_${profileImage.name}`);
        
        // 残りのコードはそのまま
        const buffer = Buffer.from(await profileImage.arrayBuffer());
        
        await fileRef.save(buffer, {
          metadata: {
            contentType: profileImage.type
          }
        });
        
        // 公開URLを取得
        const [url] = await fileRef.getSignedUrl({
          action: "read",
          expires: "03-01-2500"
        });
        
        // Firestoreにプロフィール画像URLを保存
        const projectRef = db.collection("projects").doc(projectIdFromForm);
        await projectRef.update({
          profileImageUrl: url
        });
        
        // ユーザーのprojects配列内の該当プロジェクトも更新
        if (userData && userData.projects) {
          const updatedProjects = userData.projects.map((p) => {
            if (p.id === projectIdFromForm) {
              return { ...p, profileImageUrl: url };
            }
            return p;
          });
          
          await db.collection("users").doc(authUser.uid).update({
            projects: updatedProjects
          });
        }
        
        // 成功レスポンスを返す
        return new Response(JSON.stringify({
          success: true,
          imageUrl: url
        }), {
          status: 200,
          headers: {
            "Content-Type": "application/json"
          }
        });
      } catch (error) {
        console.error("プロフィール画像アップロードエラー:", error);
        return new Response(JSON.stringify({
          success: false,
          error: "画像のアップロードに失敗しました"
        }), {
          status: 500,
          headers: {
            "Content-Type": "application/json"
          }
        });
      }
    }
  } else if (action === "update_project_info") {
    const projectIdFromForm = formData.get("projectId")?.toString();
    const projectDescription = formData.get("projectDescription")?.toString();
    const siteName = formData.get("siteName")?.toString();
    
    if (projectIdFromForm) {
      try {
        const projectRef = db.collection("projects").doc(projectIdFromForm);
        
        // 更新データを準備（明示的に型を指定し、nameは絶対に含めない）
        const updateData: Record<string, string> = {};
        if (projectDescription) updateData.description = projectDescription;
        if (siteName) updateData.siteName = siteName;
        
        // nameが誤って含まれていないことを確認
        if ('name' in updateData) {
          delete updateData.name;
        }
        
        console.log("更新するデータ:", JSON.stringify(updateData)); // デバッグ用ログ
        
        // Firestoreを更新（siteNameのみ）
        await projectRef.update(updateData);
        
        // ユーザーのprojects配列内の該当プロジェクトも更新
        if (userData && userData.projects) {
          const updatedProjects = userData.projects.map((p: any) => {
            if (p.id === projectIdFromForm) {
              // スプレッド演算子ではなく、明示的にフィールドを指定して更新
              const updatedProject = {
                id: p.id,
                name: p.name, // 元のnameを維持
                description: projectDescription || p.description,
                siteName: siteName || p.siteName,
                // その他必要なフィールドを保持
                followers: p.followers,
                currentPages: p.currentPages,
                maxPages: p.maxPages,
                createdAt: p.createdAt,
                bannerUrl: p.bannerUrl,
                profileImageUrl: p.profileImageUrl,
                snsLinks: p.snsLinks || [],
                plan: p.plan || "free"
              };
              return updatedProject;
            }
            return p;
          });
          
          await db.collection("users").doc(authUser!.uid).update({
            projects: updatedProjects
          });
        }
        
        return new Response(JSON.stringify({ success: true }), {
          status: 200,
          headers: { "Content-Type": "application/json" }
        });
      } catch (error) {
        console.error("プロジェクト情報の更新に失敗しました:", error);
        return new Response(JSON.stringify({ error: "更新に失敗しました" }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        });
      }
    }
  } else if (action === "add_sns_link") {
    const projectIdFromForm = formData.get("projectId")?.toString();
    const snsType = formData.get("snsType")?.toString();
    const snsName = formData.get("snsName")?.toString();
    const snsDescription = formData.get("snsDescription")?.toString();
    
    if (projectIdFromForm && snsType && snsName) {
      try {
        const projectRef = db.collection("projects").doc(projectIdFromForm);
        const projectSnap = await projectRef.get();
        
        if (projectSnap.exists) {
          const projectData = projectSnap.data();
          const snsLinks = projectData.snsLinks || [];
          
          // 重複チェックを追加
          const isDuplicate = snsLinks.some(link => 
            link.type === snsType && link.name === snsName
          );
          
          if (isDuplicate) {
            // 重複がある場合はエラーレスポンスを返す
            return new Response(JSON.stringify({ 
              success: false, 
              error: "同じタイプ・同じアカウント名のSNSが既に登録されています。" 
            }), {
              status: 400,
              headers: { "Content-Type": "application/json" }
            });
          }
          
          // 新しいSNSリンクを追加
          snsLinks.push({
            type: snsType,
            name: snsName,
            description: snsDescription || ""
          });
          
          // Firestoreに保存
          await projectRef.update({ snsLinks });
          
          // 成功レスポンス
          return new Response(JSON.stringify({ success: true }), {
            status: 200,
            headers: { "Content-Type": "application/json" }
          });
        }
      } catch (error) {
        console.error("SNSリンクの追加に失敗しました:", error);
        return new Response(JSON.stringify({ error: "SNSリンクの追加に失敗しました" }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        });
      }
    }
  } else if (action === "delete_sns_link") {
    const projectIdFromForm = formData.get("projectId")?.toString();
    const snsIndex = parseInt(formData.get("snsIndex")?.toString() || "-1");
    
    if (projectIdFromForm && snsIndex >= 0) {
      try {
        const projectRef = db.collection("projects").doc(projectIdFromForm);
        const projectSnap = await projectRef.get();
        
        if (projectSnap.exists) {
          const projectData = projectSnap.data();
          const snsLinks = projectData.snsLinks || [];
          
          // 指定されたインデックスのSNSリンクを削除
          if (snsIndex < snsLinks.length) {
            snsLinks.splice(snsIndex, 1);
            
            // Firestoreに保存
            await projectRef.update({ snsLinks });
            
            // 成功レスポンス
            return new Response(JSON.stringify({ success: true }), {
              status: 200,
              headers: { "Content-Type": "application/json" }
            });
          }
        }
      } catch (error) {
        console.error("SNSリンクの削除に失敗しました:", error);
        return new Response(JSON.stringify({ error: "SNSリンクの削除に失敗しました" }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        });
      }
    }
  } else if (action === "add_sns") {
    const snsType = formData.get("snsType")?.toString() || "";
    const snsName = formData.get("snsName")?.toString() || "";
    const snsDescription = formData.get("snsDescription")?.toString() || "";
    
    try {
      const projectRef = db.collection("projects").doc(projectId);
      const projectSnap = await projectRef.get();
      
      if (projectSnap.exists) {
        const projectData = projectSnap.data();
        const snsLinks = projectData?.snsLinks || [];
        
        // フリープランで5つ以上のSNSリンクがある場合はエラー
        if (projectData?.plan === "free" && snsLinks.length >= 5) {
          return new Response(null, {
            status: 303,
            headers: { 
              Location: `/projects/${projectId}/profile?error=sns_limit_reached` 
            }
          });
        }
        
        // 既存のSNS追加処理...
      }
    } catch (error) {
      console.error("SNSリンク追加中にエラーが発生しました:", error);
      return new Response(JSON.stringify({ error: "SNSリンクの追加に失敗しました" }), {
        status: 500,
        headers: { "Content-Type": "application/json" }
      });
    }
  }
}

const { projectId } = Astro.params;

// ユーザーが認証されているか確認
if (!authUser || !userData) {
  console.error("認証されていないユーザーです");
  return new Response(null, {
    status: 303,
    headers: { Location: "/" },
  });
}

// プロジェクトデータの取得（ユーザーのプロジェクト配列から）
let currentProject = null;
if (userData && userData.projects) {
  currentProject = userData.projects.find((p: { id: any; }) => p.id === projectId);
}

// プロジェクトがユーザーに属しているか確認
if (!currentProject) {
  console.error("該当のプロジェクトが見つかりません、またはアクセス権限がありません");
  return new Response(null, {
    status: 303,
    headers: { Location: "/" },
  });
}

// ここからFirestoreからプロジェクトの追加データを取得
try {
  if (projectId) {
    const projectDoc = await db.collection("projects").doc(projectId).get();
    if (projectDoc.exists) {
      const firestoreProject = projectDoc.data();
      
      // Firestoreのデータで現在のプロジェクトデータを拡張
      if (firestoreProject) {
        // nameフィールドは上書きせず、Firestoreからの他のデータを統合
        const { name: _, ...firestoreDataWithoutName } = firestoreProject;
        currentProject = {
          ...currentProject,
          ...firestoreDataWithoutName,
          // siteNameがなければFirestoreから取得、それもなければnameを使用
          siteName: currentProject.siteName || firestoreProject.siteName || currentProject.name
        };
      }
    }
  }
} catch (error) {
  console.error("Firestoreからの追加データ取得に失敗:", error);
  // 追加データの取得に失敗しても、基本的なプロジェクトデータがあるので処理を続行
}


const userId = authUser?.uid || "";

---
