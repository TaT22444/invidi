---
export const prerender = false;
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/profile.scss';
import ProjectNav from '../../../components/ProjectNav.astro';

import admin from "firebase-admin";
// Firebase Admin SDK の初期化（初回のみ実施）
if (!admin.apps.length) {
  const serviceAccountStr =
    process.env.FIREBASE_SERVICE_ACCOUNT || import.meta.env.FIREBASE_SERVICE_ACCOUNT;
  console.log("Service Account:", serviceAccountStr);
  const serviceAccount = JSON.parse(serviceAccountStr!);
  
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}
const adminAuth = admin.auth();
const db = admin.firestore();

// Cookie ヘッダーから "token" をパースする
const cookieHeader = Astro.request.headers.get("cookie") || "";
const cookies = Object.fromEntries(
  cookieHeader.split("; ").filter(Boolean).map(c => {
    const [key, ...v] = c.split("=");
    return [key, v.join("=")];
  })
);
const token = cookies["token"] || "";
let authUser = null;
if (token) {
  try {
    // 第二引数にfalseを追加して、チェックを緩和
    authUser = await adminAuth.verifyIdToken(token, false);
    
    // 以下のような警告ログを追加するとよい（任意）
    const tokenIssuedAt = authUser.iat * 1000; // UNIX時間（秒）をミリ秒に変換
    const currentTime = Date.now();
    const tokenAge = currentTime - tokenIssuedAt;
    
    if (tokenAge > 60 * 60 * 1000) { // 1時間（60分）
      console.warn("トークンが1時間以上前に発行されましたが、有効として処理します");
    }
  } catch (err) {
    console.error("IDトークンの検証に失敗:", err);
  }
}

// Firestore からユーザーの登録情報を取得（ログイン中の場合）
let userData = null;
if (authUser) {
  const userSnap = await db.collection("users").doc(authUser.uid).get();
  if (userSnap.exists) {
    userData = userSnap.data();
  } else {
    console.error("ユーザーデータが存在しません", authUser.uid);
  }
}

// ここで accountName を設定（ログイン中なら displayName、未ログインなら "ログイン"）
const accountName = authUser && userData && userData.displayName
  ? userData.displayName
  : "ログイン";

const projects = userData && userData.projects ? userData.projects : [];

let postError = "";
let defaultFormMode = "login";

const method = Astro.request.method.toUpperCase();
if (method === "POST") {
  const formData = await Astro.request.formData();
  const action = formData.get("action")?.toString() || "";

  if (action === "login") {
    // ログイン処理：Firebase Auth REST API を使ってサインイン
    const email = formData.get("email")?.toString() || "";
    const password = formData.get("password")?.toString() || "";
    const apiKey = import.meta.env.PUBLIC_FIREBASE_API_KEY;
    const res = await fetch(
      `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${apiKey}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email,
          password,
          returnSecureToken: true,
        }),
      }
    );
    const data = await res.json();
    if (data.error) {
      console.error("[Login Error]", data.error);
      postError = "ログインに失敗しました";
    } else {
      return new Response(null, {
        status: 303,
        headers: {
          "Set-Cookie": `token=${data.idToken}; Path=/; HttpOnly`,
          Location: "/",
        },
      });
    }
  } else if (action === "register") {
    // 新規登録処理：Admin SDK を使ってユーザー作成し、Firestore にユーザーデータを保存
    const email = formData.get("email")?.toString() || "";
    const password = formData.get("password")?.toString() || "";
		const confirmPassword = formData.get("confirmPassword")?.toString() || "";
    const displayName = formData.get("displayName")?.toString() || "";
    const bio = formData.get("bio")?.toString() || "";
    // パスワード一致チェック
    if (password !== confirmPassword) {
      postError = "パスワードが一致しません";
			defaultFormMode = "register";
    } else {
      try {
        const userRecord = await adminAuth.createUser({
          email,
          password,
          displayName,
        });
        await db.collection("users").doc(userRecord.uid).set({
          displayName,
          email,
          bio,
          plan: "free",    // デフォルトはフリープラン
          projects: []     // 初期はプロジェクト未登録
        });
        const customToken = await adminAuth.createCustomToken(userRecord.uid);
        return new Response(null, {
          status: 303,
          headers: {
            "Set-Cookie": `token=${customToken}; Path=/; HttpOnly`,
            Location: "/",
          },
        });
      } catch (err) {
        console.error("[Register Error]", err);
        postError = "登録に失敗しました";
      }
    }
  } else if (action === "logout") {
    // ログアウト：Cookie をクリア
    return new Response(null, {
      status: 303,
      headers: {
        "Set-Cookie": `token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT`,
        Location: "/",
      },
    });
  } else if (action === "create_project") {
    // 新しいプロジェクトの作成処理
    if (!authUser) {
      postError = "ログインしてください";
    } else {
      const projectName = formData.get("projectName")?.toString() || "";
      const projectDescription = formData.get("projectDescription")?.toString() || "";
      // 初期値としてフォロワー数 0、現在のページ 0、最大ページ 3 を設定
      const newProject = {
        name: projectName,
        description: projectDescription,
        followers: 0,
        currentPages: 0,
        maxPages: 3,
        createdAt: new Date()
      };
      const userRef = db.collection("users").doc(authUser.uid);
      const userSnap = await userRef.get();
      if (userSnap.exists) {
        const currentProjects = userSnap.data().projects || [];
        currentProjects.push(newProject);
        await userRef.update({ projects: currentProjects });
        return new Response(null, {
          status: 303,
          headers: { Location: "/" },
        });
      } else {
        postError = "ユーザーデータが見つかりません";
      }
    }
  } else if (action === "update_project_banner") {
    const bannerImage = formData.get("bannerImage");
    const projectIdFromForm = formData.get("projectId")?.toString();
    
    if (bannerImage && bannerImage instanceof File && projectIdFromForm) {
      try {
        // バケット名を明示的に指定
        const bucket = process.env.FIREBASE_STORAGE_BUCKET || "test-87192.firebasestorage.app";
        const storageRef = admin.storage().bucket(bucket);
        
        const fileRef = storageRef.file(`projects/${projectIdFromForm}/banner/${Date.now()}_${bannerImage.name}`);
        
        // 残りのコードはそのまま
        const buffer = Buffer.from(await bannerImage.arrayBuffer());
        
        await fileRef.save(buffer, {
          metadata: {
            contentType: bannerImage.type
          }
        });
        
        // 公開URLを取得
        const [url] = await fileRef.getSignedUrl({
          action: "read",
          expires: "03-01-2500"
        });
        
        // Firestoreにバナー画像URLを保存
        const projectRef = db.collection("projects").doc(projectIdFromForm);
        await projectRef.update({
          bannerUrl: url
        });
        
        // ユーザーのprojects配列内の該当プロジェクトも更新
        if (userData && userData.projects) {
          const updatedProjects = userData.projects.map((p) => {
            if (p.id === projectIdFromForm) {
              return { ...p, bannerUrl: url };
            }
            return p;
          });
          
          await db.collection("users").doc(authUser.uid).update({
            projects: updatedProjects
          });
        }
        
        // 成功レスポンスを返す
        return new Response(JSON.stringify({
          success: true,
          imageUrl: url
        }), {
          status: 200,
          headers: {
            "Content-Type": "application/json"
          }
        });
      } catch (error) {
        console.error("バナー画像アップロードエラー:", error);
        return new Response(JSON.stringify({
          success: false,
          error: "画像のアップロードに失敗しました"
        }), {
          status: 500,
          headers: {
            "Content-Type": "application/json"
          }
        });
      }
    }
  } else if (action === "update_project_profile") {
    const profileImage = formData.get("profileImage");
    const projectIdFromForm = formData.get("projectId")?.toString();
    
    if (profileImage && profileImage instanceof File && projectIdFromForm) {
      try {
        // バケット名を明示的に指定
        const bucket = process.env.FIREBASE_STORAGE_BUCKET || "test-87192.firebasestorage.app";
        const storageRef = admin.storage().bucket(bucket);
        
        const fileRef = storageRef.file(`projects/${projectIdFromForm}/profile/${Date.now()}_${profileImage.name}`);
        
        // 残りのコードはそのまま
        const buffer = Buffer.from(await profileImage.arrayBuffer());
        
        await fileRef.save(buffer, {
          metadata: {
            contentType: profileImage.type
          }
        });
        
        // 公開URLを取得
        const [url] = await fileRef.getSignedUrl({
          action: "read",
          expires: "03-01-2500"
        });
        
        // Firestoreにプロフィール画像URLを保存
        const projectRef = db.collection("projects").doc(projectIdFromForm);
        await projectRef.update({
          profileImageUrl: url
        });
        
        // ユーザーのprojects配列内の該当プロジェクトも更新
        if (userData && userData.projects) {
          const updatedProjects = userData.projects.map((p) => {
            if (p.id === projectIdFromForm) {
              return { ...p, profileImageUrl: url };
            }
            return p;
          });
          
          await db.collection("users").doc(authUser.uid).update({
            projects: updatedProjects
          });
        }
        
        // 成功レスポンスを返す
        return new Response(JSON.stringify({
          success: true,
          imageUrl: url
        }), {
          status: 200,
          headers: {
            "Content-Type": "application/json"
          }
        });
      } catch (error) {
        console.error("プロフィール画像アップロードエラー:", error);
        return new Response(JSON.stringify({
          success: false,
          error: "画像のアップロードに失敗しました"
        }), {
          status: 500,
          headers: {
            "Content-Type": "application/json"
          }
        });
      }
    }
  } else if (action === "update_project_info") {
    const projectIdFromForm = formData.get("projectId")?.toString();
    const projectDescription = formData.get("projectDescription")?.toString();
    const siteName = formData.get("siteName")?.toString();
    
    if (projectIdFromForm) {
      try {
        const projectRef = db.collection("projects").doc(projectIdFromForm);
        
        // 更新データを準備（明示的に型を指定し、nameは絶対に含めない）
        const updateData: Record<string, string> = {};
        if (projectDescription) updateData.description = projectDescription;
        if (siteName) updateData.siteName = siteName;
        
        // nameが誤って含まれていないことを確認
        if ('name' in updateData) {
          delete updateData.name;
        }
        
        console.log("更新するデータ:", JSON.stringify(updateData)); // デバッグ用ログ
        
        // Firestoreを更新（siteNameのみ）
        await projectRef.update(updateData);
        
        // ユーザーのprojects配列内の該当プロジェクトも更新
        if (userData && userData.projects) {
          const updatedProjects = userData.projects.map((p: any) => {
            if (p.id === projectIdFromForm) {
              // スプレッド演算子ではなく、明示的にフィールドを指定して更新
              const updatedProject = {
                id: p.id,
                name: p.name, // 元のnameを維持
                description: projectDescription || p.description,
                siteName: siteName || p.siteName,
                // その他必要なフィールドを保持
                followers: p.followers,
                currentPages: p.currentPages,
                maxPages: p.maxPages,
                createdAt: p.createdAt,
                bannerUrl: p.bannerUrl,
                profileImageUrl: p.profileImageUrl,
                snsLinks: p.snsLinks || [],
                plan: p.plan || "free"
              };
              return updatedProject;
            }
            return p;
          });
          
          await db.collection("users").doc(authUser!.uid).update({
            projects: updatedProjects
          });
        }
        
        return new Response(JSON.stringify({ success: true }), {
          status: 200,
          headers: { "Content-Type": "application/json" }
        });
      } catch (error) {
        console.error("プロジェクト情報の更新に失敗しました:", error);
        return new Response(JSON.stringify({ error: "更新に失敗しました" }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        });
      }
    }
  } else if (action === "add_sns_link") {
    const projectIdFromForm = formData.get("projectId")?.toString();
    const snsType = formData.get("snsType")?.toString();
    const snsName = formData.get("snsName")?.toString();
    const snsDescription = formData.get("snsDescription")?.toString();
    
    if (projectIdFromForm && snsType && snsName) {
      try {
        const projectRef = db.collection("projects").doc(projectIdFromForm);
        const projectSnap = await projectRef.get();
        
        if (projectSnap.exists) {
          const projectData = projectSnap.data();
          const snsLinks = projectData.snsLinks || [];
          
          // 重複チェックを追加
          const isDuplicate = snsLinks.some(link => 
            link.type === snsType && link.name === snsName
          );
          
          if (isDuplicate) {
            // 重複がある場合はエラーレスポンスを返す
            return new Response(JSON.stringify({ 
              success: false, 
              error: "同じタイプ・同じアカウント名のSNSが既に登録されています。" 
            }), {
              status: 400,
              headers: { "Content-Type": "application/json" }
            });
          }
          
          // 新しいSNSリンクを追加
          snsLinks.push({
            type: snsType,
            name: snsName,
            description: snsDescription || ""
          });
          
          // Firestoreに保存
          await projectRef.update({ snsLinks });
          
          // 成功レスポンス
          return new Response(JSON.stringify({ success: true }), {
            status: 200,
            headers: { "Content-Type": "application/json" }
          });
        }
      } catch (error) {
        console.error("SNSリンクの追加に失敗しました:", error);
        return new Response(JSON.stringify({ error: "SNSリンクの追加に失敗しました" }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        });
      }
    }
  } else if (action === "delete_sns_link") {
    const projectIdFromForm = formData.get("projectId")?.toString();
    const snsIndex = parseInt(formData.get("snsIndex")?.toString() || "-1");
    
    if (projectIdFromForm && snsIndex >= 0) {
      try {
        const projectRef = db.collection("projects").doc(projectIdFromForm);
        const projectSnap = await projectRef.get();
        
        if (projectSnap.exists) {
          const projectData = projectSnap.data();
          const snsLinks = projectData.snsLinks || [];
          
          // 指定されたインデックスのSNSリンクを削除
          if (snsIndex < snsLinks.length) {
            snsLinks.splice(snsIndex, 1);
            
            // Firestoreに保存
            await projectRef.update({ snsLinks });
            
            // 成功レスポンス
            return new Response(JSON.stringify({ success: true }), {
              status: 200,
              headers: { "Content-Type": "application/json" }
            });
          }
        }
      } catch (error) {
        console.error("SNSリンクの削除に失敗しました:", error);
        return new Response(JSON.stringify({ error: "SNSリンクの削除に失敗しました" }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        });
      }
    }
  } else if (action === "add_sns") {
    const snsType = formData.get("snsType")?.toString() || "";
    const snsName = formData.get("snsName")?.toString() || "";
    const snsDescription = formData.get("snsDescription")?.toString() || "";
    
    try {
      const projectRef = db.collection("projects").doc(projectId);
      const projectSnap = await projectRef.get();
      
      if (projectSnap.exists) {
        const projectData = projectSnap.data();
        const snsLinks = projectData?.snsLinks || [];
        
        // フリープランで5つ以上のSNSリンクがある場合はエラー
        if (projectData?.plan === "free" && snsLinks.length >= 5) {
          return new Response(null, {
            status: 303,
            headers: { 
              Location: `/projects/${projectId}/profile?error=sns_limit_reached` 
            }
          });
        }
        
        // 既存のSNS追加処理...
      }
    } catch (error) {
      console.error("SNSリンク追加中にエラーが発生しました:", error);
      return new Response(JSON.stringify({ error: "SNSリンクの追加に失敗しました" }), {
        status: 500,
        headers: { "Content-Type": "application/json" }
      });
    }
  }
}

const { projectId } = Astro.params;

// ユーザーが認証されているか確認
if (!authUser || !userData) {
  console.error("認証されていないユーザーです");
  return new Response(null, {
    status: 303,
    headers: { Location: "/" },
  });
}

// プロジェクトデータの取得（ユーザーのプロジェクト配列から）
let currentProject = null;
if (userData && userData.projects) {
  currentProject = userData.projects.find((p: { id: any; }) => p.id === projectId);
}

// プロジェクトがユーザーに属しているか確認
if (!currentProject) {
  console.error("該当のプロジェクトが見つかりません、またはアクセス権限がありません");
  return new Response(null, {
    status: 303,
    headers: { Location: "/" },
  });
}

// ここからFirestoreからプロジェクトの追加データを取得
try {
  if (projectId) {
    const projectDoc = await db.collection("projects").doc(projectId).get();
    if (projectDoc.exists) {
      const firestoreProject = projectDoc.data();
      
      // Firestoreのデータで現在のプロジェクトデータを拡張
      if (firestoreProject) {
        // nameフィールドは上書きせず、Firestoreからの他のデータを統合
        const { name: _, ...firestoreDataWithoutName } = firestoreProject;
        currentProject = {
          ...currentProject,
          ...firestoreDataWithoutName,
          // siteNameがなければFirestoreから取得、それもなければnameを使用
          siteName: currentProject.siteName || firestoreProject.siteName || currentProject.name
        };
      }
    }
  }
} catch (error) {
  console.error("Firestoreからの追加データ取得に失敗:", error);
  // 追加データの取得に失敗しても、基本的なプロジェクトデータがあるので処理を続行
}


const userId = authUser?.uid || "";

---

<Layout title="App Title" userId={userId} accountName={accountName} projects={userData?.projects ?? []}>
  <div class="pan">
    <p class="pan_item">
      <a href={userId ? `/${userId}` : "/"}>トップ</a>
      <span>
        <svg width="7" height="7" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M0.456 6.356V5.18L3.156 4.208L4.98 3.548V3.5L3.156 2.828L0.456 1.856V0.692L6.384 2.996V4.04L0.456 6.356Z" fill="#C4C4C4"/>
        </svg>          
      </span>
      <span>{currentProject?.name || "(No Name)"}</span>
      <span>
        <svg width="7" height="7" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M0.456 6.356V5.18L3.156 4.208L4.98 3.548V3.5L3.156 2.828L0.456 1.856V0.692L6.384 2.996V4.04L0.456 6.356Z" fill="#C4C4C4"/>
        </svg>          
      </span>
      <span>プロフィール</span>
    </p>
  </div>
  
  <ProjectNav projectId={projectId} activeTab="profile" />

  <div class="container" id="switch">
    <div class="box_btn_wrapper">
      <button class="box_btn">キャンセル</button>
      <button id="save-btn"  class="box_btn save">保存</button>
    </div>
    <section class="box">
      <div class="inner">
        <div class="hero">
          <div class="hero_banner" id="hero-banner">
            <input type="file" id="banner-upload" accept="image/*" style="display: none;">
            {currentProject?.bannerUrl ? (
              <img class="hero_banner_img" src={currentProject.bannerUrl} alt="バナー画像">
            ) : (
              <div class="default-image-icon">
            <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M27.902 13.32C19.0887 12.1093 11.4887 18.6533 11.9993 27.3333M8.66602 10.6667C8.66602 11.3739 8.94697 12.0522 9.44706 12.5523C9.94716 13.0524 10.6254 13.3333 11.3327 13.3333C12.0399 13.3333 12.7182 13.0524 13.2183 12.5523C13.7184 12.0522 13.9993 11.3739 13.9993 10.6667C13.9993 9.95942 13.7184 9.28115 13.2183 8.78105C12.7182 8.28095 12.0399 8 11.3327 8C10.6254 8 9.94716 8.28095 9.44706 8.78105C8.94697 9.28115 8.66602 9.95942 8.66602 10.6667Z" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M4 17.4216C7.70667 16.9082 11.0333 18.6989 12.832 21.5549" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M4 12.5333C4 9.54667 4 8.05333 4.58133 6.912C5.09265 5.90851 5.90851 5.09265 6.912 4.58133C8.05333 4 9.54667 4 12.5333 4H19.4667C22.4533 4 23.9467 4 25.088 4.58133C26.0915 5.09265 26.9073 5.90851 27.4187 6.912C28 8.05333 28 9.54667 28 12.5333V19.4667C28 22.4533 28 23.9467 27.4187 25.088C26.9073 26.0915 26.0915 26.9073 25.088 27.4187C23.9467 28 22.4533 28 19.4667 28H12.5333C9.54667 28 8.05333 28 6.912 27.4187C5.90851 26.9073 5.09265 26.0915 4.58133 25.088C4 23.9467 4 22.4533 4 19.4667V12.5333Z" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>              
              </div>
            )}
          </div>
          <div class="hero_body">
            <div class="hero_body_prof">
              <p class="hero_body_prof_p">
                <span>フォロワー</span>
                <span class="slash"></span>
                <strong class={`strong ${currentProject?.followers > 100 ? 'many-followers' : ''}`}>
                  {currentProject?.followers || 0}人
                </strong>
              </p>
              <div class="hero_body_prof_title">
                <h2 id="project-name">{currentProject?.siteName || currentProject?.name}</h2>            
                <span class="item_action_btns">
                  <button>
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M21.4559 5.41632C21.5509 5.56052 21.5932 5.7331 21.5757 5.9049C21.5582 6.07671 21.482 6.23721 21.3599 6.35932L12.1669 15.5513C12.0728 15.6453 11.9555 15.7126 11.8269 15.7463L7.99787 16.7463C7.8713 16.7793 7.7383 16.7787 7.61206 16.7444C7.48583 16.7101 7.37076 16.6434 7.27826 16.5509C7.18577 16.4584 7.11908 16.3434 7.0848 16.2171C7.05053 16.0909 7.04986 15.9579 7.08287 15.8313L8.08287 12.0033C8.11277 11.8887 8.16776 11.7821 8.24387 11.6913L17.4709 2.47032C17.6115 2.32987 17.8021 2.25098 18.0009 2.25098C18.1996 2.25098 18.3902 2.32987 18.5309 2.47032L21.3599 5.29832C21.3948 5.33516 21.4269 5.3746 21.4559 5.41632ZM19.7689 5.82832L18.0009 4.06132L9.48287 12.5793L8.85787 14.9723L11.2509 14.3473L19.7689 5.82832Z" fill="#C4C4C4"/>
                      <path d="M19.641 17.1601C19.9143 14.824 20.0016 12.47 19.902 10.1201C19.8997 10.0647 19.9089 10.0094 19.929 9.95778C19.9491 9.90614 19.9798 9.85925 20.019 9.82008L21.003 8.83608C21.0299 8.80904 21.064 8.79033 21.1013 8.78222C21.1385 8.77411 21.1774 8.77693 21.2131 8.79034C21.2488 8.80375 21.2798 8.82719 21.3025 8.85783C21.3252 8.88847 21.3386 8.92502 21.341 8.96308C21.5257 11.7543 21.4554 14.5566 21.131 17.3351C20.895 19.3571 19.271 20.9421 17.258 21.1671C13.7633 21.5538 10.2367 21.5538 6.74201 21.1671C4.73001 20.9421 3.10501 19.3571 2.86901 17.3351C2.45512 13.7905 2.45512 10.2097 2.86901 6.66508C3.10501 4.64308 4.72901 3.05808 6.74201 2.83308C9.39446 2.54012 12.0667 2.46888 14.731 2.62008C14.7691 2.62281 14.8057 2.63642 14.8363 2.65929C14.867 2.68215 14.8904 2.71332 14.9039 2.7491C14.9173 2.78487 14.9203 2.82376 14.9123 2.86115C14.9044 2.89854 14.8859 2.93287 14.859 2.96008L13.866 3.95208C13.8272 3.99092 13.7808 4.02136 13.7297 4.04149C13.6786 4.06162 13.6239 4.07101 13.569 4.06908C11.3458 3.99293 9.11993 4.07815 6.90901 4.32408C6.26295 4.39558 5.65986 4.6828 5.19717 5.13933C4.73447 5.59586 4.43919 6.19504 4.35901 6.84008C3.95787 10.2684 3.95787 13.7318 4.35901 17.1601C4.43919 17.8051 4.73447 18.4043 5.19717 18.8608C5.65986 19.3174 6.26295 19.6046 6.90901 19.6761C10.264 20.0511 13.736 20.0511 17.092 19.6761C17.7381 19.6046 18.3412 19.3174 18.8039 18.8608C19.2666 18.4043 19.5608 17.8051 19.641 17.1601Z" fill="#C4C4C4"/>
                    </svg>                                         
                  </button>
                  <button>
                    <svg width="16" height="18" viewBox="0 0 18 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M10.2499 4.33301L13.5833 7.66634M13.5833 4.33301L10.2499 7.66634M15.3291 11.4163H6.74825C6.31359 11.4163 5.89614 11.2464 5.58492 10.943L1.12658 6.59634C1.04696 6.5187 0.983675 6.42592 0.940467 6.32344C0.89726 6.22097 0.875 6.11088 0.875 5.99967C0.875 5.88846 0.89726 5.77838 0.940467 5.67591C0.983675 5.57343 1.04696 5.48064 1.12658 5.40301L5.58492 1.05634C5.89614 0.752902 6.31359 0.583051 6.74825 0.583008H15.3291C16.1207 0.583008 17.1816 1.03384 17.1816 1.93717V10.0622C17.1816 10.9655 16.1207 11.4163 15.3291 11.4163Z" stroke="#C4C4C4" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>                             
                  </button>
                </span>
              </div>
              <div class="hero_body_prof_desc">
                <p id="project-description">{currentProject?.description || "このサイトの紹介文を入力してください。このサイトの紹介文を入力してください。このサイトの紹介文を入力してください。このサイトの紹介文を入力してください。このサイトの紹介文を入力してください。このサイトの紹介文を入力してください。"}</p>
                <span class="item_action_btns">
                  <button>
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M21.4559 5.41632C21.5509 5.56052 21.5932 5.7331 21.5757 5.9049C21.5582 6.07671 21.482 6.23721 21.3599 6.35932L12.1669 15.5513C12.0728 15.6453 11.9555 15.7126 11.8269 15.7463L7.99787 16.7463C7.8713 16.7793 7.7383 16.7787 7.61206 16.7444C7.48583 16.7101 7.37076 16.6434 7.27826 16.5509C7.18577 16.4584 7.11908 16.3434 7.0848 16.2171C7.05053 16.0909 7.04986 15.9579 7.08287 15.8313L8.08287 12.0033C8.11277 11.8887 8.16776 11.7821 8.24387 11.6913L17.4709 2.47032C17.6115 2.32987 17.8021 2.25098 18.0009 2.25098C18.1996 2.25098 18.3902 2.32987 18.5309 2.47032L21.3599 5.29832C21.3948 5.33516 21.4269 5.3746 21.4559 5.41632ZM19.7689 5.82832L18.0009 4.06132L9.48287 12.5793L8.85787 14.9723L11.2509 14.3473L19.7689 5.82832Z" fill="#C4C4C4"/>
                      <path d="M19.641 17.1601C19.9143 14.824 20.0016 12.47 19.902 10.1201C19.8997 10.0647 19.9089 10.0094 19.929 9.95778C19.9491 9.90614 19.9798 9.85925 20.019 9.82008L21.003 8.83608C21.0299 8.80904 21.064 8.79033 21.1013 8.78222C21.1385 8.77411 21.1774 8.77693 21.2131 8.79034C21.2488 8.80375 21.2798 8.82719 21.3025 8.85783C21.3252 8.88847 21.3386 8.92502 21.341 8.96308C21.5257 11.7543 21.4554 14.5566 21.131 17.3351C20.895 19.3571 19.271 20.9421 17.258 21.1671C13.7633 21.5538 10.2367 21.5538 6.74201 21.1671C4.73001 20.9421 3.10501 19.3571 2.86901 17.3351C2.45512 13.7905 2.45512 10.2097 2.86901 6.66508C3.10501 4.64308 4.72901 3.05808 6.74201 2.83308C9.39446 2.54012 12.0667 2.46888 14.731 2.62008C14.7691 2.62281 14.8057 2.63642 14.8363 2.65929C14.867 2.68215 14.8904 2.71332 14.9039 2.7491C14.9173 2.78487 14.9203 2.82376 14.9123 2.86115C14.9044 2.89854 14.8859 2.93287 14.859 2.96008L13.866 3.95208C13.8272 3.99092 13.7808 4.02136 13.7297 4.04149C13.6786 4.06162 13.6239 4.07101 13.569 4.06908C11.3458 3.99293 9.11993 4.07815 6.90901 4.32408C6.26295 4.39558 5.65986 4.6828 5.19717 5.13933C4.73447 5.59586 4.43919 6.19504 4.35901 6.84008C3.95787 10.2684 3.95787 13.7318 4.35901 17.1601C4.43919 17.8051 4.73447 18.4043 5.19717 18.8608C5.65986 19.3174 6.26295 19.6046 6.90901 19.6761C10.264 20.0511 13.736 20.0511 17.092 19.6761C17.7381 19.6046 18.3412 19.3174 18.8039 18.8608C19.2666 18.4043 19.5608 17.8051 19.641 17.1601Z" fill="#C4C4C4"/>
                    </svg>                                         
                  </button>
                  <button>
                    <svg width="16" height="18" viewBox="0 0 18 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M10.2499 4.33301L13.5833 7.66634M13.5833 4.33301L10.2499 7.66634M15.3291 11.4163H6.74825C6.31359 11.4163 5.89614 11.2464 5.58492 10.943L1.12658 6.59634C1.04696 6.5187 0.983675 6.42592 0.940467 6.32344C0.89726 6.22097 0.875 6.11088 0.875 5.99967C0.875 5.88846 0.89726 5.77838 0.940467 5.67591C0.983675 5.57343 1.04696 5.48064 1.12658 5.40301L5.58492 1.05634C5.89614 0.752902 6.31359 0.583051 6.74825 0.583008H15.3291C16.1207 0.583008 17.1816 1.03384 17.1816 1.93717V10.0622C17.1816 10.9655 16.1207 11.4163 15.3291 11.4163Z" stroke="#C4C4C4" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>                             
                  </button>
                </span>              
              </div>
            </div>
            <div class="hero_body_img" id="hero-profile-img">
              <input type="file" id="profile-upload" accept="image/*" style="display: none;">
              {currentProject?.profileImageUrl ? (
                <img class="hero_profile_img" src={currentProject.profileImageUrl} alt="プロフィール画像">
              ) : (
                <div class="default-image-icon">
              <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M27.902 13.32C19.0887 12.1093 11.4887 18.6533 11.9993 27.3333M8.66602 10.6667C8.66602 11.3739 8.94697 12.0522 9.44706 12.5523C9.94716 13.0524 10.6254 13.3333 11.3327 13.3333C12.0399 13.3333 12.7182 13.0524 13.2183 12.5523C13.7184 12.0522 13.9993 11.3739 13.9993 10.6667C13.9993 9.95942 13.7184 9.28115 13.2183 8.78105C12.7182 8.28095 12.0399 8 11.3327 8C10.6254 8 9.94716 8.28095 9.44706 8.78105C8.94697 9.28115 8.66602 9.95942 8.66602 10.6667Z" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M4 17.4216C7.70667 16.9082 11.0333 18.6989 12.832 21.5549" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M4 12.5333C4 9.54667 4 8.05333 4.58133 6.912C5.09265 5.90851 5.90851 5.09265 6.912 4.58133C8.05333 4 9.54667 4 12.5333 4H19.4667C22.4533 4 23.9467 4 25.088 4.58133C26.0915 5.09265 26.9073 5.90851 27.4187 6.912C28 8.05333 28 9.54667 28 12.5333V19.4667C28 22.4533 28 23.9467 27.4187 25.088C26.9073 26.0915 26.0915 26.9073 25.088 27.4187C23.9467 28 22.4533 28 19.4667 28H12.5333C9.54667 28 8.05333 28 6.912 27.4187C5.90851 26.9073 5.09265 26.0915 4.58133 25.088C4 23.9467 4 22.4533 4 19.4667V12.5333Z" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>                
                </div>
              )}
            </div>
          </div>
          <ul class="hero_btn-list">
            <li class="hero_btn-item">
              <button class="hero_btn follow-btn" id="follow-button">
                <span>フォロー</span>
              </button>
            </li>
            
            {currentProject?.snsLinks?.map((link: any) => (
              <li class="hero_btn-item" 
                  data-sns-type={link.type} 
                  data-sns-name={link.name} 
                  data-sns-description={link.description || ''}>
                  {link.type === 'instagram' && (
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z" fill="currentColor"/>
                    </svg>
                  )}
                  {link.type === 'twitter' && (
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z" fill="currentColor" stroke="currentColor" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  )}
                  {link.type === 'youtube' && (
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z" fill="currentColor"/>
                      <polygon points="9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02" fill="var(--sub-bg-color)"/>
                    </svg>
                  )}
                  {link.type === 'facebook' && (
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z" fill="currentColor" stroke="currentColor" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  )}
                <span class="sns-account-tooltip">{link.name}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </section>
    <section class="profile-section">
  <div class="section-title-wrapper">
    <h3 class="section-title">SNSリンク作成</h3>
    <p>フリープランでは、5つまでsnsを表示できます</p>
  </div>
  
  {(currentProject?.plan === 'free' && (currentProject?.snsLinks?.length || 0) >= 5) ? (
    <div class="upgrade-container">
      <button id="upgrade-sns-btn" class="upgrade-btn">proプランでさらに追加</button>
    </div>
  ) : (
    <button id="add-sns-btn" class="add-sns-btn">追加</button>
  )}
  
  <div class="sns-form">
    <div class="sns-form-row" class:list={{'disabled': currentProject?.plan === 'free' && (currentProject?.snsLinks?.length || 0) >= 5}}>
      <div class="sns-type">
        <label for="sns-type">SNS:</label>
        <div class="select-wrapper">
          <select id="sns-type" disabled={currentProject?.plan === 'free' && (currentProject?.snsLinks?.length || 0) >= 5}>
            <option value="instagram">Instagram</option>
            <option value="twitter">Twitter</option>
            <option value="facebook">Facebook</option>
            <option value="youtube">YouTube</option>
            <option value="tiktok">TikTok</option>
            <option value="line">LINE</option>
          </select>
          <div class="select-icon">
            <svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0_628_234)">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M8.47121 10.9712C8.34619 11.0962 8.17666 11.1664 7.99988 11.1664C7.8231 11.1664 7.65356 11.0962 7.52855 10.9712L3.75721 7.1999C3.69354 7.13841 3.64275 7.06484 3.60781 6.98351C3.57287 6.90217 3.55448 6.81469 3.55371 6.72617C3.55294 6.63765 3.56981 6.54986 3.60333 6.46793C3.63685 6.386 3.68635 6.31157 3.74895 6.24897C3.81155 6.18638 3.88598 6.13688 3.96791 6.10336C4.04984 6.06983 4.13763 6.05297 4.22615 6.05374C4.31467 6.05451 4.40215 6.0729 4.48348 6.10784C4.56482 6.14277 4.63838 6.19356 4.69988 6.25724L7.99988 9.55724L11.2999 6.25724C11.4256 6.1358 11.594 6.0686 11.7688 6.07012C11.9436 6.07164 12.1108 6.14175 12.2344 6.26536C12.358 6.38896 12.4281 6.55617 12.4297 6.73097C12.4312 6.90577 12.364 7.07417 12.2425 7.1999L8.47121 10.9712Z" fill="white"/>
              </g>
              <defs>
                <clipPath id="clip0_628_234">
                  <rect width="16" height="16" fill="white" transform="matrix(0 1 -1 0 16 0.5)"/>
                </clipPath>
              </defs>
            </svg>
          </div>
        </div>
      </div>
      
      <div class="sns-account">
        <label for="sns-account">アカウント名:</label>
        <input type="text" id="sns-account" placeholder="アカウント名を入力" disabled={currentProject?.plan === 'free' && (currentProject?.snsLinks?.length || 0) >= 5} />
      </div>
      
      <div class="sns-description">
        <label for="sns-description">アカウントの簡単な説明:</label>
        <input type="text" id="sns-description" placeholder="例: 相互フォロー歓迎のインスタ..." disabled={currentProject?.plan === 'free' && (currentProject?.snsLinks?.length || 0) >= 5} />
      </div>
    </div>
  </div>
  
  <!-- 登録済みSNSリスト -->
  <div class="sns-list">
    <div class="sns-list-title">
      <h4>登録済みSNS</h4>
      <p>
        <span>{currentProject?.snsLinks?.length || 0}</span>
        <span>/</span>
        <span>5</span>
      </p>
    </div>
    <div id="sns-items" class="sns-items">
      <!-- SNSアイテムはJavaScriptで動的に生成 -->
      {currentProject?.snsLinks && currentProject.snsLinks.map((link, index) => (
        <div class="sns-item" data-index={index}>
          <div class="sns-icon">
            {link.type === 'instagram' && (
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z" fill="white"/>
              </svg>
            )}
            {link.type === 'twitter' && (
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z" fill="white"/>
              </svg>
            )}
            {link.type === 'facebook' && (
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" fill="white"/>
              </svg>
            )}
            {link.type === 'youtube' && (
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" fill="white"/>
              </svg>
            )}
            {link.type === 'tiktok' && (
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z" fill="white"/>
              </svg>
            )}
            {link.type === 'line' && (
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M24 10.304c0-5.369-5.383-9.738-12-9.738-6.616 0-12 4.369-12 9.738 0 4.814 4.269 8.846 10.036 9.608.391.084.922.258 1.057.592.121.303.079.778.039 1.085l-.171 1.027c-.053.303-.242 1.186 1.039.647 1.281-.54 6.911-4.069 9.428-6.967 1.739-1.907 2.572-3.843 2.572-5.992zm-18.988-2.595c.129 0 .234.105.234.234v4.153h2.287c.129 0 .233.104.233.233v.842c0 .129-.104.234-.233.234h-3.363c-.063 0-.119-.025-.161-.065-.043-.043-.068-.1-.068-.169v-5.229c0-.129.104-.233.233-.233h.838zm14.992 0c.129 0 .233.105.233.234v.842c0 .129-.104.234-.233.234h-2.287v.883h2.287c.129 0 .233.105.233.234v.842c0 .129-.104.233-.233.233h-2.287v.884h2.287c.129 0 .233.105.233.233v.842c0 .129-.104.234-.233.234h-3.363c-.063 0-.12-.025-.162-.065-.043-.043-.067-.1-.067-.169v-5.229c0-.063.025-.12.067-.162.042-.043.099-.067.162-.067h3.363zm-10.026.001c.129 0 .233.104.233.233v5.229c0 .129-.104.234-.233.234h-.837c-.129 0-.234-.105-.234-.234v-5.229c0-.129.105-.233.234-.233h.837zm2.919 0c.129 0 .233.104.233.233v5.229c0 .129-.104.234-.233.234h-.837c-.129 0-.234-.105-.234-.234v-3.176l-1.077 1.645-.536.831c-.039.059-.106.098-.181.098-.075 0-.142-.039-.181-.098l-.535-.831-1.077-1.645v3.176c0 .129-.105.234-.234.234h-.837c-.129 0-.234-.105-.234-.234v-5.229c0-.129.105-.233.234-.233h.837c.075 0 .142.039.18.098l1.853 2.842 1.853-2.842c.039-.059.105-.098.181-.098h.837z" fill="white"/>
              </svg>
            )}
          </div>
          <span class="slash"></span>
          <div class="sns-info">
            <span class="sns-name">{link.name}</span>
            <span class="slash"></span>
            <span class="sns-desc">{link.description}</span>
          </div>
          <button class="delete-sns-btn" data-index={index}>×</button>
        </div>
      ))}
    </div>
  </div>
</div>
  </section>

<div id="custom-alert" class="custom-alert">
  <div class="custom-alert-content">
    <h3>変更が保存されていません</h3>
    <p>ページを離れると、編集中の内容が失われます。保存してから移動しますか？</p>
    <div class="custom-alert-buttons">
      <button id="alert-cancel" class="btn-secondary">キャンセル</button>
      <div class="custom-alert-buttons-group">
        <button id="alert-leave" class="btn-danger">保存せずに離れる</button>
        <button id="alert-save" class="btn-primary">保存して続ける</button>
      </div>
    </div>
  </div>
</div>

<input type="hidden" id="project-id-input" name="projectId" value="">
</Layout>

<style lang="scss">
  .pan{
    margin-top: 8px;
    
    &_item{
      display: flex;
      gap: 8px;
      color: var(--sub-font-color);
      font-size: var(--font-size-xs);
      font-weight: 300;

      >a{
        color: var(--main-font-color);
      }
    }
  }

  .nav{
    position: relative;
    margin-top: 16px;
    width: 100%;
    overflow: hidden;
    border-radius: var(--border-radius-m);
    background-color: var(--sub-bg-color);
    border: 1px solid var(--main-border-color);

    &_btn{
      position: absolute;
      right: 0;
      height: 100%;
      padding: 0 8px;
      background-color: var(--sub-bg-color);
      border-left: 1px solid var(--main-border-color);
      z-index: 10;
    }

    &_list{
      width: 100%;
      display: flex;
      flex-wrap: nowrap;
      gap: 8px;
      align-items: center;
      padding-inline: 24px;
      overflow-x: auto;
    }

    &_item{
      >.active{
        color: var(--main-font-color);
        border-bottom: 1px solid var(--accent-bg-color);
      }
    }

    &_link{
      position: relative;
      padding: 16px 40px;
      text-wrap: nowrap;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--sub-font-color);
      font-size: var(--font-size-xs);
      font-weight: 400;
      transition: all .2s;

      &:hover{
        color: var(--main-font-color);
        transition: all .2s;

        &::after{
          content: "";
          position: absolute;
          bottom: 0;
          height: 1px;
          background-color: var(--accent-bg-color);
          animation: nav_border .2s forwards;

          @keyframes nav_border {
            0%{
              width: 0;
            }
            100%{
              width: 100%;
            }
          }
        }
      }
    }
  }

  .box{
		// width: 100%;
    width: calc(100% - 32px);
    margin-inline: 16px;
		background-color: var(--sub-bg-color);
		border: 1px solid var(--main-border-color);
		border-radius: var(--border-radius-m);
		margin-top: 8px;

		&:first-of-type{
			margin-top: 16px;
		}

		>.inner{
			padding: 16px;
		}

    &_label{
      font-size: var(--font-size-s);
      color: var(--main-font-color);
    }

    &_btn{
      margin-top: 24px;
      padding: 12px 16px;
      border-radius: var(--border-radius-m);
      font-size: var(--font-size-xxs);
      color: var(--main-font-color);
      border: 1px solid var(--sub-border-color);

      &_wrapper{
        display: flex;
        justify-content: right;
        align-items: center;
        gap: 8px;

        >.save{
          color: var(--main-font-color);
          background-color: var(--accent-bg-color);
          border: 1px solid var(--accent-bg-color);
        }
      }
    }
  }

  .hero{
    position: relative;
    width: 100%;
    padding: 16px;
    padding-bottom: 40px;

    &_banner{
      width: 100%;
      height: 104px;
      background-color: var(--elem-bg-color); 
      border-radius: var(--border-radius-m);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      overflow: hidden;
      object-fit: cover;
    }

    &_profile_img{
      width: 100%;
      object-fit: cover;
      border-radius: var(--border-radius-m);
    }

    &_body{
      width: 100%;
      margin-top: 64px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 16px;

      &_prof{
        width: 62%;
        display: flex;
        flex-direction: column;
        // flex: 1;

        &_p{
          flex: 1;
          font-size: var(--font-size-xs);
          color: var(--sub-font-color);

          >.strong{
            color: var(--main-font-color);
            padding-left: 8px;
            margin-left: 8px;
            border-left: 1px solid var(--sub-border-color);
          }
        }

        &_title{
          margin-top: 24px;
          display: flex;
          gap: 8px;
          align-items: center;
          
          >h2{
            font-size: var(--font-size-xxl);
            color: var(--main-font-color);
          }
        }

        &_desc{
          margin-top: 24px;
          display: flex;
          gap: 8px;
          align-items: baseline;
          
          >p{
            flex: 1;
            font-size: var(--font-size-xs);
            color: var(--sub-font-color);
            line-height: 2;
          }
        }
      }

      &_img{
        width: 33%;
        height: 100%;
        min-height: 120px;
        aspect-ratio: 5/3;
        background-color: var(--elem-bg-color);
        border-radius: var(--border-radius-m);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        object-fit: cover;
        overflow: hidden;

        &_img{
          width: 100%;
          object-fit: cover;
        }
      }
    }

    &_btn-{
      &list{
        position: absolute;
        bottom: -40px;
        display: flex;
        align-items: center;
        gap: 8px;
      }
      &item{
        position: relative;
        width: 64px;
        height: 52px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 4px;
        background-color: var(--elem-bg-color);
        border-radius: var(--border-radius-m);
        color: var(--sub-font-color);
        font-size: var(--font-size-xxs);
        border: 1px solid var(--sub-border-color);
                  
        >.delete_btn{
          display: none;
        }

        &:hover{
          transition: all .3s;

          >.delete_btn{
            position: absolute;
            top: -8px;
            right: -8px;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            // border: 1px solid var(--main-border-color);
            background-color: var(--btn-bg-color);
            border-radius: 100px;
            transition: all .3s;
          }
        }
      }
      &label{
        color: #fff;
        font-size: var(--font-size-xxs);
        font-weight: 500;
      }
    }
  }

  .item_action_btns{
    display: flex;
    align-items: center;
    gap: 8px;
    margin-left: 8px;
    margin-top: 2px;
  }

  .hero_banner, .hero_body_img {
    position: relative;
    cursor: pointer;
    object-fit: cover;
  }
  
  .hero_banner::after, .hero_body_img::after {
    content: "クリックして画像を変更";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 14px;
    opacity: 0;
    transition: opacity 0.3s;
  }
  
  .hero_banner:hover::after, .hero_body_img:hover::after {
    opacity: 1;
  }
  
  .uploading {
    position: relative;
  }
  
  .uploading::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1;
  }
  
  .uploading::after {
    content: "アップロード中...";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    z-index: 2;
    opacity: 1;
  }

  .default-image-icon {
    display: flex;
    align-items: center;
    justify-content: center;
  }

.modified {
    position: relative;
  }
  
  .modified::after {
    content: "変更あり - 保存してください";
    position: absolute;
    bottom: 0;
    right: 0;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 4px 8px;
    font-size: 12px;
    border-radius: 4px 0 0 0;
    z-index: 10;
  }
  
  /* 画像プレビューのスタイル */
  .hero_banner_img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: var(--border-radius-m);
  }
  
  .hero_body_img_preview {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: var(--border-radius-m);
  }


  .custom-alert {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.3);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    backdrop-filter: blur(3px);

    &-content{
      background-color: var(--sub-bg-color);
      padding: 28px;
      border-radius: var(--border-radius-m);
      max-width: 500px;
      width: 90%;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
      transform: translateY(20px);
      transition: transform 0.3s ease;
      border: 1px solid var(--main-border-color);

      >h3{
        margin-top: 0;
        margin-bottom: 16px;
        color: var(--main-font-color);
        font-size: var(--font-size-m);
        font-weight: 500;
      }

      >p{
        margin-bottom: 24px;
        color: var(--sub-font-color);
        font-size: var(--font-size-xs);
        line-height: 1.5;
        border-bottom: 1px solid var(--sub-border-color);
        padding-bottom: 16px;
      }
    }

    &-buttons{
      display: flex;
      align-items: center;

      &-group{
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        margin-left: auto;

        >.btn-danger{
          color: var(--danger-font-color);
          font-size: var(--font-size-xs);
          border: 1px solid var(--main-border-color);
          padding: 12px 16px;
          transition: all .2s;
          border-radius: var(--border-radius-m);

          &:hover{
            border: 1px solid var(--danger-border-color);
            color: var(--main-font-color);
            background-color: var(--delete-bg-color);
            transition: all .2s;
          }
        }

        >.btn-primary{
          color: var(--main-font-color);
          font-size: var(--font-size-xs);
          border: 1px solid var(--main-border-color);
          padding: 12px 16px;
          border-radius: var(--border-radius-m);
          transition: all .2s;

          &:hover{
            border: 1px solid var(--accent-bg-color);
            background-color: var(--accent-bg-color);
            transition: all .2s;
          }
        }
      }

      >.btn-secondary{
        color: var(--sub-font-color);
        font-size: var(--font-size-xs);
        border-bottom: 1px solid var(--sub-border-color);
        padding-bottom: 4px;
        transition: all .2s;

        &:hover{
          transition: all .2s;
          transform: scale(1.05);
          color: var(--main-font-color);
        }
      }
    }
  }
  
  .custom-alert.active {
    opacity: 1;
    visibility: visible;
  }
  
  .custom-alert.active .custom-alert-content {
    transform: translateY(0);
  }
  
  @media (max-width: 768px) {
    .custom-alert-content {
      width: 95%;
      padding: 20px;
    }
    
    .custom-alert-buttons {
      flex-direction: column;
      gap: 8px;
    }
    
    .btn-primary, .btn-secondary, .btn-danger {
      width: 100%;
      padding: 12px;
    }
  }
  
  .sns-account-tooltip {
    position: absolute;
    bottom: -24px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 8px;
    border-radius: var(--border-radius-s);
    font-size: var(--font-size-xxs);
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s, visibility 0.2s;
    z-index: 10;
  }
  
  .hero_btn-item:hover .sns-account-tooltip {
    opacity: 1;
    visibility: visible;
  }

  .sns-item {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    background-color: #f5f5f5;
    border-radius: 6px;
  }
  
  
  .sns-name {
    flex: 1;
    font-size: 14px;
    color: #333;
  }
  
  .delete-sns-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 4px;
  }

  .many-followers {
    color: var(--accent-color, #ffd700);
  }
  
  .sns-form-row.disabled {
    background-color: rgba(40, 40, 40, 0.8);
    opacity: 0.4;
    pointer-events: none;
  }
  
  .upgrade-container {
    display: flex;
    margin-bottom: 16px;
    position: relative;
  }
  
  .upgrade-btn {
    background-color: var(--accent-bg-color);
    color: white;
    padding: 12px 16px;
    border-radius: var(--border-radius-m);
    font-size: var(--font-size-xs);
    cursor: pointer;
    border: none;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }
  
  .upgrade-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
</style>


<script type="module">
  // グローバル変数を追加
  let tempBannerFile = null;
  let tempBannerPreview = null;
  let tempProfileFile = null;
  let tempProfilePreview = null;
  
  let projectName = document.getElementById("project-name");
  let projectDescription = document.getElementById("project-description");
  let saveButton = document.getElementById("save-btn");

  // クリックで編集可能にする
  function enableEditing(element) {
    element.contentEditable = true;
    element.focus();
  }

  // 編集完了後にエディットモードを終了
  function disableEditing(element) {
    element.contentEditable = false;
  }

  // クリック時に編集モード開始
  if (projectName) projectName.addEventListener("click", () => enableEditing(projectName));
  if (projectDescription) projectDescription.addEventListener("click", () => enableEditing(projectDescription));

  // 保存ボタンがクリックされたとき - ここを修正
  if (saveButton) {
  saveButton.addEventListener("click", async () => {
      if (projectName) disableEditing(projectName);
      if (projectDescription) disableEditing(projectDescription);

      const updatedName = projectName ? projectName.innerText.trim() : "";
      const updatedDescription = projectDescription ? projectDescription.innerText.trim() : "";

      try {
        // 保存中の表示
        saveButton.textContent = "保存中...";
        saveButton.disabled = true;
        
        // 画像ファイルがある場合はアップロード
        let bannerUrl = null;
        let profileImageUrl = null;
        
        // バナー画像のアップロード
        if (tempBannerFile) {
          const formData = new FormData();
          formData.append('action', 'update_project_banner');
          formData.append('bannerImage', tempBannerFile);
          // projectIdを追加
          const projectIdInput = document.getElementById('project-id-input');
          if (projectIdInput) {
            formData.append('projectId', projectIdInput.value);
          }
          
          try {
            const response = await fetch('', {
              method: 'POST',
              body: formData
            });
            
            if (response.ok) {
              const result = await response.json();
              if (result.success) {
                bannerUrl = result.imageUrl;
                console.log('バナー画像のアップロードに成功:', bannerUrl);
              } else {
                console.error('バナー画像のアップロードに失敗:', result.error);
              }
            } else {
              console.error('バナー画像のアップロードに失敗:', response.statusText);
            }
          } catch (error) {
            console.error('バナー画像のアップロードエラー:', error);
          }
        }
        
        // プロフィール画像のアップロード
        if (tempProfileFile) {
          const formData = new FormData();
          formData.append('action', 'update_project_profile');
          formData.append('profileImage', tempProfileFile);
          // projectIdを追加
          const projectIdInput = document.getElementById('project-id-input');
          if (projectIdInput) {
            formData.append('projectId', projectIdInput.value);
          }
          
          try {
            const response = await fetch('', {
              method: 'POST',
              body: formData
            });
            
            if (response.ok) {
              const result = await response.json();
              if (result.success) {
                profileImageUrl = result.imageUrl;
                console.log('プロフィール画像のアップロードに成功:', profileImageUrl);
              } else {
                console.error('プロフィール画像のアップロードに失敗:', result.error);
              }
            } else {
              console.error('プロフィール画像のアップロードに失敗:', response.statusText);
            }
          } catch (error) {
            console.error('プロフィール画像のアップロードエラー:', error);
          }
        }
        
        // プロジェクト情報の更新
        const projectData = {
          siteName: updatedName,
          description: updatedDescription,
          projectId: document.getElementById('project-id-input')?.value
        };
        
        // 画像URLがある場合は追加
        if (bannerUrl) projectData.bannerUrl = bannerUrl;
        if (profileImageUrl) projectData.profileImageUrl = profileImageUrl;
        
        console.log('プロジェクト情報を更新:', projectData);
        
        // プロジェクト情報を更新
        const updateResponse = await fetch("/api/updateProject", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
          body: JSON.stringify(projectData)
    });

        if (updateResponse.ok) {
      alert("プロジェクトが保存されました！");
          // 一時ファイルをクリア
          tempBannerFile = null;
          tempProfileFile = null;
          
          // 変更済みマークを削除
          document.querySelectorAll('.modified').forEach(el => {
            el.classList.remove('modified');
          });
          
          // ページをリロード（オプション）
          // window.location.reload();
    } else {
          const errorData = await updateResponse.json();
          alert(`保存に失敗しました: ${errorData.error || '不明なエラー'}`);
        }
      } catch (error) {
        console.error("保存エラー:", error);
        alert(`保存に失敗しました: ${error.message || '不明なエラー'}`);
      } finally {
        // ボタンを元に戻す
        saveButton.textContent = "保存";
        saveButton.disabled = false;
      }
    });
  }

  // 2. 画像プレビューのスタイルを修正
  document.addEventListener('DOMContentLoaded', () => {
    // バナー画像のアップロード処理
    const heroBanner = document.getElementById('hero-banner');
    const bannerUpload = document.getElementById('banner-upload');
    
    if (heroBanner && bannerUpload) {
      // バナーをクリックしたらファイル選択ダイアログを表示
      heroBanner.addEventListener('click', () => {
        bannerUpload.click();
      });
      
      // ファイルが選択されたらプレビュー表示
      bannerUpload.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        // 一時ファイルとして保存
        tempBannerFile = file;
        
        // プレビュー表示
        const reader = new FileReader();
        reader.onload = (event) => {
          // デフォルトアイコンがある場合は削除
          const defaultIcon = heroBanner.querySelector('.default-image-icon');
          if (defaultIcon) {
            defaultIcon.remove();
          }
          
          // 既存の画像があれば更新、なければ新しく作成
          let bannerImg = heroBanner.querySelector('img');
          if (bannerImg) {
            bannerImg.src = event.target.result;
            tempBannerPreview = event.target.result;
          } else {
            bannerImg = document.createElement('img');
            bannerImg.src = event.target.result;
            tempBannerPreview = event.target.result;
            bannerImg.alt = "バナー画像";
            bannerImg.className = 'hero_banner_img'; // クラスを追加
            heroBanner.appendChild(bannerImg);
          }
          
          // 変更があることを示す表示
          heroBanner.classList.add('modified');
        };
        reader.readAsDataURL(file);
      });
    }
    
    // プロフィール画像のアップロード処理を追加
    const heroProfileImg = document.getElementById('hero-profile-img');
    const profileUpload = document.getElementById('profile-upload');
    
    if (heroProfileImg && profileUpload) {
      // プロフィール画像をクリックしたらファイル選択ダイアログを表示
      heroProfileImg.addEventListener('click', () => {
        profileUpload.click();
      });
      
      // ファイルが選択されたらプレビュー表示
      profileUpload.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        // 一時ファイルとして保存
        tempProfileFile = file;
        
        // プレビュー表示
        const reader = new FileReader();
        reader.onload = (event) => {
          // デフォルトアイコンがある場合は削除
          const defaultIcon = heroProfileImg.querySelector('.default-image-icon');
          if (defaultIcon) {
            defaultIcon.remove();
          }
          
          // 既存の画像があれば更新、なければ新しく作成
          let profileImg = heroProfileImg.querySelector('img');
          if (profileImg) {
            profileImg.src = event.target.result;
            tempProfilePreview = event.target.result;
          } else {
            profileImg = document.createElement('img');
            profileImg.src = event.target.result;
            tempProfilePreview = event.target.result;
            profileImg.alt = "プロフィール画像";
            profileImg.className = 'hero_body_img_img'; // クラスを追加
            heroProfileImg.appendChild(profileImg);
          }
          
          // 変更があることを示す表示
          heroProfileImg.classList.add('modified');
        };
        reader.readAsDataURL(file);
      });
    }
  });

  const projectIdFromUrl = window.location.pathname.split('/').filter(Boolean)[1];
  
  // DOMContentLoadedイベントを使用して要素が読み込まれた後に処理を実行
  document.addEventListener('DOMContentLoaded', () => {
    // 隠しフィールドにprojectIdを設定
    document.querySelector('#project-id-input')?.setAttribute('value', projectIdFromUrl);
    
    // 要素の参照を取得
    const projectName = document.getElementById('project-name');
    const projectDescription = document.getElementById('project-description');
    const saveButton = document.getElementById('save-btn');
    const bannerUpload = document.getElementById('banner-upload');
    const profileUpload = document.getElementById('profile-upload');
    const customAlert = document.getElementById('custom-alert');
    const alertCancel = document.getElementById('alert-cancel');
    const alertLeave = document.getElementById('alert-leave');
    const alertSave = document.getElementById('alert-save');
    
    // 変更があるかどうかを追跡する変数
    let hasUnsavedChanges = false;
    
    // 変更を検知する関数
    function markAsChanged() {
      console.log('変更を検知しました');
      hasUnsavedChanges = true;
    }
    
    // 変更があった場合にマークする
    if (projectName) {
      projectName.addEventListener('input', markAsChanged);
      projectName.addEventListener('blur', markAsChanged);
    }
    
    if (projectDescription) {
      projectDescription.addEventListener('input', markAsChanged);
      projectDescription.addEventListener('blur', markAsChanged);
    }
    
    // 画像が選択されたときにも変更ありとマーク
    if (bannerUpload) {
      bannerUpload.addEventListener('change', markAsChanged);
    }
    
    if (profileUpload) {
      profileUpload.addEventListener('change', markAsChanged);
    }
    
    // 保存ボタンがクリックされたときに変更なしにマーク
    if (saveButton) {
      saveButton.addEventListener('click', () => {
        console.log('保存ボタンがクリックされました - 変更なしにマーク');
        hasUnsavedChanges = false;
      });
    }
    
    // カスタムアラートを表示する関数
    function showCustomAlert(callback) {
      if (!customAlert) return;
      
      console.log('カスタムアラートを表示');
      customAlert.classList.add('active');
      
      // キャンセルボタン
      if (alertCancel) {
        alertCancel.onclick = () => {
          customAlert.classList.remove('active');
        };
      }
      
      // 保存せずに離れるボタン
      if (alertLeave) {
        alertLeave.onclick = () => {
          hasUnsavedChanges = false; // 変更なしにマーク
          customAlert.classList.remove('active');
          if (callback) callback();
        };
      }
      
      // 保存して続けるボタン
      if (alertSave && saveButton) {
        alertSave.onclick = async () => {
          customAlert.classList.remove('active');
          
          // 保存ボタンのクリックをシミュレート
          saveButton.click();
          
          // 保存が完了したら指定された操作を実行
          setTimeout(() => {
            if (!hasUnsavedChanges && callback) callback();
          }, 1000); // 保存処理に少し時間を与える
        };
      }
    }
    
    // カスタムアラートの背景クリックでキャンセル機能を追加
    if (customAlert) {
      customAlert.addEventListener('click', (e) => {
        // クリックされた要素がアラート自体（背景）の場合のみ処理
        if (e.target === customAlert) {
          console.log('アラート背景がクリックされました - キャンセル');
          customAlert.classList.remove('active');
        }
      });
      
      // アラートコンテンツ部分のクリックイベントが親に伝播しないようにする
      const alertContent = customAlert.querySelector('.custom-alert-content');
      if (alertContent) {
        alertContent.addEventListener('click', (e) => {
          e.stopPropagation();
        });
      }
    }
    
    // ページを離れる前に確認
    window.addEventListener('beforeunload', (e) => {
      if (hasUnsavedChanges) {
        console.log('ページを離れようとしています - 変更あり');
        
        // リロード試行フラグを設定
        isReloadAttempted = true;
        
        // タイマーをセット（リロードが実際に行われなかった場合のため）
        clearTimeout(reloadTimer);
        reloadTimer = setTimeout(() => {
          isReloadAttempted = false;
        }, 1000);
        
        // 標準のブラウザ確認ダイアログ（これは避けられない）
        e.preventDefault();
        e.returnValue = '変更が保存されていません。このページを離れますか？';
        
        // カスタムアラートを表示（ユーザーがキャンセルした場合のため）
        // 注: beforeunloadでは実際にはUIを表示できないが、
        // キャンセルした場合に表示されるようにする
        setTimeout(() => {
          if (isReloadAttempted) {
            showCustomAlert(() => {
              // ユーザーが「保存せずに離れる」を選んだ場合
              isReloadAttempted = false;
              window.location.reload();
            });
            isReloadAttempted = false;
          }
        }, 100);
      }
    });
    
    // リンクのクリックを監視
    document.addEventListener('click', (e) => {
      // リンクがクリックされたかチェック
      const target = e.target;
      if (!target) return;
      
      const link = target.closest('a');
      if (link && hasUnsavedChanges) {
        const href = link.getAttribute('href');
        if (!href) return;
        
        // 同じページ内のアンカーリンクは無視
        if (href.startsWith('#')) return;
        
        console.log('リンクがクリックされました - 変更あり');
        
        // デフォルトの動作を防止
        e.preventDefault();
        
        // カスタムアラートを表示
        showCustomAlert(() => {
          // ユーザーが「保存せずに離れる」を選んだ場合の処理
          window.location.href = href;
        });
      }
    });
    
    console.log('変更検知機能が初期化されました');
  });

  // カスタムアラートの背景クリックでキャンセル機能を修正
  document.addEventListener('DOMContentLoaded', () => {
    const customAlert = document.getElementById('custom-alert');
    
    if (customAlert) {
      // カスタムアラート全体のクリックイベント
      customAlert.addEventListener('click', function(e) {
        console.log('カスタムアラートがクリックされました', e.target, this);
        
        // クリックされた要素がカスタムアラート自体かどうかを確認
        if (e.target === this) {
          console.log('背景がクリックされました - アラートを閉じます');
          this.classList.remove('active');
        }
      });
      
      // アラートコンテンツのクリックイベント伝播を停止
      const alertContent = customAlert.querySelector('.custom-alert-content');
      if (alertContent) {
        alertContent.addEventListener('click', function(e) {
          console.log('アラートコンテンツがクリックされました');
          e.stopPropagation();
        });
      }
    }
  });

  // ページがロードされた直後にリロード試行フラグをリセット
  window.addEventListener('load', () => {
    isReloadAttempted = false;
    clearTimeout(reloadTimer);
  });
  
  document.addEventListener('DOMContentLoaded', () => {
    // 既存の要素取得に追加
    const projectName = document.getElementById('project-name');
    const projectDescription = document.getElementById('project-description');
    const saveButton = document.getElementById('save-btn');
    // 他の要素も同様に取得
    
    // 変更があるかどうかを追跡する変数
    let hasUnsavedChanges = false;
    
    // 変更を検知する関数
    function markAsChanged() {
      console.log('変更を検知しました');
      hasUnsavedChanges = true;
    }
    
    // 変更があった場合にマークする（既存のコードに追加）
    if (projectName) {
      projectName.addEventListener('input', markAsChanged);
      projectName.addEventListener('blur', markAsChanged);
    }
    
    if (projectDescription) {
      projectDescription.addEventListener('input', markAsChanged);
      projectDescription.addEventListener('blur', markAsChanged);
    }
    
    // 保存ボタンがクリックされたときの処理（既存のコードを拡張）
    if (saveButton) {
      saveButton.addEventListener('click', async () => {
        console.log('保存ボタンがクリックされました');
        
        try {
          // プロジェクト情報の保存
          const formData = new FormData();
          formData.append('action', 'update_project_info');
          formData.append('projectId', projectIdFromUrl);
          formData.append('siteName', projectName?.textContent || ''); // project-nameの内容をsiteNameとして送信
          formData.append('projectDescription', projectDescription?.textContent || '');
          
          // APIリクエスト
          const response = await fetch(window.location.href, {
            method: 'POST',
            body: formData
          });
          
          if (!response.ok) {
            throw new Error('プロジェクト情報の保存に失敗しました');
          }
          
          // 保存成功
          console.log('プロジェクト情報が保存されました');
          hasUnsavedChanges = false;
          
        } catch (error) {
          console.error('保存中にエラーが発生しました:', error);
          alert('保存中にエラーが発生しました。もう一度お試しください。');
        }
      });
    }
  });

  document.addEventListener('DOMContentLoaded', () => {
    // SNS関連の要素を取得
    const snsTypeSelect = document.getElementById('sns-type');
    const snsAccountInput = document.getElementById('sns-account');
    const snsDescriptionInput = document.getElementById('sns-description');
    const addSnsBtn = document.getElementById('add-sns-btn');
    const snsItemsContainer = document.getElementById('sns-items');
    
    // SNSアイコンのマッピング
    const snsIcons = {
      instagram: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z" fill="#fff"/>
                  </svg>`,
      twitter: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z" fill="#c4c4c4"/>
                </svg>`,
      facebook: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" fill="#c4c4c4"/>
                </svg>`,
      youtube: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" fill="#c4c4c4"/>
              </svg>`,
      tiktok: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z" fill="#c4c4c4"/>
              </svg>`,
      line: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M24 10.304c0-5.369-5.383-9.738-12-9.738-6.616 0-12 4.369-12 9.738 0 4.814 4.269 8.846 10.036 9.608.391.084.922.258 1.057.592.121.303.079.778.039 1.085l-.171 1.027c-.053.303-.242 1.186 1.039.647 1.281-.54 6.911-4.069 9.428-6.967 1.739-1.907 2.572-3.843 2.572-5.992zm-18.988-2.595c.129 0 .234.105.234.234v4.153h2.287c.129 0 .233.104.233.233v.842c0 .129-.104.234-.233.234h-3.363c-.063 0-.119-.025-.161-.065-.043-.043-.068-.1-.068-.169v-5.229c0-.129.104-.233.233-.233h.838zm14.992 0c.129 0 .233.105.233.234v.842c0 .129-.104.234-.233.234h-2.287v.883h2.287c.129 0 .233.105.233.234v.842c0 .129-.104.233-.233.233h-2.287v.884h2.287c.129 0 .233.105.233.233v.842c0 .129-.104.234-.233.234h-3.363c-.063 0-.12-.025-.162-.065-.043-.043-.067-.1-.067-.169v-5.229c0-.063.025-.12.067-.162.042-.043.099-.067.162-.067h3.363zm-10.026.001c.129 0 .233.104.233.233v5.229c0 .129-.104.234-.233.234h-.837c-.129 0-.234-.105-.234-.234v-5.229c0-.129.105-.233.234-.233h.837zm2.919 0c.129 0 .233.104.233.233v5.229c0 .129-.104.234-.233.234h-.837c-.129 0-.234-.105-.234-.234v-3.176l-1.077 1.645-.536.831c-.039.059-.106.098-.181.098-.075 0-.142-.039-.181-.098l-.535-.831-1.077-1.645v3.176c0 .129-.105.234-.234.234h-.837c-.129 0-.234-.105-.234-.234v-5.229c0-.129.105-.233.234-.233h.837c.075 0 .142.039.18.098l1.853 2.842 1.853-2.842c.039-.059.105-.098.181-.098h.837z" fill="#c4c4c4"/>
            </svg>`
    };
    
    // SNS追加ボタンのクリックイベント
    if (addSnsBtn) {
      addSnsBtn.addEventListener('click', async () => {
        const snsType = snsTypeSelect?.value;
        const snsName = snsAccountInput?.value.trim();
        const snsDescription = snsDescriptionInput?.value.trim();
        
        if (!snsType || !snsName) {
          alert('SNSタイプとアカウント名を入力してください');
          return;
        }
        
        try {
          // FormDataを作成
          const formData = new FormData();
          formData.append('action', 'add_sns_link');
          formData.append('projectId', projectIdFromUrl);
          formData.append('snsType', snsType);
          formData.append('snsName', snsName);
          formData.append('snsDescription', snsDescription);
          
          // APIリクエスト
          const response = await fetch(window.location.href, {
            method: 'POST',
            body: formData
          });
          
          if (!response.ok) {
            throw new Error('SNSリンクの追加に失敗しました');
          }
          
          // 成功したら入力フィールドをクリア
          snsAccountInput.value = '';
          snsDescriptionInput.value = '';
          
          // 新しいSNSアイテムを追加
          const newSnsItem = document.createElement('div');
          newSnsItem.className = 'sns-item';
          newSnsItem.dataset.index = document.querySelectorAll('.sns-item').length.toString();
          
          newSnsItem.innerHTML = `
            <div class="sns-icon">
              ${snsIcons[snsType] || ''}
            </div>
            <span class="slash"></span>
            <div class="sns-info">
              <span class="sns-name">${snsName}</span>
              <span class="slash"></span>
              <span class="sns-desc">${snsDescription}</span>
            </div>
            <button class="delete-sns-btn" data-index="${newSnsItem.dataset.index}">×</button>
          `;
          
          snsItemsContainer?.appendChild(newSnsItem);
          
          // 削除ボタンにイベントリスナーを追加
          const deleteBtn = newSnsItem.querySelector('.delete-sns-btn');
          if (deleteBtn) {
            deleteBtn.addEventListener('click', handleDeleteSns);
          }
          
          // 登録済みSNS数の表示を更新
          const countElement = document.querySelector('.sns-list-title p span:first-child');
          if (countElement) {
            const currentCount = parseInt(countElement.textContent || '0') + 1;
            countElement.textContent = currentCount.toString();
          }
          
          console.log('SNSリンクが追加されました');
          
        } catch (error) {
          console.error('SNSリンク追加中にエラーが発生しました:', error);
          alert('SNSリンクの追加に失敗しました。もう一度お試しください。');
        }
      });
    }
    
    // 既存のSNS削除ボタンにイベントリスナーを追加
    document.querySelectorAll('.delete-sns-btn').forEach(btn => {
      btn.addEventListener('click', handleDeleteSns);
    });
    
    // SNS削除処理
    async function handleDeleteSns(e) {
      const btn = e.currentTarget;
      const snsItem = btn.closest('.sns-item');
      const snsIndex = btn.dataset.index;
      
      if (!snsItem || !snsIndex) return;
      
      if (!confirm('このSNSリンクを削除してもよろしいですか？')) return;
      
      try {
        // FormDataを作成
        const formData = new FormData();
        formData.append('action', 'delete_sns_link');
        formData.append('projectId', projectIdFromUrl);
        formData.append('snsIndex', snsIndex);
        
        // APIリクエスト
        const response = await fetch(window.location.href, {
          method: 'POST',
          body: formData
        });
        
        if (!response.ok) {
          throw new Error('SNSリンクの削除に失敗しました');
        }
        
        // 成功したらUIから削除
        snsItem.remove();
        
        // インデックスを更新
        document.querySelectorAll('.sns-item').forEach((item, idx) => {
          item.dataset.index = idx.toString();
          const deleteBtn = item.querySelector('.delete-sns-btn');
          if (deleteBtn) {
            deleteBtn.dataset.index = idx.toString();
          }
        });
        
        // 登録済みSNS数の表示を更新
        const countElement = document.querySelector('.sns-list-title p span:first-child');
        if (countElement) {
          const currentCount = parseInt(countElement.textContent || '0') - 1;
          countElement.textContent = currentCount.toString();
        }
        
        console.log('SNSリンクが削除されました');
        
      } catch (error) {
        console.error('SNSリンク削除中にエラーが発生しました:', error);
        alert('SNSリンクの削除に失敗しました。もう一度お試しください。');
      }
    }
  });

  document.addEventListener('DOMContentLoaded', () => {
    // SNS関連の要素を取得
    const snsTypeSelect = document.getElementById('sns-type');
    const snsAccountInput = document.getElementById('sns-account');
    const snsDescriptionInput = document.getElementById('sns-description');
    const addSnsBtn = document.getElementById('add-sns-btn');
    const snsItemsContainer = document.getElementById('sns-items');
    
    // セレクトボックスのラッパーをクリックしたときにセレクトボックスをクリックする
    const selectWrapper = document.querySelector('.select-wrapper');
    if (selectWrapper) {
      selectWrapper.addEventListener('click', (e) => {
        // セレクトボックス自体がクリックされた場合は何もしない
        if (e.target.tagName === 'SELECT') return;
        
        // セレクトボックスをクリック
        const select = selectWrapper.querySelector('select');
        if (select) {
          select.click();
        }
      });
    }

    // プロジェクトIDをURLから取得
  const projectIdFromUrl = window.location.pathname.split('/')[2];
  
  // ページ読み込み時にFirebaseからデータを再取得する関数
  async function refreshSNSData() {
    try {
      const response = await fetch(`/api/getProject?projectId=${projectIdFromUrl}`);
      if (!response.ok) throw new Error('プロジェクト情報の取得に失敗しました');
      
      const data = await response.json();
      const snsLinks = data.snsLinks || [];
      
      // SNSリストを更新
      const snsItemsContainer = document.getElementById('sns-items');
      if (snsItemsContainer) {
        // 既存のアイテムをクリア
        snsItemsContainer.innerHTML = '';
        
        // SNSアイコンのマッピング
        const snsIcons = {
          instagram: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z" fill="white"/>
                      </svg>`,
          // 他のSNSアイコン定義
        };
        
        // SNSリンクを表示
        snsLinks.forEach((link, index) => {
          const snsItem = document.createElement('div');
          snsItem.className = 'sns-item';
          snsItem.dataset.index = index.toString();
          
          snsItem.innerHTML = `
            <div class="sns-icon">
              ${snsIcons[link.type] || ''}
            </div>
            <span class="slash"></span>
            <div class="sns-info">
              <span class="sns-name">${link.name}</span>
              <span class="slash"></span>
              <span class="sns-desc">${link.description || ''}</span>
            </div>
            <button class="delete-sns-btn" data-index="${index}">×</button>
          `;
          
          snsItemsContainer.appendChild(snsItem);
          
          // 削除ボタンにイベントリスナーを追加
          const deleteBtn = snsItem.querySelector('.delete-sns-btn');
          if (deleteBtn) {
            deleteBtn.addEventListener('click', handleDeleteSns);
          }
        });
        
        // カウンター更新
        const countElement = document.querySelector('.sns-list-title p span:first-child');
        if (countElement) {
          countElement.textContent = snsLinks.length.toString();
        }
      }
    } catch (error) {
      console.error('SNSデータの更新に失敗しました:', error);
    }
  }
  
  // SNS追加後にデータを更新
  async function addSnsLink(snsType, snsName, snsDescription) {
    try {
        const snsType = document.getElementById("sns-type").value;
        const snsAccount = document.getElementById("sns-account").value;
        const snsDescription = document.getElementById("sns-description").value;
    
        // 既存のSNSリンクを取得して重複チェック
        const snsItemsContainer = document.getElementById('sns-items');
        const snsItems = Array.from(snsItemsContainer.querySelectorAll('.sns-item'));
        
        // 既存のアイテムから型とアカウント名を抽出
        const existingSNS = snsItems.map(item => {
          const typeEl = item.querySelector('.sns-icon svg');
          // SVGから型を推測（実際のコードでは適切に型を抽出する必要があります）
          let type = '';
          if (typeEl && typeEl.innerHTML.includes('instagram')) {
            type = 'instagram';
          } else if (typeEl && typeEl.innerHTML.includes('twitter')) {
            type = 'twitter';
          } // 他のSNSタイプも同様に処理
          
          const name = item.querySelector('.sns-name')?.textContent || '';
          
          return { type, name };
        });
        
        // 重複チェック
        const isDuplicate = existingSNS.some(sns => 
          sns.type === snsType && sns.name === snsAccount
        );
        
        if (isDuplicate) {
          alert("同じタイプ・同じアカウント名のSNSが既に登録されています。");
          return false;
        }
        
        // FormDataを作成
        const formData = new FormData();
        formData.append('action', 'add_sns_link');
        formData.append('projectId', projectIdFromUrl);
        formData.append('snsType', snsType);
        formData.append('snsName', snsAccount);
        formData.append('snsDescription', snsDescription);
        
        // APIリクエスト
        const response = await fetch(window.location.href, {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        // ここを修正: 成功でない場合はサーバーからのエラーメッセージを優先表示
        if (!result.success) {
          // サーバーから返されたエラーメッセージがあればそれを表示
          if (result.error) {
            alert(result.error);
          } else {
            // エラーメッセージがない場合は汎用メッセージ
            alert('SNSリンクの追加に失敗しました。');
          }
          return false;
        }
        
        // 成功したらデータを再取得して表示を更新
        await refreshSNSData();
        
        // 入力フィールドをクリア
        document.getElementById("sns-account").value = "";
        document.getElementById("sns-description").value = "";
        
        return true;
      } catch (error) {
        console.error('SNSリンク追加中にエラーが発生しました:', error);
        alert('SNSリンクの追加に失敗しました。もう一度お試しください。');
        return false;
      }
    }
  });

  // SNS追加フォームのsubmitイベントリスナーを追加/修正
  document.getElementById('sns-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const snsType = document.getElementById('sns-type').value;
    const snsAccount = document.getElementById('sns-account').value;
    const snsDescription = document.getElementById('sns-description').value;
    
    if (!snsType || !snsAccount) {
      alert('SNSの種類とアカウント名を入力してください');
      return;
    }
    
    // SNS追加処理を実行
    const success = await addSnsLink(snsType, snsAccount, snsDescription);
    if (success) {
      console.log('SNSリンクが追加されました');
    }
  });

  // SNSアイコンのホバーイベントリスナー
  document.addEventListener('DOMContentLoaded', () => {
    const snsItems = document.querySelectorAll('.hero_btn-item[data-sns-type]');
    
    snsItems.forEach(item => {
      item.addEventListener('mouseenter', () => {
        const snsType = item.getAttribute('data-sns-type');
        const snsName = item.getAttribute('data-sns-name');
        const snsDescription = item.getAttribute('data-sns-description');
        
        console.log(`SNS: ${snsType}, アカウント: ${snsName}, 説明: ${snsDescription}`);
      });
    });
  });

  // プランアップグレードボタンのイベントハンドラ
  const upgradeSnsBtn = document.getElementById('upgrade-sns-btn');
  if (upgradeSnsBtn) {
    upgradeSnsBtn.addEventListener('click', () => {
      // アップグレードページへ遷移
      window.location.href = '/upgrade-plan';
    });
  }
  
  // エラーメッセージがある場合の処理
  document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const error = urlParams.get('error');
    
    if (error === 'sns_limit_reached') {
      alert('フリープランでは5つまでしかSNSリンクを追加できません。プランをアップグレードしてください。');
    }
  });

  // プロジェクト名の編集を処理する関数
  async function handleProjectNameEdit(event) {
    const projectName = event.target.textContent;
    const projectId = event.target.dataset.projectId;

    try {
      const formData = new FormData();
      formData.append("action", "update_project_info");
      formData.append("projectId", projectId);
      // プロジェクト名の変更時はsiteNameのみを更新
      formData.append("siteName", projectName);
      // nameは送信しない

      const response = await fetch("", {
        method: "POST",
        body: formData
      });

      if (!response.ok) {
        throw new Error("更新に失敗しました");
      }
    } catch (error) {
      console.error("プロジェクト名の更新に失敗:", error);
      // エラー時は元の値に戻す
      event.target.textContent = event.target.dataset.originalName;
    }
  }

  // プロジェクト名の要素にイベントリスナーを設定
  document.querySelector(".project-name")?.addEventListener("blur", handleProjectNameEdit);

  // プロジェクト情報保存ボタンのイベントハンドラ
  document.getElementById('save-project-info')?.addEventListener('click', async function() {
    const projectDescription = document.getElementById('project-description').textContent;
    const siteName = document.querySelector('.project-name').textContent;
    const projectId = this.dataset.projectId;
    
    try {
      const formData = new FormData();
      formData.append("action", "update_project_info");
      formData.append("projectId", projectId);
      // nameは送信しない（重要）
      formData.append("siteName", siteName);
      formData.append("projectDescription", projectDescription);
      
      const response = await fetch("", {
        method: "POST",
        body: formData
      });
      
      if (!response.ok) {
        throw new Error("更新に失敗しました");
      }
      
      alert("保存しました");
    } catch (error) {
      console.error("プロジェクト情報の更新に失敗:", error);
      alert("更新に失敗しました");
    }
  });
</script>