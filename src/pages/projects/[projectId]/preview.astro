---
export const prerender = false;
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/preview.scss';
import ProjectNav from "../../../components/ProjectNav.astro"; // この行を追加

import admin from "firebase-admin";
// Firebase Admin SDK の初期化（初回のみ実施）
if (!admin.apps.length) {
  const serviceAccountStr =
    process.env.FIREBASE_SERVICE_ACCOUNT || import.meta.env.FIREBASE_SERVICE_ACCOUNT;
  console.log("Service Account:", serviceAccountStr);
  const serviceAccount = JSON.parse(serviceAccountStr!);
  
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}
const adminAuth = admin.auth();
const db = admin.firestore();

// Cookie ヘッダーから "token" をパースする
const cookieHeader = Astro.request.headers.get("cookie") || "";
const cookies = Object.fromEntries(
  cookieHeader.split("; ").filter(Boolean).map(c => {
    const [key, ...v] = c.split("=");
    return [key, v.join("=")];
  })
);
const token = cookies["token"] || "";
let authUser = null;
if (token) {
  try {
    // 第二引数にfalseを追加して、チェックを緩和
    authUser = await adminAuth.verifyIdToken(token, false);
    
    // 以下のような警告ログを追加するとよい（任意）
    const tokenIssuedAt = authUser.iat * 1000; // UNIX時間（秒）をミリ秒に変換
    const currentTime = Date.now();
    const tokenAge = currentTime - tokenIssuedAt;
    
    if (tokenAge > 60 * 60 * 1000) { // 1時間（60分）
      console.warn("トークンが1時間以上前に発行されましたが、有効として処理します");
    }
  } catch (err) {
    console.error("IDトークンの検証に失敗:", err);
  }
}

// Firestore からユーザーの登録情報を取得（ログイン中の場合）
let userData = null;
if (authUser) {
  const userSnap = await db.collection("users").doc(authUser.uid).get();
  if (userSnap.exists) {
    userData = userSnap.data();
  } else {
    console.error("ユーザーデータが存在しません", authUser.uid);
  }
}

// ここで accountName を設定（ログイン中なら displayName、未ログインなら "ログイン"）
const accountName = authUser && userData && userData.displayName
  ? userData.displayName
  : "ログイン";

const projects = userData && userData.projects ? userData.projects : [];

let postError = "";
let defaultFormMode = "login";

const method = Astro.request.method.toUpperCase();
if (method === "POST") {
  const formData = await Astro.request.formData();
  const action = formData.get("action")?.toString() || "";

  if (action === "login") {
    // ログイン処理：Firebase Auth REST API を使ってサインイン
    const email = formData.get("email")?.toString() || "";
    const password = formData.get("password")?.toString() || "";
    const apiKey = import.meta.env.PUBLIC_FIREBASE_API_KEY;
    const res = await fetch(
      `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${apiKey}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email,
          password,
          returnSecureToken: true,
        }),
      }
    );
    const data = await res.json();
    if (data.error) {
      console.error("[Login Error]", data.error);
      postError = "ログインに失敗しました";
    } else {
      return new Response(null, {
        status: 303,
        headers: {
          "Set-Cookie": `token=${data.idToken}; Path=/; HttpOnly`,
          Location: "/",
        },
      });
    }
  } else if (action === "register") {
    // 新規登録処理：Admin SDK を使ってユーザー作成し、Firestore にユーザーデータを保存
    const email = formData.get("email")?.toString() || "";
    const password = formData.get("password")?.toString() || "";
		const confirmPassword = formData.get("confirmPassword")?.toString() || "";
    const displayName = formData.get("displayName")?.toString() || "";
    const bio = formData.get("bio")?.toString() || "";
    // パスワード一致チェック
    if (password !== confirmPassword) {
      postError = "パスワードが一致しません";
			defaultFormMode = "register";
    } else {
      try {
        const userRecord = await adminAuth.createUser({
          email,
          password,
          displayName,
        });
        await db.collection("users").doc(userRecord.uid).set({
          displayName,
          email,
          bio,
          plan: "free",    // デフォルトはフリープラン
          projects: []     // 初期はプロジェクト未登録
        });
        const customToken = await adminAuth.createCustomToken(userRecord.uid);
        return new Response(null, {
          status: 303,
          headers: {
            "Set-Cookie": `token=${customToken}; Path=/; HttpOnly`,
            Location: "/",
          },
        });
      } catch (err) {
        console.error("[Register Error]", err);
        postError = "登録に失敗しました";
      }
    }
  } else if (action === "logout") {
    // ログアウト：Cookie をクリア
    return new Response(null, {
      status: 303,
      headers: {
        "Set-Cookie": `token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT`,
        Location: "/",
      },
    });
  }
}

const { projectId } = Astro.params;

// ユーザーが認証されているか確認
if (!authUser || !userData) {
  console.error("認証されていないユーザーです");
        return new Response(null, {
          status: 303,
          headers: { Location: "/" },
        });
}

// プロジェクトデータの取得（ユーザーのプロジェクト配列から）
let currentProject = null;
if (userData && userData.projects) {
  currentProject = userData.projects.find((p: { id: any; }) => p.id === projectId);
}

// プロジェクトがユーザーに属しているか確認
if (!currentProject) {
  console.error("該当のプロジェクトが見つかりません、またはアクセス権限がありません");
  return new Response(null, {
    status: 303,
    headers: { Location: "/" },
  });
}

// ここからFirestoreからプロジェクトの追加データを取得
try {
  if (projectId) {
    const projectDoc = await db.collection("projects").doc(projectId).get();
    if (projectDoc.exists) {
      const firestoreProject = projectDoc.data();
      
      // Firestoreのデータで現在のプロジェクトデータを拡張
      if (firestoreProject) {
        // nameフィールドは上書きせず、Firestoreからの他のデータを統合
        const { name: _, ...firestoreDataWithoutName } = firestoreProject;
        currentProject = {
          ...currentProject,
          ...firestoreDataWithoutName,
          // siteNameがなければFirestoreから取得、それもなければnameを使用
          siteName: currentProject.siteName || firestoreProject.siteName || currentProject.name
        };
      }
    }
  }
      } catch (error) {
  console.error("Firestoreからの追加データ取得に失敗:", error);
  // 追加データの取得に失敗しても、基本的なプロジェクトデータがあるので処理を続行
}

// お知らせデータを取得
interface NoticeItem {
  id: string;
  title: string;
  tag: string;
  createdAt: Date;
  content: string;
  status?: string;
}

let noticeItems: NoticeItem[] = [];
// 初期値はfalseに設定
let hasMoreNotices = false; 
const noticeLimit = 6;
let noticeOffset = 0;

try {
  if (projectId) {
    // コレクション名を'notices'から'notice'に修正
    const noticeSnapshot = await db.collection("projects").doc(projectId)
      .collection("notice") // 複数形から単数形に修正
      .orderBy("createdAt", "desc")
      .limit(noticeLimit + 1)
      .get();
    
    if (!noticeSnapshot.empty) {
      console.log(`取得したお知らせ件数: ${noticeSnapshot.docs.length}`); // デバッグ用
      
      // すべてのお知らせを取得し、公開状態のみフィルタリング
      const allNoticeItems = noticeSnapshot.docs.map(doc => {
        const data = doc.data();
        return {
          id: doc.id,
          title: data.title || "タイトル未設定",
          tag: data.tag || "お知らせ",
          // createdAtフィールドが存在しない場合や形式が異なる場合に対応
          createdAt: data.createdAt?.toDate ? data.createdAt.toDate() : 
                    (data.createdAt instanceof Date ? data.createdAt : new Date()),
          content: data.content || data.body || "", // contentまたはbodyフィールドに対応
          status: data.status || "public" // ステータスフィールドがない場合はpublicとみなす
        };
      });
      
      // 公開状態のもののみフィルタリング
      const publicNoticeItems = allNoticeItems.filter(item => 
        item.status === "public" || item.status === "published"
      );
      
      console.log(`お知らせフィルタリング: 取得総数=${allNoticeItems.length}, 公開済み=${publicNoticeItems.length}`);
      
      // limit+1件取得できれば、まだ表示すべきデータがある
      hasMoreNotices = publicNoticeItems.length > noticeLimit;
      
      // 表示用データはnoticeLimit件までに制限
      noticeItems = hasMoreNotices ? publicNoticeItems.slice(0, noticeLimit) : publicNoticeItems;
      
      console.log(`処理後のお知らせ件数: ${noticeItems.length}`); // デバッグ用
    } else {
      console.log("お知らせデータが見つかりませんでした");
      hasMoreNotices = false;
    }
  }
      } catch (error) {
  console.error("お知らせデータの取得に失敗:", error);
  hasMoreNotices = false;
}

// ブログデータを取得
interface BlogItem {
  id: string;
  title: string;
  tag: string;
  createdAt: Date;
  imageUrl: string;
  content: string;
  thumbnailUrl?: string;
  body?: string;
  status?: string;
}

let blogItems: BlogItem[] = [];
// 初期値はfalseに設定（アイテムがある場合のみtrueになる）
let hasMoreBlogs = false;
const blogLimit = 6;
let blogOffset = 0;

try {
  if (projectId) {
    // 表示件数+1を取得して、さらに表示すべきデータがあるかを確認する
    const blogSnapshot = await db.collection("projects").doc(projectId)
      .collection("blog")
      .orderBy("createdAt", "desc")
      .limit(blogLimit + 1) // 1件多く取得
      .get();
    
    if (!blogSnapshot.empty) {
      // まずすべてのデータを取得
      const allBlogItems = blogSnapshot.docs.map(doc => {
        const data = doc.data();
              return { 
          id: doc.id,
          title: data.title || "タイトル未設定",
          tag: data.tags?.[0] || "ブログ",
          createdAt: data.createdAt?.toDate() || new Date(),
          imageUrl: data.thumbnailUrl || "https://placehold.jp/1000x600.png",
          content: data.body || "",
          status: data.status || "public"
        };
      });
      
      // ログを追加して状態を確認
      console.log(`取得したブログ件数: ${allBlogItems.length}, 公開中: ${allBlogItems.filter(item => item.status === "public").length}`);
      
      // statusが"public"のもののみフィルタリング
      const publicBlogItems = allBlogItems.filter(item => item.status === "public" || item.status === "published");
      
      // 公開アイテムが表示件数より多い場合、「さらに表示」ボタンを表示
      hasMoreBlogs = publicBlogItems.length > blogLimit;
      
      // 表示用データはblogLimit件までに制限
      blogItems = hasMoreBlogs ? publicBlogItems.slice(0, blogLimit) : publicBlogItems;
      
      // 最終結果をログに出力
      console.log(`ブログ表示処理結果: 表示件数=${blogItems.length}, さらに表示=${hasMoreBlogs}`);
    }
  }
      } catch (error) {
  console.error("ブログデータの取得に失敗:", error);
  hasMoreBlogs = false; // エラーの場合も明示的にfalseに設定
}

// 日付をフォーマットする関数
function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('ja-JP', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  }).format(date).replace(/\//g, '/');
}

const userId = authUser?.uid || "";

---

<Layout title="App Title" userId={userId} accountName={accountName} projects={userData?.projects ?? []}>
  <div class="preview">
    <div class="preview_btns">
      <button class="preview_btn close">
        <span>プレビューを閉じる</span>
      </button>
      <button class="preview_btn update">
        <span>更新</span>
      </button>
    </div>
    <div class="preview_inner">
      <header class="preview_header">
        <div class="preview_header_title-wrapper">
          <h1 class="preview_header_title">{currentProject?.name || "プロジェクト名未設定"}</h1>
          <button class="follow-btn">
            <span>フォロー</span>
          </button>
        </div>
        <nav class="preview_header_nav">
          <ul class="preview_header_nav_list">
            <li class="preview_header_nav_item">
              <a href=`/projects/${projectId}` class="preview_header_nav_link" id="switch-btn">サマリー</a>
            </li>
            <li class="preview_header_nav_item">
              <a href=`/projects/${projectId}/profile` class="preview_header_nav_link" id="switch-btn">プロフィール</a>
            </li>
            <li class="preview_header_nav_item">
              <a href=`/projects/${projectId}/form` class="preview_header_nav_link" id="switch-btn">フォーム</a>
            </li>
            <li class="preview_header_nav_item">
              <a href=`/projects/${projectId}/cms` class="preview_header_nav_link" id="switch-btn">CMS</a>
            </li>
            <li class="preview_header_nav_item">
              <a href=`/projects/${projectId}/analitics` class="preview_header_nav_link" id="switch-btn">アナリティクス</a>
            </li>
          </ul>
        </nav>
      </header>
      <section class="box">
        <div class="inner">
          <div class="hero">
            <div class="hero_banner" id="hero-banner">
              <input type="file" id="banner-upload" accept="image/*" style="display: none;">
              {currentProject?.bannerUrl ? (
                <img class="hero_banner_img" src={currentProject.bannerUrl} alt="バナー画像">
              ) : (
                <div class="default-image-icon">
              <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M27.902 13.32C19.0887 12.1093 11.4887 18.6533 11.9993 27.3333M8.66602 10.6667C8.66602 11.3739 8.94697 12.0522 9.44706 12.5523C9.94716 13.0524 10.6254 13.3333 11.3327 13.3333C12.0399 13.3333 12.7182 13.0524 13.2183 12.5523C13.7184 12.0522 13.9993 11.3739 13.9993 10.6667C13.9993 9.95942 13.7184 9.28115 13.2183 8.78105C12.7182 8.28095 12.0399 8 11.3327 8C10.6254 8 9.94716 8.28095 9.44706 8.78105C8.94697 9.28115 8.66602 9.95942 8.66602 10.6667Z" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M4 17.4216C7.70667 16.9082 11.0333 18.6989 12.832 21.5549" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M4 12.5333C4 9.54667 4 8.05333 4.58133 6.912C5.09265 5.90851 5.90851 5.09265 6.912 4.58133C8.05333 4 9.54667 4 12.5333 4H19.4667C22.4533 4 23.9467 4 25.088 4.58133C26.0915 5.09265 26.9073 5.90851 27.4187 6.912C28 8.05333 28 9.54667 28 12.5333V19.4667C28 22.4533 28 23.9467 27.4187 25.088C26.9073 26.0915 26.0915 26.9073 25.088 27.4187C23.9467 28 22.4533 28 19.4667 28H12.5333C9.54667 28 8.05333 28 6.912 27.4187C5.90851 26.9073 5.09265 26.0915 4.58133 25.088C4 23.9467 4 22.4533 4 19.4667V12.5333Z" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>              
                </div>
              )}
            </div>
            <div class="hero_body">
              <div class="hero_body_prof">
                <p class="hero_body_prof_p">
                  <span>フォロワー</span>
                  <span class="slash"></span>
                  <strong class={`strong ${currentProject?.followers > 100 ? 'many-followers' : ''}`}>
                    {currentProject?.followers || 0}人
                  </strong>
                </p>
                <div class="hero_body_prof_title">
                  <h2 class="project-name">{currentProject?.siteName || currentProject?.name || "サイト名未設定"}</h2>            
                </div>
                <div class="hero_body_prof_desc">
                  <p id="project-description">{currentProject?.description || "このサイトの紹介文を入力してください。このサイトの紹介文を入力してください。このサイトの紹介文を入力してください。このサイトの紹介文を入力してください。このサイトの紹介文を入力してください。このサイトの紹介文を入力してください。"}</p>         
                </div>
              </div>
              <div class="hero_body_img" id="hero-profile-img">
                <input type="file" id="profile-upload" accept="image/*" style="display: none;">
                {currentProject?.profileImageUrl ? (
                  <img class="hero_profile_img" src={currentProject.profileImageUrl} alt="プロフィール画像">
                ) : (
                  <div class="default-image-icon">
                <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M27.902 13.32C19.0887 12.1093 11.4887 18.6533 11.9993 27.3333M8.66602 10.6667C8.66602 11.3739 8.94697 12.0522 9.44706 12.5523C9.94716 13.0524 10.6254 13.3333 11.3327 13.3333C12.0399 13.3333 12.7182 13.0524 13.2183 12.5523C13.7184 12.0522 13.9993 11.3739 13.9993 10.6667C13.9993 9.95942 13.7184 9.28115 13.2183 8.78105C12.7182 8.28095 12.0399 8 11.3327 8C10.6254 8 9.94716 8.28095 9.44706 8.78105C8.94697 9.28115 8.66602 9.95942 8.66602 10.6667Z" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M4 17.4216C7.70667 16.9082 11.0333 18.6989 12.832 21.5549" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M4 12.5333C4 9.54667 4 8.05333 4.58133 6.912C5.09265 5.90851 5.90851 5.09265 6.912 4.58133C8.05333 4 9.54667 4 12.5333 4H19.4667C22.4533 4 23.9467 4 25.088 4.58133C26.0915 5.09265 26.9073 5.90851 27.4187 6.912C28 8.05333 28 9.54667 28 12.5333V19.4667C28 22.4533 28 23.9467 27.4187 25.088C26.9073 26.0915 26.0915 26.9073 25.088 27.4187C23.9467 28 22.4533 28 19.4667 28H12.5333C9.54667 28 8.05333 28 6.912 27.4187C5.90851 26.9073 5.09265 26.0915 4.58133 25.088C4 23.9467 4 22.4533 4 19.4667V12.5333Z" stroke="#C4C4C4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>                
                  </div>
                )}
              </div>
            </div>
            <ul class="hero_btn-list">
              <li class="hero_btn-item">
                <button class="hero_btn follow-btn" id="follow-button">
                  <span>フォロー</span>
                </button>
              </li>
              
              {currentProject?.snsLinks?.map((link: {
                type: string;
                name: string;
                description?: string;
              }) => (
                <li class="hero_btn-item" 
                    data-sns-type={link.type} 
                    data-sns-name={link.name} 
                    data-sns-description={link.description || ''}>
                  <button class="hero_btn">
                    {link.type === 'instagram' && (
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z" fill="currentColor"/>
                      </svg>
                    )}
                    {link.type === 'twitter' && (
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z" fill="currentColor" stroke="currentColor" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    )}
                    {link.type === 'youtube' && (
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z" fill="currentColor"/>
                        <polygon points="9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02" fill="var(--sub-bg-color)"/>
        </svg>          
                    )}
                    {link.type === 'facebook' && (
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z" fill="currentColor" stroke="currentColor" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>          
                    )}
                  </button>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </section>
      <section class="cms-container">
        <div class="inner">
          <h3 class="cms-container_title">お知らせ</h3>
          <ul class="notice_list">
            {noticeItems.length > 0 ? (
              noticeItems.map((notice) => (
                <li class="notice_item">
                  <div class="notice_item_info">
                    <p>
                      <span>{notice.tag}</span>
                      <span class="slash"></span>
                      <span>{formatDate(notice.createdAt)}</span>
                    </p>
                    <h4 class="notice_item_title">
                      {notice.title}
                    </h4>
                  </div>
                  <div class="notice_item_btns">
                    <button class="notice_item_open" data-notice-id={notice.id}>
                      <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g clip-path="url(#clip0_623_115)">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M10.4712 7.52879C10.5962 7.65381 10.6664 7.82334 10.6664 8.00012C10.6664 8.1769 10.5962 8.34644 10.4712 8.47145L6.6999 12.2428C6.63841 12.3065 6.56484 12.3572 6.48351 12.3922C6.40217 12.4271 6.31469 12.4455 6.22617 12.4463C6.13765 12.4471 6.04986 12.4302 5.96793 12.3967C5.886 12.3631 5.81157 12.3136 5.74897 12.251C5.68638 12.1885 5.63688 12.114 5.60336 12.0321C5.56983 11.9502 5.55297 11.8624 5.55374 11.7739C5.55451 11.6853 5.5729 11.5979 5.60784 11.5165C5.64277 11.4352 5.69356 11.3616 5.75724 11.3001L9.05724 8.00012L5.75724 4.70012C5.6358 4.57439 5.5686 4.40598 5.57012 4.23119C5.57164 4.05639 5.64175 3.88918 5.76536 3.76557C5.88896 3.64197 6.05617 3.57186 6.23097 3.57034C6.40577 3.56882 6.57417 3.63601 6.6999 3.75745L10.4712 7.52879Z" fill="white"/>
                        </g>
                        <defs>
                        <clipPath id="clip0_623_115">
                        <rect width="16" height="16" fill="white"/>
                        </clipPath>
                        </defs>
                      </svg>        
                    </button>
                  </div>
                </li>
              ))
            ) : (
              <li class="empty">
                <span class="empty_label">お知らせはありません！</span>
              </li>
            )}
          </ul>
          <div class="view-actions">
            <div class="view-less" style="display: none;">
              <button class="view-less_btn" id="show-less-notices">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M19 11H5C4.73478 11 4.48043 11.1054 4.29289 11.2929C4.10536 11.4804 4 11.7348 4 12C4 12.2652 4.10536 12.5196 4.29289 12.7071C4.48043 12.8946 4.73478 13 5 13H19C19.2652 13 19.5196 12.8946 19.7071 12.7071C19.8946 12.5196 20 12.2652 20 12C20 11.7348 19.8946 11.4804 19.7071 11.2929C19.5196 11.1054 19.2652 11 19 11Z" fill="white"/>
                </svg>
                <p>表示を減らす</p>
              </button>
            </div>
            {noticeItems.length > 0 && hasMoreNotices && (
              <div class="view-more">
                <button class="view-more_btn" id="load-more-notices">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18 12.998H13V17.998C13 18.2633 12.8946 18.5176 12.7071 18.7052C12.5196 18.8927 12.2652 18.998 12 18.998C11.7348 18.998 11.4804 18.8927 11.2929 18.7052C11.1054 18.5176 11 18.2633 11 17.998V12.998H6C5.73478 12.998 5.48043 12.8927 5.29289 12.7052C5.10536 12.5176 5 12.2633 5 11.998C5 11.7328 5.10536 11.4785 5.29289 11.2909C5.48043 11.1034 5.73478 10.998 6 10.998H11V5.99805C11 5.73283 11.1054 5.47848 11.2929 5.29094C11.4804 5.1034 11.7348 4.99805 12 4.99805C12.2652 4.99805 12.5196 5.1034 12.7071 5.29094C12.8946 5.47848 13 5.73283 13 5.99805V10.998H18C18.2652 10.998 18.5196 11.1034 18.7071 11.2909C18.8946 11.4785 19 11.7328 19 11.998C19 12.2633 18.8946 12.5176 18.7071 12.7052C18.5196 12.8927 18.2652 12.998 18 12.998Z" fill="white"/>
                  </svg>
                  <p>さらに表示</p>
                </button>
              </div>
            )}
          </div>
        </div>
      </section>
      <section class="cms-container">
        <div class="inner">
          <h3 class="cms-container_title">ブログ</h3>
          <ul class="blog_list">
            {blogItems.length > 0 ? (
              blogItems.map((blog) => (
                <li class="blog_item" data-blog-id={blog.id}>
                  <img
                    src={blog.imageUrl}
                    alt={blog.title}
                  />
                  <p>
                    <span>
                    {blog.tag}
                    </span>
                    <span class="slash"></span>
                    <span>{formatDate(blog.createdAt)}</span>
                  </p>
                  <h4>{blog.title}</h4>
                </li>
              ))
            ) : (
              <li class="empty">
                <span class="empty_label">ブログはありません！</span>
              </li>
            )}
          </ul>
          <div class="view-actions">
            <div class="view-less" style="display: none;">
              <button class="view-less_btn" id="show-less-blogs">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M19 11H5C4.73478 11 4.48043 11.1054 4.29289 11.2929C4.10536 11.4804 4 11.7348 4 12C4 12.2652 4.10536 12.5196 4.29289 12.7071C4.48043 12.8946 4.73478 13 5 13H19C19.2652 13 19.5196 12.8946 19.7071 12.7071C19.8946 12.5196 20 12.2652 20 12C20 11.7348 19.8946 11.4804 19.7071 11.2929C19.5196 11.1054 19.2652 11 19 11Z" fill="white"/>
                </svg>
                <p>表示を減らす</p>
              </button>
            </div>
            {blogItems.length > 0 && (hasMoreBlogs || blogItems.length >= blogLimit) && (
              <div class="view-more">
                <button class="view-more_btn" id="load-more-blogs">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18 12.998H13V17.998C13 18.2633 12.8946 18.5176 12.7071 18.7052C12.5196 18.8927 12.2652 18.998 12 18.998C11.7348 18.998 11.4804 18.8927 11.2929 18.7052C11.1054 18.5176 11 18.2633 11 17.998V12.998H6C5.73478 12.998 5.48043 12.8927 5.29289 12.7052C5.10536 12.5176 5 12.2633 5 11.998C5 11.7328 5.10536 11.4785 5.29289 11.2909C5.48043 11.1034 5.73478 10.998 6 10.998H11V5.99805C11 5.73283 11.1054 5.47848 11.2929 5.29094C11.4804 5.1034 11.7348 4.99805 12 4.99805C12.2652 4.99805 12.5196 5.1034 12.7071 5.29094C12.8946 5.47848 13 5.73283 13 5.99805V10.998H18C18.2652 10.998 18.5196 11.1034 18.7071 11.2909C18.8946 11.4785 19 11.7328 19 11.998C19 12.2633 18.8946 12.5176 18.7071 12.7052C18.5196 12.8927 18.2652 12.998 18 12.998Z" fill="white"/>
                  </svg>
                  <p>さらに表示</p>
                </button>
              </div>
            )}
          </div>
        </div>
      </section>
      <section class="form-container">
        <div class="inner">
          <h3 class="form-container_title">お問い合わせ</h3>
          <p class="form-container_desc">お問い合わせのテキストを入力してください。</p>
          <form class="form">
            <div class="form-body">
              <div class="form-body_input-wrapper">
                <label for="corp_name">会社名</label>
                <input type="text" name="corp_name" placeholder="◯◯株式会社△△部">
              </div>
              <div class="form-body_input-wrapper">
                <label for="name">ご氏名</label>
                <input type="text" name="name" placeholder="サイト 太郎">
              </div>
              <div class="form-body_input-wrapper">
                <label for="email">メールアドレス</label>
                <input type="email" name="email" placeholder="メールアドレス">
              </div>
              <fieldset id="optionFieldset">
                <p class="subject_label">ご用件</p>
                <div class="form-body_wrapper">
                  <input type="checkbox" name="3st_elem">
                  <label for="3st_elem">イベント出演の依頼</label>
                </div>
              </fieldset>
              <textarea class="form-body_wrapper_textarea"  name="otherRequest" rows="4" cols="50" placeholder="自由記入欄"></textarea>
            </div>
            <button class="form-body_btn">
              <p>送信</p>
            </button>
          </form>
        </div>
      </section>
    </div>
  </div>
</Layout>

<script is:inline>
  // スクリプトが既に実行されたかどうかを確認するフラグ
  if (!window._previewScriptInitialized) {
    window._previewScriptInitialized = true;
    
    document.addEventListener('DOMContentLoaded', function() {
      console.log('Preview script initializing...');
      
      // サイドバー要素を取得して非表示にする
      const aside = document.getElementById('aside');
      if (aside) {
        aside.style.display = 'none';
      }
      
      // メインコンテンツの幅を調整
      const main = document.getElementById('main');
      if (main) {
        main.style.width = '100%';
        main.style.maxWidth = '100%';
      }
      
      // 更新ボタンにイベントリスナーを追加
      const updateButton = document.querySelector('.preview_btn.update');
      if (updateButton) {
        updateButton.addEventListener('click', function() {
          // ページをリロード
          window.location.reload();
        });
      }
      
      // 閉じるボタンにイベントリスナーを追加
      const closeButton = document.querySelector('.preview_btn.close');
      if (closeButton) {
        closeButton.addEventListener('click', function() {
          // ウィンドウを閉じる
          window.close();
          
          // window.close()が動作しない場合のフォールバック
          if (window.opener) {
            window.close();
          } else {
            alert('ブラウザの制限により自動的に閉じることができません。このタブを手動で閉じてください。');
          }
        });
      }
      
      // お知らせアイテムのクリックイベント
      const setupNoticeItemEvents = (item) => {
        const openButton = item.querySelector('.notice_item_open');
        if (openButton) {
          openButton.addEventListener('click', function() {
            const noticeId = this.getAttribute('data-notice-id');
            if (noticeId) {
              // お知らせの詳細を表示する処理を実装
              console.log('お知らせID:', noticeId);
              alert('お知らせの詳細ページは準備中です。\nお知らせID: ' + noticeId);
            }
          });
        }
      };
      
      document.querySelectorAll('.notice_item').forEach(setupNoticeItemEvents);
      
      // ブログ記事のクリックイベント
      const setupBlogItemEvents = (item) => {
        item.addEventListener('click', function() {
          const blogId = this.getAttribute('data-blog-id');
          if (blogId) {
            // ブログ記事の詳細ページへ遷移
            console.log('ブログID:', blogId);
            alert('ブログ記事の詳細ページは準備中です。\nブログID: ' + blogId);
          }
        });
      };
      
      document.querySelectorAll('.blog_item').forEach(setupBlogItemEvents);
      
      // 日付フォーマット関数
      function formatDate(date) {
        return new Intl.DateTimeFormat('ja-JP', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit'
        }).format(date).replace(/\//g, '/');
      }
      
      // お知らせとブログに関する変数の初期化部分の修正
      let noticeDisplayed = document.querySelectorAll('.notice_list .notice_item').length || 0;
      let noticeOffset = noticeDisplayed; // 初期表示されている件数をオフセットに設定
      let previousNoticeItems = []; // 以前のアイテムを保存する配列

      let blogDisplayed = document.querySelectorAll('.blog_list .blog_item').length || 0;
      let blogOffset = blogDisplayed; // 初期表示されている件数をオフセットに設定
      let previousBlogItems = []; // 以前のアイテムを保存する配列
      
      // 初期状態を反映するために、サーバーサイドの値を取得
      const serverHasMoreNotices = document.getElementById('load-more-notices')?.parentElement ? true : false;
      const serverHasMoreBlogs = document.getElementById('load-more-blogs')?.parentElement ? true : false;

      // アイテムが存在するかを確認
      const hasNoticeItems = document.querySelector('.notice_list .notice_item') !== null;
      const hasBlogItems = document.querySelector('.blog_list .blog_item') !== null;

      // アイテムが存在し、サーバーがmore=trueの場合のみtrueに設定
      hasMoreNotices = hasNoticeItems && serverHasMoreNotices;
      hasMoreBlogs = hasBlogItems && (serverHasMoreBlogs || blogDisplayed >= 6); // 6はblogLimitと同じ値

      // ブログの「さらに表示」ボタンを強制的に表示（デバッグ用、問題が解決したら削除）
      const loadMoreBlogsContainer = document.getElementById('load-more-blogs')?.parentElement;
      if (hasBlogItems && !loadMoreBlogsContainer) {
        console.log('ブログの「さらに表示」ボタンが見つかりません。強制的に表示します。');
        
        // ブログセクションのview-actionsを取得
        const blogViewActions = document.querySelector('.blog_list').closest('.inner').querySelector('.view-actions');
        
        // 「さらに表示」ボタンを追加
        if (blogViewActions && !blogViewActions.querySelector('.view-more')) {
          const viewMoreDiv = document.createElement('div');
          viewMoreDiv.className = 'view-more';
          viewMoreDiv.innerHTML = `
            <button class="view-more_btn" id="load-more-blogs">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 12.998H13V17.998C13 18.2633 12.8946 18.5176 12.7071 18.7052C12.5196 18.8927 12.2652 18.998 12 18.998C11.7348 18.998 11.4804 18.8927 11.2929 18.7052C11.1054 18.5176 11 18.2633 11 17.998V12.998H6C5.73478 12.998 5.48043 12.8927 5.29289 12.7052C5.10536 12.5176 5 12.2633 5 11.998C5 11.7328 5.10536 11.4785 5.29289 11.2909C5.48043 11.1034 5.73478 10.998 6 10.998H11V5.99805C11 5.73283 11.1054 5.47848 11.2929 5.29094C11.4804 5.1034 11.7348 4.99805 12 4.99805C12.2652 4.99805 12.5196 5.1034 12.7071 5.29094C12.8946 5.47848 13 5.73283 13 5.99805V10.998H18C18.2652 10.998 18.5196 11.1034 18.7071 11.2909C18.8946 11.4785 19 11.7328 19 11.998C19 12.2633 18.8946 12.5176 18.7071 12.7052C18.5196 12.8927 18.2652 12.998 18 12.998Z" fill="white"/>
              </svg>
              <p>さらに表示</p>
            </button>
          `;
          blogViewActions.appendChild(viewMoreDiv);
          
          // 新しく追加した「さらに表示」ボタンにイベントリスナーを設定
          const newLoadMoreBlogs = document.getElementById('load-more-blogs');
          if (newLoadMoreBlogs) {
            // 以下のイベントリスナー設定を行う（既存のコードと同様）
            // ここでイベントリスナーを再設定
            newLoadMoreBlogs.addEventListener('click', function() {
              // 既存のクリックイベントハンドラーのコードをここに挿入
              console.log('動的に追加された「さらに表示」ボタンがクリックされました');
              // ... 残りのイベントハンドラーコード
            });
          }
        }
      }

      // まず初期状態をログ出力
      console.log('初期状態:', {
        noticeItems: document.querySelectorAll('.notice_list .notice_item').length,
        noticeOffset,
        blogItems: document.querySelectorAll('.blog_list .blog_item').length,
        blogOffset,
        hasMoreNotices,
        hasMoreBlogs,
        loadMoreBlogsExists: !!document.getElementById('load-more-blogs')
      });
      
      // 「表示を減らす」ボタンのイベント - お知らせ
      const loadMoreNotices = document.getElementById('load-more-notices');
      const showLessNotices = document.getElementById('show-less-notices');
      
      if (loadMoreNotices) {
        loadMoreNotices.addEventListener('click', function() {
          console.log('さらに表示クリック前 - お知らせ:', {
            noticeDisplayed,
            noticeOffset,
            previousNoticesLength: previousNoticeItems.length
          });
          
          // クリック時にボタンを無効化して連打を防止
          this.disabled = true;
          this.style.opacity = '0.5';
          
          const projectId = window.location.pathname.split('/')[2]; // URLからprojectIdを取得
          
          console.log('お知らせ追加取得開始:', { projectId, offset: noticeOffset });
          
          // リクエストデータの準備
          const data = {
            projectId: projectId,
            offset: noticeOffset, // 現在のオフセット（表示されている件数）
            limit: 6
          };
          
          // Fetch APIを使ってPOSTリクエストを送信
          fetch('/api/notices', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          })
          .then(response => {
            if (!response.ok) {
              // エラーレスポンスの詳細を取得して表示
              return response.text().then(text => {
                console.error('API エラーの詳細:', text);
                throw new Error(`APIエラー: ${response.status} - ${text}`);
              });
            }
            return response.json();
          })
          .then(data => {
            console.log('お知らせAPI応答:', data);
            
            // ボタンを再度有効化
            loadMoreNotices.disabled = false;
            loadMoreNotices.style.opacity = '1';
            
            if (data.items && data.items.length > 0) {
              const noticeList = document.querySelector('.notice_list');
              
              // 現在の表示アイテムを保存 (ディープコピーに変更)
              const currentItems = Array.from(noticeList.querySelectorAll('.notice_item')).map(item => item.cloneNode(true));
              previousNoticeItems.push(currentItems);
              
              // 追加前の表示件数を記録
              const beforeAddCount = noticeList.querySelectorAll('.notice_item').length;
              
              // 新しいアイテムをリストに追加（重複チェック付き）
              let addedCount = 0;
              data.items.forEach(notice => {
                // IDが既に表示中のアイテムと重複していないか確認
                const isDuplicate = Array.from(noticeList.querySelectorAll('.notice_item_open')).some(
                  el => el.getAttribute('data-notice-id') === notice.id
                );
                
                if (!isDuplicate) {
                  const li = document.createElement('li');
                  li.className = 'notice_item';
                  li.innerHTML = `
                    <div class="notice_item_info">
                      <p>
                        <span>${notice.tag || 'お知らせ'}</span>
                        <span class="slash"></span>
                        <span>${formatDate(new Date(notice.createdAt))}</span>
                      </p>
                      <h4 class="notice_item_title">
                        ${notice.title || 'タイトル未設定'}
                      </h4>
                    </div>
                    <div class="notice_item_btns">
                       <button class="notice_item_open" data-notice-id="${notice.id}">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <g clip-path="url(#clip0_623_115)">
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M10.4712 7.52879C10.5962 7.65381 10.6664 7.82334 10.6664 8.00012C10.6664 8.1769 10.5962 8.34644 10.4712 8.47145L6.6999 12.2428C6.63841 12.3065 6.56484 12.3572 6.48351 12.3922C6.40217 12.4271 6.31469 12.4455 6.22617 12.4463C6.13765 12.4471 6.04986 12.4302 5.96793 12.3967C5.886 12.3631 5.81157 12.3136 5.74897 12.251C5.68638 12.1885 5.63688 12.114 5.60336 12.0321C5.56983 11.9502 5.55297 11.8624 5.55374 11.7739C5.55451 11.6853 5.5729 11.5979 5.60784 11.5165C5.64277 11.4352 5.69356 11.3616 5.75724 11.3001L9.05724 8.00012L5.75724 4.70012C5.6358 4.57439 5.5686 4.40598 5.57012 4.23119C5.57164 4.05639 5.64175 3.88918 5.76536 3.76557C5.88896 3.64197 6.05617 3.57186 6.23097 3.57034C6.40577 3.56882 6.57417 3.63601 6.6999 3.75745L10.4712 7.52879Z" fill="white"/>
                          </g>
                          <defs>
                          <clipPath id="clip0_623_115">
                          <rect width="16" height="16" fill="white"/>
                          </clipPath>
                          </defs>
                        </svg>        
                      </button>
                    </div>
                  `;
                  noticeList.appendChild(li);
                  
                  // 新しく追加したアイテムにイベントリスナーを設定
                  setupNoticeItemEvents(li);
                  addedCount++;
                } else {
                  console.log(`スキップ: お知らせID ${notice.id} は既に表示中`);
                }
              });
              
              // 実際に追加された件数を確認
              const afterAddCount = noticeList.querySelectorAll('.notice_item').length;
              const actuallyAdded = afterAddCount - beforeAddCount;
              
              // オフセットと表示件数を更新（実際に追加された件数のみ）
              noticeOffset += actuallyAdded;
              noticeDisplayed = afterAddCount;
              
              console.log(`お知らせ: ${actuallyAdded}件追加（重複除外前: ${data.items.length}件）`);
              
              // hasMoreNotices状態を更新
              hasMoreNotices = data.hasMore;
              
              // 表示/非表示の状態を更新
              updateViewLessButtonVisibility();
              
              // これ以上アイテムがない場合は「さらに表示」ボタンを非表示にする
              if (!data.hasMore) {
                loadMoreNotices.parentElement.style.display = 'none';
              }
            } else {
              // これ以上アイテムがない場合
              loadMoreNotices.parentElement.style.display = 'none';
            }
            
            console.log('さらに表示クリック後 - お知らせ:', {
              noticeDisplayed,
              noticeOffset,
              previousNoticesLength: previousNoticeItems.length,
              現在表示数: document.querySelectorAll('.notice_list .notice_item').length
            });
          })
          .catch(error => {
            // エラー時もボタンを再度有効化
            loadMoreNotices.disabled = false;
            loadMoreNotices.style.opacity = '1';
            
            console.error('お知らせの追加取得に失敗:', error);
            alert('お知らせの追加取得に失敗しました。\n' + error.message);
          });
        });
      }
      
      // 「さらに表示」ボタンのイベント - ブログ
      const loadMoreBlogs = document.getElementById('load-more-blogs');
      const showLessBlogs = document.getElementById('show-less-blogs');
      
      if (loadMoreBlogs) {
        loadMoreBlogs.addEventListener('click', function() {
          console.log('さらに表示クリック前 - ブログ:', {
            blogDisplayed,
            blogOffset,
            previousBlogsLength: previousBlogItems.length
          });
          
          // クリック時にボタンを無効化して連打を防止
          this.disabled = true;
          this.style.opacity = '0.5';
          
          const projectId = window.location.pathname.split('/')[2]; // URLからprojectIdを取得
          
          console.log('ブログ追加取得開始:', { projectId, offset: blogOffset });
          
          // リクエストデータの準備
          const data = {
            projectId: projectId,
            offset: blogOffset,
            limit: 4
          };
          
          // Fetch APIを使ってPOSTリクエストを送信
          fetch('/api/blogs', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`APIエラー: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            console.log('ブログAPI応答詳細:', {
              取得件数: data.items?.length || 0,
              hasMore: data.hasMore,
              totalCount: data.totalCount,
              IDs: data.items?.map(i => i.id).join(', ')
            });
            
            // ボタンを再度有効化
            loadMoreBlogs.disabled = false;
            loadMoreBlogs.style.opacity = '1';
            
            if (data.items && data.items.length > 0) {
              const blogList = document.querySelector('.blog_list');
              
              // 現在の表示アイテムを保存 (ディープコピーに変更)
              const currentItems = Array.from(blogList.querySelectorAll('.blog_item')).map(item => item.cloneNode(true));
              previousBlogItems.push(currentItems);
              
              // 追加前の表示件数を記録
              const beforeAddCount = blogList.querySelectorAll('.blog_item').length;
              
              // 新しいアイテムをリストに追加（重複チェック付き）
              let addedCount = 0;
              data.items.forEach(blog => {
                // IDが既に表示中のアイテムと重複していないか確認
                const isDuplicate = Array.from(blogList.querySelectorAll('.blog_item')).some(
                  el => el.getAttribute('data-blog-id') === blog.id
                );
                
                if (!isDuplicate) {
                  const li = document.createElement('li');
                  li.className = 'blog_item';
                  li.setAttribute('data-blog-id', blog.id);
                  li.innerHTML = `
                    <img
                      src="${blog.imageUrl}"
                      alt="${blog.title}"
                    />
                    <p>
                      <span>
                      ${blog.tag}
                      </span>
                      <span class="slash"></span>
                      <span>${formatDate(new Date(blog.createdAt))}</span>
                    </p>
                    <h4>${blog.title}</h4>
                  `;
                  blogList.appendChild(li);
                  
                  // 新しく追加したアイテムにイベントリスナーを設定
                  setupBlogItemEvents(li);
                  addedCount++;
                } else {
                  console.log(`スキップ: ブログID ${blog.id} は既に表示中`);
                }
              });
              
              // 実際に追加された件数を確認
              const afterAddCount = blogList.querySelectorAll('.blog_item').length;
              const actuallyAdded = afterAddCount - beforeAddCount;
              
              // オフセットと表示件数を更新（実際に追加された件数のみ）
              blogOffset += actuallyAdded;
              blogDisplayed = afterAddCount;
              
              console.log(`ブログ: ${actuallyAdded}件追加（重複除外前: ${data.items.length}件）`);
              
              // hasMoreBlogs状態を更新
              hasMoreBlogs = data.hasMore;
              
              // 表示/非表示の状態を更新
              updateViewLessButtonVisibility();
              
              // これ以上アイテムがない場合は「さらに表示」ボタンを非表示にする
              if (!data.hasMore) {
                loadMoreBlogs.parentElement.style.display = 'none';
              }
            } else {
              // これ以上アイテムがない場合
              loadMoreBlogs.parentElement.style.display = 'none';
            }
            
            console.log('さらに表示クリック後 - ブログ:', {
              blogDisplayed,
              blogOffset,
              previousBlogsLength: previousBlogItems.length,
              現在表示数: document.querySelectorAll('.blog_list .blog_item').length
            });
          })
          .catch(error => {
            // エラー時もボタンを再度有効化
            loadMoreBlogs.disabled = false;
            loadMoreBlogs.style.opacity = '1';
            
            console.error('ブログの追加取得に失敗:', error);
            alert('ブログの追加取得に失敗しました。\n' + error.message);
          });
        });
      }
      
      // 「表示を減らす」ボタンのイベント - ブログ
      if (showLessBlogs) {
        showLessBlogs.addEventListener('click', function() {
          console.log('表示を減らすクリック前 - ブログ:', {
            blogDisplayed,
            blogOffset,
            previousBlogsLength: previousBlogItems.length,
            hasMoreBlogs
          });
          
          // クリック時にボタンを無効化して連打を防止
          this.disabled = true;
          this.style.opacity = '0.5';
          
          // 前回のアイテムがあるか確認
          if (previousBlogItems.length > 0) {
            const blogList = document.querySelector('.blog_list');
            
            // 現在の表示アイテム数を記録
            const currentDisplayCount = blogList.querySelectorAll('.blog_item').length;
            
            // 修正: 固定で3件削減するロジックに変更
            // 3件未満の場合は全て削除（その後に前回の状態を復元）
            const itemsToRemove = Math.min(3, currentDisplayCount);
            
            if (itemsToRemove > 0) {
              // 現在のリストの先頭から3件分を削除
              for (let i = 0; i < itemsToRemove; i++) {
                if (blogList.lastChild) {
                  blogList.removeChild(blogList.lastChild);
                }
              }
              
              // オフセットと表示件数を更新
              blogOffset = Math.max(blogOffset - itemsToRemove, 0);
              blogDisplayed = currentDisplayCount - itemsToRemove;
              
              console.log(`ブログ: ${itemsToRemove}件減らしました。現在${blogDisplayed}件表示中`);
              
              // 修正: 「さらに表示」ボタンを表示する
              if (loadMoreBlogs) {
                loadMoreBlogs.parentElement.style.display = 'block';
                hasMoreBlogs = true; // まだ表示すべきアイテムがある状態にする
              }
              
              // 表示数が6件以下になった場合は「表示を減らす」ボタンを非表示
              if (blogDisplayed <= 6) {
                const viewLessContainer = this.closest('.view-less');
                if (viewLessContainer) {
                  viewLessContainer.style.display = 'none';
                }
                
                // previousBlogItemsもクリア
                previousBlogItems = [];
              }
            }
          }
          
          // ボタンを再度有効化
          this.disabled = false;
          this.style.opacity = '1';
          
          console.log('表示を減らすクリック後 - ブログ:', {
            blogDisplayed,
            blogOffset,
            previousBlogsLength: previousBlogItems.length,
            hasMoreBlogs,
            loadMoreBlogsVisible: loadMoreBlogs?.parentElement?.style.display !== 'none',
            現在表示数: document.querySelectorAll('.blog_list .blog_item').length
          });
        });
      }
      
      // ここに「表示を減らす」ボタンの表示/非表示を切り替える関数を追加
      function updateViewLessButtonVisibility() {
        try {
          // お知らせの「表示を減らす」ボタンの表示/非表示を切り替える
          const viewLessNotices = document.getElementById('show-less-notices');
          if (viewLessNotices) {
            const viewLessContainer = viewLessNotices.closest('.view-less');
            if (viewLessContainer) {
              viewLessContainer.style.display = previousNoticeItems.length > 0 ? 'block' : 'none';
              console.log(`お知らせの「表示を減らす」ボタンを${previousNoticeItems.length > 0 ? '表示' : '非表示'}に設定`);
            }
          }
          
          // ブログの「表示を減らす」ボタンの表示/非表示を切り替える
          const viewLessBlogs = document.getElementById('show-less-blogs');
          if (viewLessBlogs) {
            const viewLessContainer = viewLessBlogs.closest('.view-less');
            if (viewLessContainer) {
              viewLessContainer.style.display = previousBlogItems.length > 0 ? 'block' : 'none';
              console.log(`ブログの「表示を減らす」ボタンを${previousBlogItems.length > 0 ? '表示' : '非表示'}に設定`);
            }
          }
        } catch (error) {
          console.error('表示/非表示の更新でエラーが発生しました:', error);
        }
      }
      
      // 「表示を減らす」ボタンのイベント - お知らせ
      if (showLessNotices) {
        showLessNotices.addEventListener('click', function() {
          console.log('表示を減らすクリック前 - お知らせ:', {
            noticeDisplayed,
            noticeOffset,
            previousNoticesLength: previousNoticeItems.length,
            hasMoreNotices
          });
          
          // クリック時にボタンを無効化して連打を防止
          this.disabled = true;
          this.style.opacity = '0.5';
          
          // 前回のアイテムがあるか確認
          if (previousNoticeItems.length > 0) {
            const noticeList = document.querySelector('.notice_list');
            
            // 現在の表示アイテム数を記録
            const currentDisplayCount = noticeList.querySelectorAll('.notice_item').length;
            
            // 現在のリストを一旦空にする
            while (noticeList.firstChild) {
              noticeList.removeChild(noticeList.firstChild);
            }
            
            // 前回のアイテムを復元
            const previousItems = previousNoticeItems.pop();
            previousItems.forEach(item => {
              noticeList.appendChild(item);
              
              // イベントリスナーを再設定
              setupNoticeItemEvents(item);
            });
            
            // 前回の表示アイテム数を取得
            const previousDisplayCount = noticeList.querySelectorAll('.notice_item').length;
            
            // 実際に減った件数を計算
            const reducedCount = currentDisplayCount - previousDisplayCount;
            
            // オフセットと表示件数を更新（実際に減った件数に基づく）
            noticeOffset = Math.max(noticeOffset - reducedCount, previousDisplayCount);
            noticeDisplayed = previousDisplayCount;
            
            console.log(`お知らせ: ${reducedCount}件減らしました。現在${previousDisplayCount}件表示中`);
            
            // 修正: 「さらに表示」ボタンを表示する
            if (loadMoreNotices) {
              // ここが重要: 元の状態に戻した時は、サーバー側から取得した初期値に基づいて表示/非表示を決定
              const shouldShowMoreButton = previousNoticeItems.length === 0 ? serverHasMoreNotices : hasMoreNotices;
              loadMoreNotices.parentElement.style.display = shouldShowMoreButton ? 'block' : 'none';
              console.log(`お知らせの「さらに表示」ボタンを${shouldShowMoreButton ? '表示' : '非表示'}に設定 (hasMoreNotices=${hasMoreNotices}, serverHasMoreNotices=${serverHasMoreNotices})`);
            }
            
            // 表示/非表示の状態を更新
            updateViewLessButtonVisibility();
          }
          
          // ボタンを再度有効化
          this.disabled = false;
          this.style.opacity = '1';
          
          console.log('表示を減らすクリック後 - お知らせ:', {
            noticeDisplayed,
            noticeOffset,
            previousNoticesLength: previousNoticeItems.length,
            hasMoreNotices,
            loadMoreNoticesVisible: loadMoreNotices?.parentElement?.style.display !== 'none',
            現在表示数: document.querySelectorAll('.notice_list .notice_item').length
          });
        });
      }
      
      // 初期表示時に「表示を減らす」ボタンの状態を設定
      updateViewLessButtonVisibility();
    });
  }
</script>

