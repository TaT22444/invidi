---
export const prerender = false;

import Layout from "../layouts/Layout.astro";
import { getFirebaseAdmin } from "../lib/firebase-admin";

// デバッグ情報
console.log("環境変数チェック:", {
  apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY?.substring(0, 5) + "...",
  projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
  hasPrivateKey: !!import.meta.env.FIREBASE_PRIVATE_KEY,
});

// Firebase Admin SDK 初期化 - エラーハンドリング強化
let adminAuth;
let db;
try {
  const { auth, db: firestore } = getFirebaseAdmin();
  adminAuth = auth;
  db = firestore;
} catch (error) {
  console.error("Firebase Admin initialization failed:", error);
}

// 認証チェックを一時的にスキップ（デバッグ用）
let authUser = { uid: "test-user", email: "test@example.com" };
let userData = null;

// 通常の認証コードをコメントアウト
/*
// Cookie から token を取得
let token = "";
try {
  const cookieHeader = Astro.request.headers.get("cookie") || "";
  const cookies = Object.fromEntries(
    cookieHeader.split("; ").filter(Boolean).map((c) => {
      const [key, ...v] = c.split("=");
      return [key, v.join("=")];
    })
  );
  token = cookies["token"] || "";
} catch (error) {
  console.error("Cookie parsing failed:", error);
}

// 認証チェック
let authUser = null;
let userData = null;

if (token && adminAuth) {
  try {
    const decodedToken = await adminAuth.verifyIdToken(token);
    authUser = decodedToken;
    
    // ユーザーデータ取得
    if (db) {
      const userDoc = await db.collection("users").doc(decodedToken.uid).get();
      if (userDoc.exists) {
        userData = userDoc.data();
      }
    }
  } catch (error) {
    console.error("Token verification failed:", error);
  }
}

// 未認証ユーザーをログインページにリダイレクト
if (!authUser) {
  return Astro.redirect("/login");
}
*/

// レイアウトにダミープロジェクトを渡す（デバッグ用）
const projects = [
  { id: "test-project", name: "テストプロジェクト" }
];
---

<Layout 
  title="インディビホーム" 
  accountName={authUser?.email || "ゲスト"} 
  projects={projects}
  userId={authUser?.uid}
>
  <div>
    <!-- ページ内容 -->
    <h1>テスト表示</h1>
    <p>このページが表示されれば設定は正常です</p>
  </div>
</Layout>

<style lang="scss">
  /* 以下、前回と同じく元のindex.astroのCSSに準拠する想定 */
  .auth_box{
    width: calc(100% - 48px);
    max-width: 800px;
    margin-inline: auto;
    margin-top: 64px;
    &.dis-none{
      display: none;
    }
    &_title{
      font-size: var(--font-size-xl);
      color: var(--main-font-color);
      font-weight: 500;
      padding-bottom: 16px;
      border-bottom: 1px solid var(--main-border-color);
    }
    &_change{
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 16px 16px;
      color: var(--main-font-color);
      font-size: var(--font-size-xs);
      border-radius: var(--border-radius-m);
      border: 1px solid var(--main-border-color);
      &.dis-none{
        display: none;
      }
      &_right{
        font-size: var(--font-size-xxs);
        color: var(--sub-font-color);
      }
    }
  }
  .form{
    margin-top: 40px;
    width: 100%;
    margin-inline: auto;
    display: flex;
    flex-direction: column;
    gap: 40px;
    &_wrapper{
      display: flex;
      flex-direction: column;
      gap: 8px;
    }
    &_label{
      font-size: var(--font-size-s);
      color: var(--sub-font-color);
    }
    &_input{
      margin-top: 16px;
      padding: 16px 16px;
      width: 100%;
      background-color: var(--item-bg-color);
      border-radius: var(--border-radius-m);
      border: 1px solid var(--main-border-color);
      font-size: var(--font-size-s);
      color: var(--main-font-color);
    }
    &_btn-wrapper{
      margin-top: 24px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 16px;
    }
    &_btn{
      padding: 16px 40px;
      background-color: var(--accent-bg-color);
      color: var(--main-font-color);
      font-size: var(--font-size-s);
      border-radius: var(--border-radius-m);
    }
  }
</style>

<script>
  // DOMContentLoadedを使用して、DOMが完全に読み込まれた後に実行
  document.addEventListener('DOMContentLoaded', () => {
    // 要素の存在確認
    const loginBox = document.getElementById("auth_box_login");
    const registerBox = document.getElementById("auth_box_register");
    const toRegisterBtn = document.getElementById("auth_box_change_to_register");
    const toLoginBtn = document.getElementById("auth_box_change_to_login");
    
    // 要素が存在しない場合は処理を中断
    if (!loginBox || !registerBox) {
      console.warn("Auth boxes not found");
      return;
    }

    // デフォルトのフォームモード
    const defaultFormMode = "login"; // サーバーサイドの値と一致させる
    const savedMode = localStorage.getItem("formMode") || defaultFormMode;
    localStorage.setItem("formMode", savedMode);

    // 表示切替関数
    function showLogin() {
      if (loginBox && registerBox) {
        loginBox.classList.remove("dis-none");
        registerBox.classList.add("dis-none");
      }
    }
    
    function showRegister() {
      if (loginBox && registerBox) {
        loginBox.classList.add("dis-none");
        registerBox.classList.remove("dis-none");
      }
    }

    // 初期表示
    if (savedMode === "register") {
      showRegister();
    } else {
      showLogin();
    }

    // 切り替えイベント
    if (toRegisterBtn) {
      toRegisterBtn.addEventListener("click", () => {
        localStorage.setItem("formMode", "register");
        showRegister();
      });
    }
    
    if (toLoginBtn) {
      toLoginBtn.addEventListener("click", () => {
        localStorage.setItem("formMode", "login");
        showLogin();
      });
    }
  });
</script>
