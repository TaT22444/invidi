---
export const prerender = false;

import Layout from "../layouts/Layout.astro";
import admin from "firebase-admin";

// ===========================
// Firebase Admin SDK 初期化
// ===========================
if (!admin.apps.length) {
  const serviceAccountStr =
    process.env.FIREBASE_SERVICE_ACCOUNT || import.meta.env.FIREBASE_SERVICE_ACCOUNT;
  console.log("Service Account:", serviceAccountStr);
  if (serviceAccountStr) {
    const serviceAccount = JSON.parse(serviceAccountStr);
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
    });
  } else {
    console.warn("No Firebase service account found.");
  }
}
const adminAuth = admin.auth();
const db = admin.firestore();

// ===========================
// Cookie から token を取得
// ===========================
const cookieHeader = Astro.request.headers.get("cookie") || "";
const cookies = Object.fromEntries(
  cookieHeader.split("; ").filter(Boolean).map((c) => {
    const [key, ...v] = c.split("=");
    return [key, v.join("=")];
  })
);
const token = cookies["token"] || "";

// ===========================
// エラー表示/フォーム切替用
// ===========================
let postError = "";
let defaultFormMode = "login";

// ===========================
// POSTメソッド時の処理
// ===========================
const method = Astro.request.method.toUpperCase();
if (method === "POST") {
  const formData = await Astro.request.formData();
  const action = formData.get("action")?.toString() || "";

  // ----------------------------------
  // ログアウト
  // ----------------------------------
  if (action === "logout") {
    return new Response(null, {
      status: 303,
      headers: {
        "Set-Cookie": `token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT`,
        Location: "/",
      },
    });
  }

  // ----------------------------------
  // ログイン
  // ----------------------------------
  if (action === "login") {
    const email = formData.get("email")?.toString() || "";
    const password = formData.get("password")?.toString() || "";
    const apiKey = import.meta.env.PUBLIC_FIREBASE_API_KEY;

    // Firebase Auth REST APIを使ってログイン
    const res = await fetch(
      `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${apiKey}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email,
          password,
          returnSecureToken: true,
        }),
      }
    );
    const data = await res.json();
    if (data.error) {
      console.error("[Login Error]", data.error);
      postError = "ログインに失敗しました";
    } else {
      // 成功 → Cookie設定 → /[userId] にリダイレクト
      const userId = data.localId; // FirebaseのUID
      return new Response(null, {
        status: 303,
        headers: {
          "Set-Cookie": `token=${data.idToken}; Path=/; HttpOnly`,
          Location: `/${userId}`,
        },
      });
    }
  }

  // ----------------------------------
  // 新規登録
  // ----------------------------------
  else if (action === "register") {
    const email = formData.get("email")?.toString() || "";
    const password = formData.get("password")?.toString() || "";
    const confirmPassword = formData.get("confirmPassword")?.toString() || "";
    const displayName = formData.get("displayName")?.toString() || "";

    if (password !== confirmPassword) {
      postError = "パスワードが一致しません";
      defaultFormMode = "register";
    } else {
      try {
        // 1. Admin SDKでユーザー作成
        const userRecord = await adminAuth.createUser({
          email,
          password,
          displayName,
        });
        // 2. Firestoreに初期データを書き込む
        await db.collection("users").doc(userRecord.uid).set({
          displayName,
          email,
          plan: "free",
          projects: [],
        });

        // 3. 作成したユーザーで即ログインするため、Firebase Auth REST APIを再度呼び出し
        const apiKey = import.meta.env.PUBLIC_FIREBASE_API_KEY;
        const signInRes = await fetch(
          `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${apiKey}`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              email,
              password,
              returnSecureToken: true,
            }),
          }
        );
        const signInData = await signInRes.json();
        if (signInData.error) {
          // もしログイン失敗ならエラー表示して終わる
          console.error("[Register->Login Error]", signInData.error);
          postError = "登録後の自動ログインに失敗しました";
        } else {
          // 4. 成功 → Cookie設定 → /[userId] にリダイレクト
          const userId = signInData.localId;
          return new Response(null, {
            status: 303,
            headers: {
              "Set-Cookie": `token=${signInData.idToken}; Path=/; HttpOnly`,
              Location: `/${userId}`,
            },
          });
        }
      } catch (err) {
        console.error("[Register Error]", err);
        postError = "登録に失敗しました";
      }
    }
  }
}

// ===========================
// ログイン状態を確認
// ===========================
let authUser = null;
if (token) {
  try {
    authUser = await adminAuth.verifyIdToken(token);
  } catch (err) {
    console.error("IDトークンの検証に失敗しました", err);
  }
}

// もしログイン済みなら /[userId] にリダイレクトしたい場合、ここでも判定して返すことも可能
// 例:
// if (authUser?.uid) {
//   return new Response(null, {
//     status: 303,
//     headers: { Location: `/${authUser.uid}` },
//   });
// }

// ★ userId は「authUser がいればその UID」、無ければ "" とする
const userId = authUser?.uid || "";

// Layout.astro に渡す accountName は、単純に「ログイン or ログアウト」などラベル代わり
const accountName = authUser ? "ログアウト" : "ログイン";
---

<Layout title="App Title" userId={userId} accountName={accountName}>
  {postError && <p style="color:red;">{postError}</p>}

  {/* ログインしていない場合 → ログイン/新規登録フォーム */}
  {!authUser && (
    <>
      <div class="auth_box" id="auth_box_login">
        <h2 class="auth_box_title">ログイン</h2>
        <form class="form" method="POST">
          <input type="hidden" name="action" value="login" />
          <div class="form_wrapper">
            <label class="form_label" for="email">メールアドレス</label>
            <input
              class="form_input"
              placeholder="メールアドレス"
              type="email"
              name="email"
              required
            />
          </div>
          <div class="form_wrapper">
            <label class="form_label" for="password">パスワード</label>
            <input
              class="form_input"
              placeholder="半角英数字8文字以上"
              type="password"
              name="password"
              required
            />
          </div>
          <div class="form_btn-wrapper">
            <button class="form_btn" type="submit">ログイン</button>
            <button
              class="auth_box_change"
              id="auth_box_change_to_register"
              type="button"
            >
              <span>新規登録</span>
              <span class="auth_box_change_right">
                アカウントをお持ちでない方
              </span>
            </button>
          </div>
        </form>
      </div>

      <div class="auth_box dis-none" id="auth_box_register">
        <h2 class="auth_box_title">新規登録</h2>
        <form class="form" method="POST">
          <input type="hidden" name="action" value="register" />
          <div class="form_wrapper">
            <label class="form_label" for="displayName">アカウント名</label>
            <input
              class="form_input"
              placeholder="もち"
              type="text"
              name="displayName"
              required
            />
          </div>
          <div class="form_wrapper">
            <label class="form_label" for="email">メールアドレス</label>
            <input
              class="form_input"
              placeholder="メールアドレス"
              type="email"
              name="email"
              required
            />
          </div>
          <div class="form_wrapper">
            <label class="form_label" for="password">パスワード</label>
            <input
              class="form_input"
              placeholder="半角英数字8文字以上"
              type="password"
              name="password"
              required
            />
          </div>
          <div class="form_wrapper">
            <label class="form_label" for="confirmPassword">
              パスワード(確認用)
            </label>
            <input
              class="form_input"
              placeholder="半角英数字8文字以上"
              type="password"
              name="confirmPassword"
              required
            />
          </div>
          <div class="form_btn-wrapper">
            <button class="form_btn" type="submit">新規登録</button>
            <button
              class="auth_box_change"
              id="auth_box_change_to_login"
              type="button"
            >
              <span>ログイン</span>
              <span class="auth_box_change_right">
                アカウントをお持ちの方
              </span>
            </button>
          </div>
        </form>
      </div>
    </>
  )}

  {/* ログイン中の場合 → ログアウトボタンのみ */}
  {authUser && (
    <form method="POST">
      <input type="hidden" name="action" value="logout" />
      <button type="submit">ログアウト</button>
    </form>
  )}
</Layout>

<style lang="scss">
  /* 以下、前回と同じく元のindex.astroのCSSに準拠する想定 */
  .auth_box{
    width: calc(100% - 48px);
    max-width: 800px;
    margin-inline: auto;
    margin-top: 64px;
    &.dis-none{
      display: none;
    }
    &_title{
      font-size: var(--font-size-xl);
      color: var(--main-font-color);
      font-weight: 500;
      padding-bottom: 16px;
      border-bottom: 1px solid var(--main-border-color);
    }
    &_change{
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 16px 16px;
      color: var(--main-font-color);
      font-size: var(--font-size-xs);
      border-radius: var(--border-radius-m);
      border: 1px solid var(--main-border-color);
      &.dis-none{
        display: none;
      }
      &_right{
        font-size: var(--font-size-xxs);
        color: var(--sub-font-color);
      }
    }
  }
  .form{
    margin-top: 40px;
    width: 100%;
    margin-inline: auto;
    display: flex;
    flex-direction: column;
    gap: 40px;
    &_wrapper{
      display: flex;
      flex-direction: column;
      gap: 8px;
    }
    &_label{
      font-size: var(--font-size-s);
      color: var(--sub-font-color);
    }
    &_input{
      margin-top: 16px;
      padding: 16px 16px;
      width: 100%;
      background-color: var(--item-bg-color);
      border-radius: var(--border-radius-m);
      border: 1px solid var(--main-border-color);
      font-size: var(--font-size-s);
      color: var(--main-font-color);
    }
    &_btn-wrapper{
      margin-top: 24px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 16px;
    }
    &_btn{
      padding: 16px 40px;
      background-color: var(--accent-bg-color);
      color: var(--main-font-color);
      font-size: var(--font-size-s);
      border-radius: var(--border-radius-m);
    }
  }
</style>

<script>
  // 「ログイン」or「新規登録」フォーム切替
  const loginBox = document.getElementById("auth_box_login");
  const registerBox = document.getElementById("auth_box_register");
  const toRegisterBtn = document.getElementById("auth_box_change_to_register");
  const toLoginBtn = document.getElementById("auth_box_change_to_login");

  let defaultFormMode = "{defaultFormMode}";
  const savedMode = localStorage.getItem("formMode") || defaultFormMode;
  localStorage.setItem("formMode", savedMode);

  function showLogin() {
    loginBox.classList.remove("dis-none");
    registerBox.classList.add("dis-none");
  }
  function showRegister() {
    loginBox.classList.add("dis-none");
    registerBox.classList.remove("dis-none");
  }

  // 初期表示
  if (savedMode === "register") {
    showRegister();
  } else {
    showLogin();
  }

  // 切り替えイベント
  if (toRegisterBtn) {
    toRegisterBtn.addEventListener("click", () => {
      localStorage.setItem("formMode", "register");
      showRegister();
    });
  }
  if (toLoginBtn) {
    toLoginBtn.addEventListener("click", () => {
      localStorage.setItem("formMode", "login");
      showLogin();
    });
  }
</script>
