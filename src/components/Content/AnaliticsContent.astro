---
export const prerender = false;
import "../../styles/cms.css"
// ◆ Layout およびチャートコンポーネントをインポート
import Layout from "../../layouts/Layout.astro";
import MyLineChart from "../../components/MyLineChart.jsx";
import PerformanceChart from "../../components/PerformanceChart.jsx";
import ProjectNav from "../../components/ProjectNav.astro";

// ◆ 最適化: リファクタリング後のコンポーネントをインポート
import AnalyticsNav from "../../components/analytics/AnalyticsNav.astro";
import PeriodSelector from "../../components/analytics/PeriodSelector.astro";
import StatsSummary from "../../components/analytics/StatsSummary.astro";
import PerformanceMetrics from "../../components/analytics/PerformanceMetrics.astro";

// ◆ 最適化: サービスレイヤーのインポート
import { getUserFromRequest } from '../../services/authService';
import { getProjectData } from '../../services/projectService';
import { getProjectStatistics, getProjectStatisticsSummary } from '../../services/analyticsService';

// ◆ 最適化: パラメータを取得
const { projectId } = Astro.params;
if (!projectId) {
  return new Response("プロジェクトIDが指定されていません", { status: 400 });
}

// ◆ 最適化: 認証ユーザー情報の取得をserviceに委任
const { user, error: authError } = await getUserFromRequest(Astro.request);

// 認証エラーはリダイレクト
if (authError || !user) {
  console.error("認証されていないユーザーです");
  return new Response(null, {
    status: 303,
    headers: { Location: "/" },
  });
}

// ◆ 最適化: プロジェクトデータの取得をserviceに委任
const { project, error: projectError } = await getProjectData(projectId, user.uid);

// プロジェクトが見つからない場合やアクセス権がない場合はリダイレクト
if (projectError || !project) {
  console.error("該当のプロジェクトが見つかりません、またはアクセス権限がありません");
  return new Response(null, {
    status: 303,
    headers: { Location: "/" },
  });
}

// ◆ 最適化: 統計サマリーデータの取得をserviceに委任
const totalStats = await getProjectStatisticsSummary(projectId);

// ◆ 最適化: デフォルト期間の統計データを取得
const analyticsData = await getProjectStatistics(projectId, '1w');

// ◆ 最適化: グラフ設定を動的に生成
const graphConfig = {
  maxDisplayCount: Math.ceil(Math.max(...analyticsData.chartData.displayData) * 1.2 / 10) * 10,
  maxClickCount: Math.ceil(Math.max(...analyticsData.chartData.clickData) * 1.2 / 10) * 10,
  maxCtrPercent: 100, // CTRは固定で100%
  colors: {
    display: '#468FDD',
    click: '#4CAF50',
    ctr: '#FFA726'
  }
};

// ◆ 最適化: グラフの表示状態の初期値を設定
const initialGraphState = {
  showDisplay: true,
  showClick: true,
  showCtr: true
};

// ◆ Layout.astro に渡すためのaccountNameを設定
const accountName = user.displayName || "ログイン";
---

<div class="pan">
  <p class="pan_item">
    <a href={user.uid ? `/${user.uid}` : "/"}>トップ</a>
    <span>
      <svg width="7" height="7" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M0.456 6.356V5.18L3.156 4.208L4.98 3.548V3.5L3.156 2.828L0.456 1.856V0.692L6.384 2.996V4.04L0.456 6.356Z" fill="#C4C4C4"/>
      </svg>          
    </span>
    <span>{project.name || "(No Name)"}</span>
    <span>
      <svg width="7" height="7" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M0.456 6.356V5.18L3.156 4.208L4.98 3.548V3.5L3.156 2.828L0.456 1.856V0.692L6.384 2.996V4.04L0.456 6.356Z" fill="#C4C4C4"/>
      </svg>          
    </span>
    <span>アナリティクス</span>
  </p>
</div>

<ProjectNav projectId={projectId} activeTab="analytics" />

<section class="ana-box">
  <div class="inner">
    <!-- AnalyticsNavコンポーネント -->
    <AnalyticsNav projectId={projectId} activeTab="search-performance" />
    
    <!-- StatsSummaryコンポーネント - データ属性を追加してJavaScriptから参照できるようにする -->
    <StatsSummary 
      displayCount={totalStats.displayCount} 
      clickCount={totalStats.clickCount} 
      ctr={totalStats.ctr} 
      id="search-performance-stats"
    />
    
    <!-- データを隠し要素として保持 -->
    <div class="hidden-data">
      <span id="search-performance-display" data-value={totalStats.displayCount}></span>
      <span id="search-performance-click" data-value={totalStats.clickCount}></span>
      <span id="search-performance-ctr" data-value={totalStats.ctr}></span>
      
      <span id="users-display" data-value="135"></span>
      <span id="users-click" data-value="42"></span>
      <span id="users-ctr" data-value="31.1"></span>
      
      <span id="blog-display" data-value="87"></span>
      <span id="blog-click" data-value="28"></span>
      <span id="blog-ctr" data-value="32.2"></span>
      
      <span id="ranking-display" data-value="0"></span>
      <span id="ranking-click" data-value="0"></span>
      <span id="ranking-ctr" data-value="0"></span>
    </div>
    
    <PeriodSelector activePeriod="1w" />
  </div>
</section>

<!-- 各タブコンテンツを「tab-switch」クラスで管理し、初期状態を設定 -->
<div class="container">
<!-- 検索パフォーマンスタブ -->
  <div class="tab-switch" id="search-performance" style="display: block;">
  <section class="contents">
    <div class="section_title_wrapper">
      <h3 class="section_title">サイト全体</h3>
      <p class="section_period">{analyticsData.periodLabel}</p>
    </div>
    <div class="box">
      <div class="inner">
        <PerformanceMetrics 
          labels={analyticsData.chartData.labels}
          displayData={analyticsData.chartData.displayData}
          clickData={analyticsData.chartData.clickData}
          ctrData={analyticsData.chartData.ctrData}
          period="1w"
        />
      </div>
    </div>
  </section>
    <!-- 残りの検索パフォーマンスコンテンツ -->
</div>

  <!-- ユーザータブ - 初期状態は非表示 -->
  <div class="tab-switch" id="users" style="display: none;">
  <section class="contents">
    <div class="section_title_wrapper">
      <h3 class="section_title">ユーザー統計</h3>
      <p class="section_period">{analyticsData.periodLabel}</p>
    </div>
    <div class="box">
      <div class="inner">
        <div class="wrapper">
          <p class="graph_desc">ユニークユーザー数</p>
          <p class="graph_value">135</p>
        </div>
        <MyLineChart
          client:load
          dataLabel="ユーザー数"
          labels={analyticsData.chartData.labels}
          dataPoints={analyticsData.chartData.displayData}
          borderColor="#468FDD"
            period={"1w"}
        />
      </div>
    </div>
  </section>
</div>

  <!-- ブログタブ - 初期状態は非表示 -->
  <div class="tab-switch" id="blog" style="display: none;">
  <section class="contents">
    <div class="section_title_wrapper">
      <h3 class="section_title">ブログ統計</h3>
      <p class="section_period">{analyticsData.periodLabel}</p>
    </div>
    <div class="box">
      <div class="inner">
        <div class="wrapper">
          <p class="graph_desc">記事別アクセス数</p>
          <p class="graph_value">87</p>
        </div>
        <MyLineChart
          client:load
          dataLabel="閲覧数"
          labels={analyticsData.chartData.labels}
          dataPoints={analyticsData.chartData.displayData}
          borderColor="#468FDD"
            period={"1w"}
        />
      </div>
    </div>
  </section>
</div>

  <!-- 検索ランキングタブ - 初期状態は非表示 -->
  <div class="tab-switch" id="search-ranking" style="display: none;">
  <section class="contents">
    <div class="section_title_wrapper">
      <h3 class="section_title">検索キーワードランキング</h3>
      <p class="section_period">{analyticsData.periodLabel}</p>
    </div>
    <div class="box">
      <div class="inner">
        <p>まだデータがありません</p>
      </div>
    </div>
  </section>
  </div>
</div>

<style lang="scss">
  .pan{
    margin-top: 8px;
    
    &_item{
      display: flex;
      gap: 8px;
      color: var(--sub-font-color);
      font-size: var(--font-size-xs);
      font-weight: 300;

      >a{
        color: var(--main-font-color);
      }
    }
  }

  .nav{
    position: relative;
    margin-top: 16px;
    width: 100%;
    overflow: hidden;
    border-radius: var(--border-radius-m);
    background-color: var(--sub-bg-color);
    border: 1px solid var(--main-border-color);

    &_btn{
      position: absolute;
      right: 0;
      height: 100%;
      padding: 0 8px;
      background-color: var(--sub-bg-color);
      border-left: 1px solid var(--main-border-color);
      z-index: 10;
    }

    &_list{
      width: 100%;
      display: flex;
      flex-wrap: nowrap;
      gap: 8px;
      align-items: center;
      padding-inline: 24px;
      overflow-x: auto;
    }

    &_item{
      >.active{
        color: var(--main-font-color);
        border-bottom: 1px solid var(--accent-bg-color);
      }
    }

    &_link{
      position: relative;
      padding: 16px 40px;
      text-wrap: nowrap;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--sub-font-color);
      font-size: var(--font-size-xs);
      font-weight: 400;
      transition: all .2s;

      &:hover{
        color: var(--main-font-color);
        transition: all .2s;

        &::after{
          content: "";
          position: absolute;
          bottom: 0;
          height: 1px;
          background-color: var(--accent-bg-color);
          animation: nav_border .2s forwards;

          @keyframes nav_border {
            0%{
              width: 0;
            }
            100%{
              width: 100%;
            }
          }
        }
      }
    }
  }

  .tabs{

    &_list{
      display: flex;
      gap: 8px;
      align-items: center;
    }
    &_item{
    }
    &_btn{
      padding: 12px 16px;
      border-radius: var(--border-radius-s);
      font-size: var(--font-size-xxs);
      font-weight: 400;
      color: var(--sub-font-color);
      
      &.active{
        background-color: var(--btn-bg-color);
        border: 1px solid var(--main-border-color);
        color: var(--main-font-color);
      }
    }
  }

  .ana-box{
    width: 100%;
    margin-top: 16px;
    background-color: var(--sub-bg-color);
    border: 1px solid var(--main-border-color);
    border-radius: var(--border-radius-m);

    >.inner{
      padding: 16px 24px;
    }
  }

  .tab_box{
    margin-top: 32px;

    &_title{
      font-size: var(--font-size-l);
      font-weight: 500;
      color: var(--main-font-color);
    }

    &_desc{
      font-size: var(--font-size-xs);
      font-weight: 400;
      color: var(--sub-font-color);
      margin-top: 8px;
    }

    &_cards{
      margin-top: 24px;
      padding-bottom: 24px;
      display: flex;
      gap: 16px;
      border-bottom: 1px solid var(--main-border-color);
    }

    &_card{
      padding: 16px;
      border-radius: var(--border-radius-m);
      background-color: var(--item-bg-color);
      border: 1px solid var(--main-border-color);

      >p{
        display: flex;
        align-items: center;
        gap: 8px; 
      }

      &_label{
        font-size: var(--font-size-xxs);
        color: var(--sub-font-color);
      }

      &_value{
        font-size: var(--font-size-m);
        color: var(--main-font-color);
      }
    }
  }

  .tab_options{
    margin-top: 24px;
    display: flex;
    align-items: center;
    gap: 8px; 
  }
  .tab_option{
    padding: 8px 12px;
    border-radius: var(--border-radius-m);
    font-size: var(--font-size-xxs);
    color: var(--sub-font-color);

    &.active{
      color: var(--main-font-color);
      background-color: var(--btn-bg-color);
      border: 1px solid var(--main-border-color);
    }

    &_add{
      display: flex;
      align-items: center;
      gap: 4px;
      padding: 8px 12px;
      border-radius: var(--border-radius-m);
      font-size: var(--font-size-xxs);

      &_label{
        font-size: var(--font-size-xxs);
        color: var(--main-font-color);
      }
    }
  }

  .box{
    background-color: var(--sub-bg-color);
    border: 1px solid var(--main-border-color);
    border-radius: var(--border-radius-m);
    margin-top: 16px;
    margin-inline: auto;

    &:first-of-type{
      margin-top: 16px;
    }

    >.inner{
      padding: 16px;
    }
  }

  .wrapper{
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 16px;
    }

    .graph_desc{
        font-size: var(--font-size-xxs);
        color: var(--sub-font-color);
        padding-right: 8px;
        border-right: 1px solid var(--sub-border-color);
      }

      .graph_value{
        font-size: var(--font-size-xs);
        font-weight: 500;
        color: var(--main-font-color);
      }

  .contents{
    width: calc(100% - 32px);
    margin-inline: 16px;
    margin-top: 40px;

    .section_title_wrapper{
      display: flex;
      align-items: center;
      gap: 16px;
    }
    .section_title{
      font-size: var(--font-size-m);
      color: var(--main-font-color);
    }

    .section_period{
      font-size: var(--font-size-xxs);
      color: var(--sub-font-color);
    }
  }

  /* タブコンテンツ用のスタイルを追加 */
  .tab-content {
    display: none;
    
    &.active {
      display: block;
    }
  }

  .performance-metrics {
    display: flex;
    align-items: center;
    gap: 16px;
  }
  
  .metric {
    display: flex;
    align-items: center;
    gap: 4px;
  }
  
  .metric-indicator {
    width: 12px;
    height: 12px;
    border-radius: 2px;
    display: inline-block;
  }
  
  .metric-label {
    font-size: var(--font-size-xxs);
    color: var(--sub-font-color);
  }
  
  .metric-value {
    font-size: var(--font-size-xs);
    font-weight: 500;
  }
  
  .display-value {
    color: #468FDD;
  }
  
  .click-value {
    color: #4CAF50;
  }
  
  .ctr-value {
    color: #FFA726;
  }
  
  .display-color {
    background-color: #468FDD;
  }
  
  .click-color {
    background-color: #4CAF50;
  }
  
  .ctr-color {
    background-color: #FFA726;
  }

  .metric-toggle {
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .metric-checkbox {
    display: none;
  }

  .metric-checkbox:not(:checked) + .metric-indicator {
    opacity: 0.3;
  }

  .performance-chart {
    width: 100%;
    position: relative;
  }

  /* チェックボックスがオフの時のスタイル */
  .metric-checkbox:not(:checked) ~ .metric-value {
    opacity: 0.3;
  }

  .page-metrics {
    width: 100%;
    overflow-x: auto;
  }

  .metrics-table {
    width: 100%;
    border-collapse: collapse;

    tr{
      padding-inline: 16px;
    }
    
    th, td {
      padding: 16px 0;
      text-align: left;
    }

    th {
      font-size: var(--font-size-xs);
      font-weight: 400;
      color: var(--sub-font-color);
      border-bottom: 1px solid var(--main-border-color);
    }

    td{
      border-bottom: 1px solid var(--sub-border-color);
    }

    .path-column {
      width: 60%;
    }

    .metric-column {
      width: 13.33%;
      text-align: right;
    }

    .path-cell {
      font-size: var(--font-size-xs);
      color: var(--main-font-color);
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 0;
    }

    .metric-cell {
      font-size: var(--font-size-xs);
      color: var(--main-font-color);
      text-align: right;
    }

    tbody tr:hover {
      background-color: var(--hover-bg-color);
    }
  }

  /* 隠しデータ要素用のスタイルを追加 */
  .hidden-data {
    display: none;
  }
  
  /* タブ切り替え用のスタイルを明確化 */
  .tab-switch {
    width: 100%;
    margin-inline: auto;
    transition: opacity 0.2s;
  }

  /* 追加: ローディングインジケーター用のスタイル */
  .loading-indicator {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.7);
    z-index: 10;
    justify-content: center;
    align-items: center;
  }
  
  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid var(--sub-border-color);
    border-top: 4px solid var(--accent-bg-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  /* コンテンツボックスの位置を相対指定にして、ローディングインジケーターの位置基準にする */
  .box {
    position: relative;
  }

  .contents{
    padding-top: 0;
    border-top: none;
  }
</style>
<!-- 既存のスクリプトを修正 -->
<script>
// 型定義を追加して型エラーを回避
interface ChartData {
  labels: string[];
  displayData: number[];
  clickData: number[];
  ctrData: number[];
}

interface AnalyticsDataByPeriod {
  [period: string]: {
    chartData: ChartData;
    periodLabel: string;
  };
}

// サンプルのデータセット（実際のアプリでは、APIから取得するか、ページ読み込み時に全期間のデータをhiddenタグに格納しておく）
const sampleDataByPeriod: AnalyticsDataByPeriod = {
  '1d': {
    chartData: {
      labels: ['00時', '03時', '06時', '09時', '12時', '15時', '18時', '21時'],
      displayData: [42, 28, 15, 38, 75, 98, 84, 62],
      clickData: [8, 5, 2, 9, 18, 24, 19, 14],
      ctrData: [19.0, 17.9, 13.3, 23.7, 24.0, 24.5, 22.6, 22.6]
    },
    periodLabel: '過去24時間'
  },
  '1w': {
    chartData: {
      labels: generateDateLabels(7),
      displayData: [185, 195, 167, 210, 254, 268, 291],
      clickData: [42, 38, 35, 45, 59, 72, 76],
      ctrData: [22.7, 19.5, 21.0, 21.4, 23.2, 26.9, 26.1]
    },
    periodLabel: '過去1週間'
  },
  '1m': {
    chartData: {
      labels: generateDateLabels(30),
      displayData: generateDailyData(30, 150, 350),
      clickData: generateDailyData(30, 30, 80),
      ctrData: generateCtrData(30, 18, 28)
    },
    periodLabel: '過去1ヶ月'
  },
  '3m': {
    chartData: {
      labels: generateDateLabels(90),
      displayData: generateDailyData(90, 100, 450, 15),
      clickData: generateDailyData(90, 25, 110, 15),
      ctrData: generateCtrData(90, 15, 32)
    },
    periodLabel: '過去3ヶ月'
  }
};

// 日付ラベルを生成する関数
function generateDateLabels(days: number): string[] {
  const result = [];
  const today = new Date();
  
  for (let i = days - 1; i >= 0; i--) {
    const date = new Date();
    date.setDate(today.getDate() - i);
    const month = date.getMonth() + 1;
    const day = date.getDate();
    result.push(`${month}/${day}`);
  }
  
  return result;
}

// 日別データを生成する関数（トレンドを持つランダムデータ）
function generateDailyData(days: number, min: number, max: number, trendFactor: number = 10): number[] {
  const data = [];
  let value = min + Math.floor(Math.random() * (max - min) / 3);
  
  // トレンドの方向（上昇・下降・横ばい）
  let trend = Math.random() < 0.6 ? 1 : -1; // 60%の確率で上昇トレンド
  let trendDuration = Math.floor(Math.random() * 7) + 3; // トレンドが続く期間
  
  for (let i = 0; i < days; i++) {
    // トレンドの切り替え
    if (trendDuration <= 0) {
      trend = Math.random() < 0.5 ? 1 : -1;
      trendDuration = Math.floor(Math.random() * 7) + 3;
    }
    
    // 値にランダムな変動を加える（トレンドの方向に沿って）
    const randomFactor = Math.random() * trendFactor;
    const change = trend * randomFactor + (Math.random() - 0.5) * trendFactor;
    value = Math.max(min, Math.min(max, value + change));
    
    // 週末効果：金土は少し高め
    const dayOfWeek = (i % 7);
    if (dayOfWeek === 5 || dayOfWeek === 6) {
      value = Math.min(max, value * 1.05);
    }
    // 月曜は少し低め
    else if (dayOfWeek === 0) {
      value = Math.max(min, value * 0.95);
    }
    
    data.push(Math.round(value));
    trendDuration--;
  }
  
  return data;
}

// CTRデータを生成する関数（より自然な変動を持たせる）
function generateCtrData(days: number, min: number, max: number): number[] {
  const data = [];
  let value = min + (max - min) / 2;
  
  for (let i = 0; i < days; i++) {
    // CTRは急激に変化しにくいので、小さな変動を加える
    const change = (Math.random() - 0.5) * 2;
    value = Math.max(min, Math.min(max, value + change));
    
    // 週末効果：週末は少しCTRが高い傾向
    const dayOfWeek = (i % 7);
    if (dayOfWeek === 5 || dayOfWeek === 6) {
      value = Math.min(max, value + 0.5);
    }
    
    // 小数点第1位までの値を保存
    data.push(Math.round(value * 10) / 10);
  }
  
  return data;
}

// グラフ更新ヘルパー関数
function updateChart(chartId: string, newData: any) {
  const chartElement = document.getElementById(chartId) as HTMLCanvasElement;
  if (!chartElement) return;
  
  // Chart.jsインスタンスにアクセス
  // @ts-ignore - Chart.jsの型定義を追加していないため
  const chartInstance = chartElement.__chartInstance;
  if (!chartInstance) return;
  
  // データを更新
  chartInstance.data.labels = newData.labels;
  chartInstance.data.datasets.forEach((dataset: any, index: number) => {
    if (index === 0) {
      dataset.data = newData.displayData;
    } else if (index === 1) {
      dataset.data = newData.clickData;
    } else if (index === 2) {
      dataset.data = newData.ctrData;
    }
  });
  
  // グラフを再描画
  chartInstance.update();
}

// 期間ラベル更新
function updatePeriodLabels(periodLabel: string) {
  const periodLabelElements = document.querySelectorAll('.section_period');
  periodLabelElements.forEach(element => {
    element.textContent = periodLabel;
  });
}

// ローディングインジケーター制御
function showLoading(containerId: string) {
  const container = document.getElementById(containerId);
  if (!container) return;
  
  // 既存のローディングインジケーターがあれば削除
  let loader = container.querySelector('.loading-indicator');
  if (!loader) {
    // なければ作成
    loader = document.createElement('div');
    loader.className = 'loading-indicator';
    const spinner = document.createElement('div');
    spinner.className = 'loading-spinner';
    loader.appendChild(spinner);
    container.appendChild(loader);
  }
  
  // 表示
  (loader as HTMLElement).style.display = 'flex';
}

function hideLoading(containerId: string) {
  const container = document.getElementById(containerId);
  if (!container) return;
  
  const loader = container.querySelector('.loading-indicator');
  if (loader) {
    (loader as HTMLElement).style.display = 'none';
  }
}

document.addEventListener('periodChange', async function(e: Event) {
  const customEvent = e as CustomEvent;
  if (!customEvent.detail) return;
  
  const { period, tabId } = customEvent.detail;
  console.log(`AnaliticsContent: 期間変更イベント - 期間: ${period}, タブ: ${tabId}`);
  
  // アクティブなタブのコンテナを特定
  const activeContainer = document.getElementById(tabId);
  if (!activeContainer) {
    console.warn(`Active container with id ${tabId} not found`);
    return;
  }
  
  // ローディング表示
  showLoading(tabId);
  
  try {
    // 実際のアプリではここでAPIリクエストを行う
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // 期間に応じたデータを取得
    const data = sampleDataByPeriod[period] || sampleDataByPeriod['1w'];
    console.log(`AnaliticsContent: ${period}のデータを取得`, data);
    
    // 全てのコンテナ内のMyLineChartコンポーネントの属性を更新
    const chartElements = document.querySelectorAll('[data-component="MyLineChart"]');
    chartElements.forEach(element => {
      if (element instanceof HTMLElement) {
        element.setAttribute('data-period', period);
      }
    });
    
    // 全てのコンテナ内のPerformanceChartコンポーネントの属性を更新
    const performanceChartElements = document.querySelectorAll('[data-component="PerformanceChart"]');
    performanceChartElements.forEach(element => {
      if (element instanceof HTMLElement) {
        element.setAttribute('data-period', period);
      }
    });
    
    // 各チャートの更新処理
    // Chart.jsベースの標準チャートを更新
    const canvasElements = activeContainer.querySelectorAll('canvas');
    canvasElements.forEach(canvas => {
      // 各キャンバスIDでチャートを更新
      if (canvas.id && !canvas.id.includes('hidden')) {
        console.log(`AnaliticsContent: チャート${canvas.id}を更新`);
        try {
          updateChart(canvas.id, {...data.chartData, period});
        } catch (updateError) {
          console.warn(`Failed to update chart ${canvas.id}:`, updateError);
        }
      }
    });
    
    // 期間ラベルを更新
    updatePeriodLabels(data.periodLabel);
    
  } catch (error) {
    console.error('データの更新に失敗しました:', error);
  } finally {
    // ローディング非表示
    hideLoading(tabId);
  }
});

// URLから期間パラメータを取得する関数
function getCurrentPeriod() {
  try {
    const url = new URL(window.location.href);
    return url.searchParams.get('period') || '1w';
  } catch (e) {
    return '1w';
  }
}

document.addEventListener('DOMContentLoaded', function() {
  console.log('Analytics content initialized');
  
  // 初期化処理: URLからパラメータを読み取り、期間とタブを設定
  function initFromUrl() {
    try {
      const url = new URL(window.location.href);
      const periodParam = url.searchParams.get('period') || '1w';
      const tabParam = url.searchParams.get('analytics-tab') || 'search-performance';
      
      console.log(`Initializing from URL - period: ${periodParam}, tab: ${tabParam}`);
      
      // タブを設定
      const tabButton = document.querySelector(`.tabs_btn[data-tab="${tabParam}"]`) as HTMLElement;
      if (tabButton && !tabButton.classList.contains('active')) {
        tabButton.click();
      } else {
        // タブが既にアクティブな場合は、期間設定だけを適用
        const periodButton = document.querySelector(`.tab_option[data-period="${periodParam}"]`) as HTMLElement;
        if (periodButton && !periodButton.classList.contains('active')) {
          periodButton.click();
        } else if (periodButton && periodButton.classList.contains('active')) {
          // 既にアクティブな場合でも、確実にイベントを発火して適切なデータを表示
          const activeTab = document.querySelector('.tabs_btn.active');
          const activeTabId = activeTab ? activeTab.getAttribute('data-tab') : 'search-performance';
          
          document.dispatchEvent(new CustomEvent('periodChange', {
            detail: {
              period: periodParam,
              tabId: activeTabId
            },
            bubbles: true
          }));
        }
      }
    } catch (error) {
      console.error('Failed to initialize from URL:', error);
    }
  }
  
  // 少し遅延させて初期化（React/Astroコンポーネントのロード完了を待つ）
  setTimeout(() => {
    initFromUrl();
  }, 300);
  
  // タブ切り替え後、選択中の期間情報を保持するためのリスナーを追加
  window.addEventListener('popstate', function(event) {
    if (event.state) {
      try {
        const { analyticsTab, period } = event.state;
        
        // タブ更新
        if (analyticsTab) {
          const tabButton = document.querySelector(`.tabs_btn[data-tab="${analyticsTab}"]`) as HTMLElement;
          if (tabButton) tabButton.click();
        }
        
        // 期間更新
        if (period) {
          const periodButton = document.querySelector(`.tab_option[data-period="${period}"]`) as HTMLElement;
          if (periodButton) periodButton.click();
        }
      } catch (e) {
        console.error('Failed to handle popstate:', e);
      }
    }
  });

  // メインページ内のタブ（サマリー、プロフィールなど）の切り替え処理
  const mainTabButtons = document.querySelectorAll('.main-tab-button'); // メインのタブボタン
  if (mainTabButtons.length > 0) {
    mainTabButtons.forEach(tab => {
      tab.addEventListener('click', function() {
        const tabId = this instanceof HTMLElement ? this.getAttribute('data-tab') : null;
        if (!tabId) return;
        
        console.log(`メインタブがクリックされました: ${tabId}`);
        
        // アクティブ状態を更新
        mainTabButtons.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
        
        // コンテンツ表示を切り替え
        const tabContents = document.querySelectorAll('.main-tab-content');
        tabContents.forEach(content => {
          if (content instanceof HTMLElement) {
            if (content.id === tabId) {
              content.style.display = 'block';
            } else {
              content.style.display = 'none';
            }
          }
        });
        
        // URLを更新 - 単純にtabパラメータのみを使用
        const url = new URL(window.location.href);
        
        // 他のパラメータを全て削除
        url.searchParams.forEach((value, key) => {
          if (key !== 'tab') {
            url.searchParams.delete(key);
          }
        });
        
        // タブパラメータを設定
        url.searchParams.set('tab', tabId);
        
        // 履歴更新
        window.history.pushState({ mainTab: tabId }, '', url.toString());
      });
    });
  }

  // URLからの初期化
  function initFromUrl() {
    try {
      const url = new URL(window.location.href);
      const tabParam = url.searchParams.get('tab') || 'summary';
      
      // メインタブの初期化
      const mainTabButton = document.querySelector(`.main-tab-button[data-tab="${tabParam}"]`);
      if (mainTabButton instanceof HTMLElement) {
        mainTabButton.click();
      } else {
        // デフォルトのサマリータブを表示
        const defaultTab = document.querySelector(`.main-tab-button[data-tab="summary"]`);
        if (defaultTab instanceof HTMLElement) {
          defaultTab.click();
        }
      }
    } catch (error) {
      console.error('Failed to initialize from URL:', error);
    }
  }
  
  // 遅延初期化
  setTimeout(initFromUrl, 100);
});
</script>

