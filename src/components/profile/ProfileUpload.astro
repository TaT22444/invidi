<!-- ---
interface Props {
  projectId: string;
  profileImageUrl?: string;
}

const { projectId, profileImageUrl } = Astro.props;
---

<div class="profile-section">
  <h3 class="section-title">プロフィール画像</h3>
  
  <div class="profile-upload">
    <div id="profile-preview" class="profile-preview" style={profileImageUrl ? `background-image: url('${profileImageUrl}')` : ''}>
      {!profileImageUrl && (
        <div class="upload-icon">
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M17 21V19C17 17.9391 16.5786 16.9217 15.8284 16.1716C15.0783 15.4214 14.0609 15 13 15H5C3.93913 15 2.92172 15.4214 2.17157 16.1716C1.42143 16.9217 1 17.9391 1 19V21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M9 11C11.2091 11 13 9.20914 13 7C13 4.79086 11.2091 3 9 3C6.79086 3 5 4.79086 5 7C5 9.20914 6.79086 11 9 11Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M23 21V19C22.9993 18.1137 22.7044 17.2528 22.1614 16.5523C21.6184 15.8519 20.8581 15.3516 20 15.13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M16 3.13C16.8604 3.35031 17.623 3.85071 18.1676 4.55232C18.7122 5.25392 19.0078 6.11683 19.0078 7.005C19.0078 7.89318 18.7122 8.75608 18.1676 9.45769C17.623 10.1593 16.8604 10.6597 16 10.88" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
      )}
    </div>
    
    <div class="profile-actions">
      <form id="profile-form" enctype="multipart/form-data">
        <input type="hidden" name="projectId" value={projectId}>
        <input type="file" id="profile-input" name="profile" class="file-input" accept="image/*">
        <div class="profile-buttons">
          <label for="profile-input" class="upload-btn">画像を選択</label>
          <button type="submit" id="profile-submit" class="submit-btn" disabled>アップロード</button>
        </div>
        <p class="help-text">推奨サイズ: 200 × 200px</p>
      </form>
    </div>
  </div>
</div>

<script define:vars={{ projectId }}>
document.addEventListener('DOMContentLoaded', () => {
  const profileForm = document.getElementById('profile-form');
  const profileInput = document.getElementById('profile-input');
  const profileSubmit = document.getElementById('profile-submit');
  const profilePreview = document.getElementById('profile-preview');
  
  if (profileInput && profileSubmit && profilePreview) {
    // 画像選択時のプレビュー表示
    profileInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      
      if (file) {
        // アップロードボタンを有効化
        profileSubmit.removeAttribute('disabled');
        
        // プレビュー表示
        const reader = new FileReader();
        reader.onload = (e) => {
          profilePreview.style.backgroundImage = `url('${e.target.result}')`;
          profilePreview.innerHTML = ''; // アイコンを非表示
        };
        reader.readAsDataURL(file);
      } else {
        // ファイルが選択されていなければボタンを無効化
        profileSubmit.setAttribute('disabled', 'disabled');
      }
    });
  }
  
  if (profileForm) {
    // フォーム送信処理
    profileForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(profileForm);
      
      try {
        const response = await fetch('/api/upload-profile', {
          method: 'POST',
          body: formData
        });
        
        if (!response.ok) {
          throw new Error('プロフィール画像のアップロードに失敗しました');
        }
        
        const data = await response.json();
        
        if (data.success) {
          // アップロード後にページをリロード
          window.location.reload();
        } else {
          alert(data.message || 'プロフィール画像のアップロードに失敗しました');
        }
      } catch (error) {
        console.error('プロフィールアップロードエラー:', error);
        alert('プロフィール画像のアップロードに失敗しました。再度お試しください。');
      }
    });
  }
});
</script>

<style>
.profile-section {
  margin-bottom: 24px;
}

.section-title {
  font-size: var(--font-size-m);
  margin-bottom: 16px;
  color: var(--main-font-color);
}

.profile-upload {
  background-color: var(--item-bg-color);
  border: 1px solid var(--main-border-color);
  border-radius: var(--border-radius-m);
  padding: 16px;
}

.profile-preview {
  width: 120px;
  height: 120px;
  background-color: var(--sub-bg-color);
  background-size: cover;
  background-position: center;
  border-radius: 50%;
  margin: 0 auto 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--sub-font-color);
}

.upload-icon {
  opacity: 0.6;
}

.profile-actions {
  display: flex;
  flex-direction: column;
}

.file-input {
  display: none;
}

.profile-buttons {
  display: flex;
  gap: 12px;
  margin-bottom: 8px;
  justify-content: center;
}

.upload-btn {
  display: inline-block;
  padding: 8px 16px;
  background-color: var(--btn-bg-color);
  color: var(--main-font-color);
  border-radius: var(--border-radius-m);
  cursor: pointer;
  font-size: var(--font-size-xs);
  text-align: center;
}

.submit-btn {
  padding: 8px 16px;
  background-color: var(--accent-bg-color);
  color: white;
  border-radius: var(--border-radius-m);
  font-size: var(--font-size-xs);
}

.submit-btn[disabled] {
  background-color: var(--disabled-bg-color);
  color: var(--disabled-font-color);
  cursor: not-allowed;
}

.help-text {
  font-size: var(--font-size-xs);
  color: var(--sub-font-color);
  margin-top: 8px;
  text-align: center;
}
</style>  -->