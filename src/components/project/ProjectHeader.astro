---
import { initializeFirebaseAdmin } from '../../lib/firebase-admin';
import type { CollectionReference } from 'firebase-admin/firestore';

export interface Props {
  project: any;
  projectId: string | undefined;
  activeTab?: string;
}

interface TabInfo {
  id: string;
  label: string;
  sectionId?: string;
}

const { projectId = '', activeTab = 'summary', project } = Astro.props;

// projectIdがundefinedの場合に備えてデフォルト値を設定
const safeProjectId = projectId || '';

// コレクションのラベルとタブ表示名のマッピング
interface CollectionLabels {
  [key: string]: string;
}

const collectionLabels: CollectionLabels = {
  blog: 'ブログ',
  notice: 'お知らせ',
  contact: 'お問い合わせ'
};

// プロジェクトのコレクション情報を取得
const { db } = await initializeFirebaseAdmin();
const projectRef = db.collection('projects').doc(safeProjectId);
const collections = await projectRef.listCollections();

// コレクション名を取得してタブを生成
const collectionTabs = collections.map((col: CollectionReference) => ({
  id: col.id,
  sectionId: `${col.id}-container`,
  label: collectionLabels[col.id] || col.id
}));

// 常に表示する固定タブを追加
const fixedTabs: TabInfo[] = [
  { id: 'summary', label: 'サマリー' }
];

// 固定タブとコレクションタブを結合
const allTabs = [...fixedTabs, ...collectionTabs];
---

<header class="preview_header">
  <div class="preview_header_title-wrapper">
    <h1 class="preview_header_title">{project?.name || "プロジェクト名未設定"}</h1>
    <button class="follow-btn">
      <span>フォロー</span>
    </button>
  </div>
  <nav class="preview_header_nav">
    <ul class="preview_header_nav_list">
      {allTabs.map(tab => (
        <li class="nav_item">
          {tab.id === 'summary' ? (
            <a
              href="?tab=summary"
              class={`nav_link ${activeTab === tab.id ? 'active' : ''}`}
            >
              {tab.label}
            </a>
          ) : (
            <a
              href={`?tab=preview#${tab.id}`}
              class={`nav_link ${activeTab === tab.id ? 'active' : ''}`}
              data-tab-id={tab.id}
            >
              {tab.label}
            </a>
          )}
        </li>
      ))}
    </ul>
  </nav>
</header>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const navLinks = document.querySelectorAll<HTMLAnchorElement>('a.nav_link:not([href="?tab=summary"])');
    const isPreviewMode = new URL(window.location.href).searchParams.get('tab') === 'preview';
    
    if (!isPreviewMode) return;

    navLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const tabId = this.dataset.tabId;
        if (!tabId) return;

        // アクティブクラスの切り替え
        document.querySelectorAll('.nav_link').forEach(link => {
          link.classList.remove('active');
        });
        this.classList.add('active');

        // URLを更新（ページ遷移なし）
        const newUrl = `?tab=preview#${tabId}`;
        window.history.pushState({}, '', newUrl);

        // 対応するセクションにスクロール
        const targetSection = document.querySelector(`.cms-container.${tabId}`);
        if (targetSection) {
          const header = document.querySelector<HTMLElement>('.preview_header');
          const headerHeight = header ? header.offsetHeight : 0;
          const sectionTop = targetSection.getBoundingClientRect().top + window.scrollY - headerHeight - 20;

          window.scrollTo({
            top: sectionTop,
            behavior: 'smooth'
          });
        }
      });
    });

    // ハッシュが存在する場合、初期スクロール
    if (window.location.hash) {
      const tabId = window.location.hash.substring(1);
      const targetSection = document.querySelector(`.cms-container.${tabId}`);
      if (targetSection) {
        const header = document.querySelector<HTMLElement>('.preview_header');
        const headerHeight = header ? header.offsetHeight : 0;
        const sectionTop = targetSection.getBoundingClientRect().top + window.scrollY - headerHeight - 20;

        window.scrollTo({
          top: sectionTop,
          behavior: 'smooth'
        });
      }
    }
  });
</script>

<style lang="scss">


  .nav {
    position: relative;
    margin-top: 16px;
    width: 100%;
    overflow: hidden;
    border-radius: var(--border-radius-m);
    background-color: var(--sub-bg-color);
    border: 1px solid var(--main-border-color);
  }

  .nav_btn {
    position: absolute;
    right: 0;
    height: 100%;
    padding: 0 8px;
    background-color: var(--sub-bg-color);
    border-left: 1px solid var(--main-border-color);
    z-index: 10;
  }

  .nav_list {
    width: 100%;
    display: flex;
    flex-wrap: nowrap;
    gap: 8px;
    align-items: center;
    padding-inline: 24px;
    overflow-x: auto;
  }

  .nav_item .active {
    color: var(--main-font-color);
    border-bottom: 1px solid var(--accent-bg-color);
  }

  .nav_link {
    position: relative;
    padding: 16px 24px;
    text-wrap: nowrap;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--sub-font-color);
    font-size: var(--font-size-xxs);
    font-weight: 400;
    transition: all .2s;
    background: none;
    border: none;
    cursor: pointer;
  }

  .nav_link:hover {
    color: var(--main-font-color);
    transition: all .2s;
  }

  .nav_link:hover::after {
    content: "";
    position: absolute;
    bottom: 0;
    height: 1px;
    background-color: var(--accent-bg-color);
    animation: nav_border .2s forwards;
  }

  @keyframes nav_border {
    0% { width: 0; }
    100% { width: 100%; }
  }

  .preview{
  width: 100%;

  &_btns{
    display: flex;
    justify-content: right;
    align-items: center;
    gap: 8px;
    margin-top: 8px;
  }

  &_btn{
    padding: 12px 16px;
    border-radius: var(--border-radius-m);
    font-size: var(--font-size-xxs);
    color: var(--main-font-color);
    border: 1px solid var(--main-border-color);
    display: flex;
    align-items: center;
    gap: 8px;

    &.update{
      background-color: var(--accent-bg-color);
      border: 1px solid var(--accent-bg-color);
    }
  }
  
  &_inner{
    width: 100%;
    margin-inline: auto;
  }

  &_header{
    position: sticky;
    top: 16px;
    left: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 16px 0 24px;
    margin-top: 16px;
    border-radius: var(--border-radius-m);
    background-color: var(--sub-bg-color);
    border: 1px solid var(--main-border-color);
    z-index: 999;

    &_title-wrapper{
      display: flex;
      align-items: center;
      gap: 16px;

      .follow-btn{
        padding: 8px 16px;
        border-radius: var(--border-radius-m);
        font-size: var(--font-size-xxs);
        color: var(--main-font-color);
        border: 1px solid var(--main-border-color);
        background-color: var(--accent-bg-color);
        border: 1px solid var(--accent-bg-color);
        font-weight: 500;
      }
    }
    
    &_title{
      font-size: var(--font-size-m);
      font-weight: var(--font-weight-bold);
      color: var(--main-font-color);
    }

    &_nav{
      position: relative;
      overflow: hidden;

      &_btn{
        position: absolute;
        right: 0;
        height: 100%;
        padding: 0 8px;
        background-color: var(--sub-bg-color);
        border-left: 1px solid var(--main-border-color);
        z-index: 10;
      }

      &_list{
        width: 100%;
        display: flex;
        flex-wrap: nowrap;
        gap: 8px;
        align-items: center;
        overflow-x: auto;
      }

      &_item{
        >.active{
          color: var(--main-font-color);
          border-bottom: 1px solid var(--accent-bg-color);
        }
      }

      &_link{
        position: relative;
        padding: 16px 24px;
        text-wrap: nowrap;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--sub-font-color);
        font-size: var(--font-size-xs);
        font-weight: 400;
        transition: all .2s;

        &:hover{
          color: var(--main-font-color);
          transition: all .2s;

          &::after{
            content: "";
            position: absolute;
            bottom: 0;
            height: 1px;
            background-color: var(--accent-bg-color);
            animation: nav_border .2s forwards;

            @keyframes nav_border {
              0%{
                width: 0;
              }
              100%{
                width: 100%;
              }
            }
          }
        }
      }
    }
  }
}
</style>


