---
export interface Props {
  projectId: string | undefined;
  activeTab?: 'summary' | 'profile' | 'cms' | 'form' | 'analytics' | 'preview';
}

const { projectId = '', activeTab = 'summary' } = Astro.props;

// projectIdがundefinedの場合に備えてデフォルト値を設定
const safeProjectId = projectId || '';

// タブの定義
const tabs = [
  { id: 'summary', label: 'サマリー' },
  { id: 'profile', label: 'プロフィール' },
  { id: 'cms', label: 'CMS' },
  { id: 'form', label: 'フォーム' },
  { id: 'analytics', label: 'アナリティクス' },
  { id: 'preview', label: 'プレビュー' }
];
---

<nav class="nav">
  <button class="nav_btn">
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g clip-path="url(#clip0_623_115)">
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M10.4712 7.52879C10.5962 7.65381 10.6664 7.82334 10.6664 8.00012C10.6664 8.1769 10.5962 8.34644 10.4712 8.47145L6.6999 12.2428C6.63841 12.3065 6.56484 12.3572 6.48351 12.3922C6.40217 12.4271 6.31469 12.4455 6.22617 12.4463C6.13765 12.4471 6.04986 12.4302 5.96793 12.3967C5.886 12.3631 5.81157 12.3136 5.74897 12.251C5.68638 12.1885 5.63688 12.114 5.60336 12.0321C5.56983 11.9502 5.55297 11.8624 5.55374 11.7739C5.55451 11.6853 5.5729 11.5979 5.60784 11.5165C5.64277 11.4352 5.69356 11.3616 5.75724 11.3001L9.05724 8.00012L5.75724 4.70012C5.6358 4.57439 5.5686 4.40598 5.57012 4.23119C5.57164 4.05639 5.64175 3.88918 5.76536 3.76557C5.88896 3.64197 6.05617 3.57186 6.23097 3.57034C6.40577 3.56882 6.57417 3.63601 6.6999 3.75745L10.4712 7.52879Z"
          fill="white"
        />
      </g>
      <defs>
        <clipPath id="clip0_623_115">
          <rect width="16" height="16" fill="white" />
        </clipPath>
      </defs>
    </svg>
  </button>

  <ul class="nav_list">
    {tabs.map(tab => (
      <li class="nav_item">
        <button
          type="button"
          class={`nav_link ${activeTab === tab.id ? 'active' : ''}`}
          data-tab-id={tab.id}
        >
          {tab.label}
        </button>
      </li>
    ))}
  </ul>
</nav>

<style lang="scss">
  .nav {
    position: relative;
    margin-top: 16px;
    width: 100%;
    overflow: hidden;
    border-radius: var(--border-radius-m);
    background-color: var(--sub-bg-color);
    border: 1px solid var(--main-border-color);
  }

  .nav_btn {
    position: absolute;
    right: 0;
    height: 100%;
    padding: 0 8px;
    background-color: var(--sub-bg-color);
    border-left: 1px solid var(--main-border-color);
    z-index: 10;
  }

  .nav_list {
    width: 100%;
    display: flex;
    flex-wrap: nowrap;
    gap: 8px;
    align-items: center;
    padding-inline: 24px;
    overflow-x: auto;
  }

  .nav_item .active {
    color: var(--main-font-color);
    border-bottom: 1px solid var(--accent-bg-color);
  }

  .nav_link {
    position: relative;
    padding: 16px 40px;
    text-wrap: nowrap;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--sub-font-color);
    font-size: var(--font-size-xs);
    font-weight: 400;
    transition: all .2s;
    background: none;
    border: none;
    cursor: pointer;
  }

  .nav_link:hover {
    color: var(--main-font-color);
    transition: all .2s;
  }

  .nav_link:hover::after {
    content: "";
    position: absolute;
    bottom: 0;
    height: 1px;
    background-color: var(--accent-bg-color);
    animation: nav_border .2s forwards;
  }

  @keyframes nav_border {
    0% { width: 0; }
    100% { width: 100%; }
  }

  .preview{
  width: 100%;

  &_btns{
    display: flex;
    justify-content: right;
    align-items: center;
    gap: 8px;
    margin-top: 8px;
  }

  &_btn{
    padding: 12px 16px;
    border-radius: var(--border-radius-m);
    font-size: var(--font-size-xxs);
    color: var(--main-font-color);
    border: 1px solid var(--main-border-color);
    display: flex;
    align-items: center;
    gap: 8px;

    &.update{
      background-color: var(--accent-bg-color);
      border: 1px solid var(--accent-bg-color);
    }
  }
  
  &_inner{
    width: 100%;
    margin-inline: auto;
  }

  &_header{
    position: sticky;
    top: 16px;
    left: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 16px 0 24px;
    margin-top: 16px;
    border-radius: var(--border-radius-m);
    background-color: var(--sub-bg-color);
    border: 1px solid var(--main-border-color);
    z-index: 999;

    &_title-wrapper{
      display: flex;
      align-items: center;
      gap: 16px;

      .follow-btn{
        padding: 8px 16px;
        border-radius: var(--border-radius-m);
        font-size: var(--font-size-xxs);
        color: var(--main-font-color);
        border: 1px solid var(--main-border-color);
        background-color: var(--accent-bg-color);
        border: 1px solid var(--accent-bg-color);
        font-weight: 500;
      }
    }
    
    &_title{
      font-size: var(--font-size-m);
      font-weight: var(--font-weight-bold);
      color: var(--main-font-color);
    }

    &_nav{
      position: relative;
      overflow: hidden;

      &_btn{
        position: absolute;
        right: 0;
        height: 100%;
        padding: 0 8px;
        background-color: var(--sub-bg-color);
        border-left: 1px solid var(--main-border-color);
        z-index: 10;
      }

      &_list{
        width: 100%;
        display: flex;
        flex-wrap: nowrap;
        gap: 8px;
        align-items: center;
        overflow-x: auto;
      }

      &_item{
        >.active{
          color: var(--main-font-color);
          border-bottom: 1px solid var(--accent-bg-color);
        }
      }

      &_link{
        position: relative;
        padding: 16px 24px;
        text-wrap: nowrap;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--sub-font-color);
        font-size: var(--font-size-xs);
        font-weight: 400;
        transition: all .2s;

        &:hover{
          color: var(--main-font-color);
          transition: all .2s;

          &::after{
            content: "";
            position: absolute;
            bottom: 0;
            height: 1px;
            background-color: var(--accent-bg-color);
            animation: nav_border .2s forwards;

            @keyframes nav_border {
              0%{
                width: 0;
              }
              100%{
                width: 100%;
              }
            }
          }
        }
      }
    }
  }
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const navBtn = document.querySelector('.nav_btn');
    const navList = document.querySelector('.nav_list');
    const aside = document.getElementById('aside');
    const main = document.getElementById('main');

    if (navBtn && navList) {
      navBtn.addEventListener('click', function() {
        const scrollAmount = navList.clientWidth / 2;
        navList.scrollBy({ left: scrollAmount, behavior: 'smooth' });
      });
    }
    
    // タブをクリックしたときのイベント処理
    document.querySelectorAll('.nav_link').forEach(tabLink => {
      tabLink.addEventListener('click', function(e) {
        const tabId = this instanceof HTMLElement ? this.getAttribute('data-tab-id') : null;
        if (!tabId) return;
        
        // URLのクエリパラメータを更新
        const url = new URL(window.location.href);
        url.searchParams.set('tab', tabId);
        window.history.pushState({ tab: tabId }, '', url);
        
        // プレビュー表示の場合はasideを非表示に
        if (aside && main) {
          if (tabId === 'preview') {
            aside.style.display = 'none';
            main.style.width = '100%';
            main.style.maxWidth = 'none';
            main.style.marginLeft = '0';
            main.style.padding = '0';
          } else {
            aside.style.display = '';
            main.style.width = 'calc(100% - 264px)';
            main.style.maxWidth = '1400px';
            main.style.marginLeft = 'auto';
            main.style.padding = '8px 16px 0 8px';
          }
        }
        
        // コンテンツの切り替えを実行
        switchContent(tabId);
      });
    });
    
    // ブラウザの戻る/進むボタンでもタブ切り替えが機能するようにする
    window.addEventListener('popstate', function(event) {
      const url = new URL(window.location.href);
      const tabId = url.searchParams.get('tab') || 'summary';
      
      // プレビュー表示の状態を復元
      if (aside && main) {
        if (tabId === 'preview') {
          aside.style.display = 'none';
          main.style.width = '100%';
          main.style.maxWidth = 'none';
          main.style.marginLeft = '0';
          main.style.padding = '0';
        } else {
          aside.style.display = '';
          main.style.width = 'calc(100% - 264px)';
          main.style.maxWidth = '1400px';
          main.style.marginLeft = 'auto';
          main.style.padding = '8px 16px 0 8px';
        }
      }
      
      switchContent(tabId);
    });
    
    // コンテンツ切り替え関数
    function switchContent(tabId: string) {
      // パフォーマンス計測開始
      console.time('tabSwitch');
      
      // 1. アクティブなタブスタイルを更新
      document.querySelectorAll('.nav_link').forEach(link => {
        if (link instanceof HTMLElement) {
          if (link.getAttribute('data-tab-id') === tabId) {
            link.classList.add('active');
          } else {
            link.classList.remove('active');
          }
        }
      });
      
      // 2. コンテンツの表示/非表示を切り替え
      document.querySelectorAll('.tab-content').forEach(content => {
        if (content instanceof HTMLElement) {
          if (content.getAttribute('data-tab-id') === tabId) {
            content.style.display = 'block';
          } else {
            content.style.display = 'none';
          }
        }
      });
      
      // パフォーマンス計測終了
      console.timeEnd('tabSwitch');
    }
    
    // ページ初期表示時のタブ切り替え
    const url = new URL(window.location.href);
    const initialTabId = url.searchParams.get('tab') || 'summary';
    
    // 初期表示時もプレビュー状態を設定
    if (aside && main && initialTabId === 'preview') {
      aside.style.display = 'none';
      main.style.width = '100%';
      main.style.maxWidth = 'none';
      main.style.marginLeft = '0';
      main.style.padding = '0';
    }
    
    switchContent(initialTabId);
  });
</script>
