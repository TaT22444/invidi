---
interface Props {
  activePeriod: string;
}

const { activePeriod = '1w' } = Astro.props;

const periods = [
  { id: '1d', label: '過去24時間' },
  { id: '1w', label: '過去1週間' },
  { id: '1m', label: '過去1ヶ月' },
  { id: '3m', label: '過去3ヶ月' },
];
---

<div class="tab_options">
  {periods.map(period => (
    <button 
      class={`tab_option ${activePeriod === period.id ? 'active' : ''}`}
      data-period={period.id}
    >
      {period.label}
    </button>
  ))}
</div>

<style lang="scss">
  .tab_options {
    margin-top: 24px;
    display: flex;
    align-items: center;
    gap: 8px; 
  }
  
  .tab_option {
    padding: 8px 12px;
    border-radius: var(--border-radius-m);
    font-size: var(--font-size-xxs);
    color: var(--sub-font-color);
    background: none;
    border: none;
    cursor: pointer;
    
    &.active {
      color: var(--main-font-color);
      background-color: var(--btn-bg-color);
      border: 1px solid var(--main-border-color);
    }
  }
</style>

<script>
// TypeScriptエラーを回避するための型定義
interface HTMLElementWithPeriod extends HTMLElement {
  getAttribute(name: string): string | null;
  classList: DOMTokenList;
}

document.addEventListener('DOMContentLoaded', function() {
  const periodButtons = document.querySelectorAll('.tab_option[data-period]');
  
  periodButtons.forEach(button => {
    button.addEventListener('click', function() {
      const periodId = this instanceof HTMLElement ? this.getAttribute('data-period') : null;
      if (!periodId) return;
      
      console.log(`期間変更: ${periodId}`);
      
      // アクティブなスタイルを更新
      periodButtons.forEach(btn => {
        if (btn.getAttribute('data-period') === periodId) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
      
      // 現在アクティブなアナリティクスタブを特定
      const activeAnalyticsTab = document.querySelector('.tabs_btn.active');
      const activeTabId = activeAnalyticsTab ? activeAnalyticsTab.getAttribute('data-tab') : 'search-performance';
      
      // セッションストレージに保存のみ行い、URLは変更しない
      sessionStorage.setItem('analytics-current-period', periodId);
      sessionStorage.setItem('analytics-current-tab', activeTabId);
      
      // カスタムイベントを発火して期間変更を通知
      const periodChangeEvent = new CustomEvent('periodChange', {
        detail: {
          period: periodId,
          tabId: activeTabId,
          source: 'period-selector-click'
        },
        bubbles: true
      });
      
      document.dispatchEvent(periodChangeEvent);
    });
  });
  
  // 初期表示時の期間設定
  function initPeriod() {
    // セッションストレージから保存された期間情報を取得
    const savedPeriod = sessionStorage.getItem('analytics-current-period') || '1w';
    
    // 対応する期間ボタンを見つけてクリック
    const periodButton = document.querySelector(`.tab_option[data-period="${savedPeriod}"]`);
    if (periodButton instanceof HTMLElement) {
      periodButton.click();
    } else {
      // デフォルト期間（1週間）
      const defaultPeriod = document.querySelector('.tab_option[data-period="1w"]');
      if (defaultPeriod instanceof HTMLElement) {
        defaultPeriod.click();
      }
    }
  }
  
  // 少し遅延させて初期化
  setTimeout(initPeriod, 300);
});
</script>