---
interface Props {
  id: string;
  title: string;
  metricName: string;
  metricValue: number;
  unit: string;
  labels: string; // JSON文字列として受け取る
  dataPoints: string; // JSON文字列として受け取る
  borderColor: string;
}

const { 
  id,
  title, 
  metricName, 
  metricValue, 
  unit, 
  labels, 
  dataPoints, 
  borderColor = "#468FDD" 
} = Astro.props;

// 数値をカンマ区切りにフォーマット
const formattedValue = new Intl.NumberFormat('ja-JP').format(metricValue);

// JSONデータのパースを試みる
let parsedLabels;
let parsedDataPoints;

try {
  parsedLabels = JSON.parse(labels);
  parsedDataPoints = JSON.parse(dataPoints);
} catch (e) {
  console.error(`StatsSection[${id}]: JSONパースエラー`, e);
  // フォールバックデータを設定
  parsedLabels = ["データ1", "データ2", "データ3", "データ4", "データ5", "データ6", "データ7"];
  parsedDataPoints = [10, 20, 30, 25, 40, 35, 50];
}

// デバッグログ
console.log(`StatsSection[${id}] データ:`, { parsedLabels, parsedDataPoints });
---

<section class="contents" data-section-id={id}>
  <h2 class="box_label">{title}</h2>
  <div class="box">
    <div class="inner">
      <div class="wrapper">
        <p class="metric_name">{metricName}</p>
        <p class="metric_value">
          <strong>{formattedValue}</strong>
          <span>{unit}</span>
        </p>
      </div>
      
      <!-- インラインデータとHTML属性を使用してデータを保存 -->
      <div class="chart-container compact"
           data-chart-id={id}
           data-chart-title={title}
           data-chart-color={borderColor}
           data-chart-labels={labels}
           data-chart-data={dataPoints}>
        <canvas id={`chart-${id}`}></canvas>
      </div>
    </div>
  </div>
</section>

<script>
  // すべてのチャートコンテナを検索して初期化
  document.addEventListener('DOMContentLoaded', () => {
    const chartContainers = document.querySelectorAll('[data-chart-id]');
    
    chartContainers.forEach(container => {
      try {
        // データ属性からチャート情報を取得
        const chartId = container.getAttribute('data-chart-id');
        const chartTitle = container.getAttribute('data-chart-title');
        const chartColor = container.getAttribute('data-chart-color');
        const labelsData = container.getAttribute('data-chart-labels');
        const pointsData = container.getAttribute('data-chart-data');
        
        // データをパース
        let labels = [];
        let dataPoints = [];
        
        try {
          labels = JSON.parse(labelsData || '[]');
          dataPoints = JSON.parse(pointsData || '[]');
        } catch (e) {
          console.error(`チャート[${chartId}]: データパースエラー`, e);
          // フォールバックデータ
          labels = ["1日目", "2日目", "3日目", "4日目", "5日目", "6日目", "7日目"];
          dataPoints = [10, 25, 15, 30, 45, 20, 35];
        }
        
        // キャンバス要素を取得
        const canvas = container.querySelector(`canvas`);
        if (!canvas) {
          console.error(`チャート[${chartId}]: キャンバス要素が見つかりません`);
          return;
        }
        
        // Chart.jsをロード
        import('chart.js/auto')
          .then(module => {
            const Chart = module.default;
            
            // データの確認
            console.log(`チャート[${chartId}] 初期化:`, { labels, dataPoints });
            
            // チャートを作成
            new Chart(canvas, {
              type: 'line',
              data: {
                labels: labels,
                datasets: [{
                  label: chartTitle,
                  data: dataPoints,
                  borderColor: chartColor,
                  borderWidth: 2,
                  tension: 0.3,
                  pointBackgroundColor: chartColor,
                  fill: true,
                  backgroundColor: (context) => {
                    const ctx = context.chart.ctx;
                    const gradient = ctx.createLinearGradient(0, 0, 0, 300);
                    gradient.addColorStop(0, `${chartColor}40`);
                    gradient.addColorStop(0.7, `${chartColor}00`);
                    return gradient;
                  }
                }]
              },
              options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                  x: {
                    grid: {
                      color: 'rgba(200, 200, 200, 0.1)',
                    },
                    ticks: { color: '#808080' }
                  },
                  y: {
                    beginAtZero: true,
                    grid: {
                      color: 'rgba(200, 200, 200, 0.1)',
                    },
                    ticks: { color: '#808080' }
                  }
                },
                plugins: {
                  legend: {
                    labels: {
                      color: '#808080',
                      usePointStyle: true
                    }
                  },
                  tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.7)',
                    titleColor: '#fff',
                    bodyColor: '#fff',
                    cornerRadius: 4,
                    padding: 10
                  }
                }
              }
            });
            
            console.log(`チャート[${chartId}] 初期化完了`);
          })
          .catch(error => {
            console.error(`チャート[${chartId}] Chart.jsロードエラー:`, error);
            
            // エラー表示
            container.innerHTML = `
              <div class="chart-error">
                <p>グラフを読み込めませんでした</p>
                <p>${error.message}</p>
              </div>
            `;
          });
          
      } catch (error) {
        console.error('チャート初期化エラー:', error);
        container.innerHTML = `
          <div class="chart-error">
            <p>グラフの初期化に失敗しました</p>
          </div>
        `;
      }
    });
  });
</script>

<style lang="scss">
  .contents {
    margin-top: 40px;
  }

  .wrapper {
    display: flex;
    align-items: center;
    gap: 8px;

    .metric_name{
      padding-right: 8px;
      border-right: 1px solid var(--sub-border-color);
    }
    
    > p {
      font-size: var(--font-size-xxs);
      color: var(--sub-font-color);
      font-weight: 400;

      > strong {
        color: var(--main-font-color);
        font-weight: 500;
        font-size: var(--font-size-s); /* 数値を少し大きく */
      }
    }
  }

  .box{
    width: 100%;
    background-color: var(--sub-bg-color);
    border: 1px solid var(--main-border-color);
    border-radius: var(--border-radius-m);
    margin-top: 8px;

    &:first-of-type {
      margin-top: 16px;
    }

    > .inner {
      padding: 16px;
    }

    &_label {
      font-size: var(--font-size-s);
      color: var(--main-font-color);
    }
  }
  
  .chart-container {
    height: 300px;
    margin-top: 16px;
    position: relative;
    
    /* コンパクトサイズのチャート用スタイル */
    &.compact {
      height: 200px; /* 高さを200pxに縮小 */
    }
  }
  
  .chart-error {
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: var(--sub-font-color);
    background-color: rgba(50, 50, 50, 0.1);
    border-radius: var(--border-radius-s);
    padding: 20px;
    text-align: center;
  }
</style> 