---
// src/layouts/Layout.astro
export const prerender = false;
import Chart from 'chart.js/auto';
import TokenRefresher from '../components/TokenRefresher.jsx';
import '../styles/layout.scss';

interface Props {
  title: string;
  subtitle?: string;
  headerTitle?: string;
  URL?: string;
  href?: string;
  ogptitle?: string;
  type?: string;
  description?: string;
  sns_img?: string;
  paths?: { label: string; url: string }[];
  accountName?: string;
  projects?: { id?: string; name: string }[];
  userId?: string;
}

const {
  title,
  accountName = "ログイン",
  projects = [],
  userId = ""
} = Astro.props;

const currentUrl = new URL(Astro.request.url);
const currentPath = currentUrl.pathname;

function isActive(href: string) {
  return currentPath === href ? "active" : "";
}

function isActiveProject(projectId: string) {
  return currentPath.startsWith(`/projects/${projectId}`) ? "active" : "";
}

import '../styles/global.scss';

---

<!doctype html>
<html lang="ja">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<script src="https://www.gstatic.com/firebasejs/9.17.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.17.1/firebase-auth-compat.js"></script>
    <script type="module">
      // Firebase 設定（環境変数から取得）
      const firebaseConfig = {
        apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
        authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
        projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
        storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
        messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
        appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
      };
      // Firebase の初期化
      firebase.initializeApp(firebaseConfig);
      const auth = firebase.auth();
      // 認証状態を監視し、ログインしていない場合は /login へリダイレクト
      auth.onAuthStateChanged((user) => {
        const accountNameElem = document.getElementById("account_name");
        const accountBtn = document.getElementById("account_btn");
        if (user) {
          accountNameElem.textContent = user.displayName || user.email;
          accountBtn.setAttribute("href", "/account");
        } else {
          accountNameElem.textContent = "ログイン";
          accountBtn.setAttribute("href", "/login");
        }
      });
    </script>
		<!-- <meta property="og:url" content={URL} />
    <meta property="og:title" content={ogptitle} />
    <meta property="og:description" content={description} />
	  <meta name="description" content={ description } />
	  <meta property="og:type" content={type}>
    <meta property="og:image" content={sns_img} /> -->
		<meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100..900&family=Noto+Sans:ital,wght@1,100&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Dela+Gothic+One&display=swap" rel="stylesheet">
		<link href="https://cdn.jsdelivr.net/npm/destyle.css@1.0.15/destyle.css" rel="stylesheet"/>
		<title>Indivi</title>
		<!-- ページ読み込み時のチラつき防止用スタイル -->
		<style is:inline>
			/* 状態を保持するためのフラッシュ防止スタイル */
			html.nav-init-collapsed .aside {
				visibility: hidden;
			}
			
			/* トランジション抑制（初期読み込み時のみ） */
			html.nav-init-collapsed * {
				transition: none !important;
			}
		</style>
		<!-- ページ読み込み直後のナビゲーション状態設定スクリプト -->
		<script is:inline>
			(function() {
				const isCollapsed = localStorage.getItem('nav-collapsed') === 'true';
				if (isCollapsed) {
					// 初期化中のマーカー
					document.documentElement.classList.add('nav-init-collapsed');
					
					// 状態保持のためのクラスも設定
					document.documentElement.classList.add('nav-collapsed');
				}
			})();
		</script>
	</head>
	<body>
		<aside class="aside" id="aside">
			<div class="aside_inner">
				<header class="header">
					<p class="title">
						<a href={userId ? `/${userId}` : "/"} class="title_text-link">
							APP Title
						</a>
					</p>
					<button class="header_icon" id="toggle-nav">
						<svg width="20" height="20" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M9.41699 21.75V3.25" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
							<path d="M15.75 3.25H9.25C5.93629 3.25 3.25 5.93629 3.25 9.25V15.75C3.25 19.0637 5.93629 21.75 9.25 21.75H15.75C19.0637 21.75 21.75 19.0637 21.75 15.75V9.25C21.75 5.93629 19.0637 3.25 15.75 3.25Z" stroke="white" stroke-width="1.5"/>
						</svg>
					</button>
				</header>
				<nav class="nav">
					<p class="nav_label">ナビゲーション</p>
					<ul class="nav_list">
						<li class={`nav_item ${isActive(`/${userId}`)}`}>
							<a href={userId ? `/${userId}` : "/"} class="nav_link">
								<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M10 14V8.66667C10 8.48986 9.92976 8.32029 9.80474 8.19526C9.67971 8.07024 9.51014 8 9.33333 8H6.66667C6.48986 8 6.32029 8.07024 6.19526 8.19526C6.07024 8.32029 6 8.48986 6 8.66667V14" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
									<path d="M2 6.66697C1.99995 6.47302 2.04222 6.28139 2.12386 6.10545C2.20549 5.92951 2.32453 5.7735 2.47267 5.6483L7.13933 1.64897C7.37999 1.44558 7.6849 1.33398 8 1.33398C8.3151 1.33398 8.62001 1.44558 8.86067 1.64897L13.5273 5.6483C13.6755 5.7735 13.7945 5.92951 13.8761 6.10545C13.9578 6.28139 14 6.47302 14 6.66697V12.667C14 13.0206 13.8595 13.3597 13.6095 13.6098C13.3594 13.8598 13.0203 14.0003 12.6667 14.0003H3.33333C2.97971 14.0003 2.64057 13.8598 2.39052 13.6098C2.14048 13.3597 2 13.0206 2 12.667V6.66697Z" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
								</svg>		
								<p class="nav_name">トップ</p>							
							</a>
						</li>
						<span class="span"></span>
						<li class={`${isActive('/projects')}`}>
							<button class="nav_link">
								<svg width="16" height="16" viewBox="0 0 16 16" fill="none" 
										 xmlns="http://www.w3.org/2000/svg">
									<g clip-path="url(#clip0_685_4904)">
									<path d="M13.333 6.75167C13.333 4.19701 13.333 2.92034 12.5517 2.12634C11.7703 1.33234 10.5137 1.33301 7.99967 1.33301H6.66634C4.15234 1.33301 2.89501 1.33301 2.11434 2.12634C1.33367 2.91967 1.33301 4.19701 1.33301 6.75167C1.33301 9.30634 1.33301 10.583 2.11434 11.377C2.42767 11.695 2.81701 11.8857 3.33301 11.9997" 
											 stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
									<path d="M14.6663 11.666C14.6663 10.416 14.6663 9.79135 14.3483 9.35268C14.2456 9.21121 14.1211 9.0868 13.9797 8.98402C13.541 8.66602 12.9163 8.66602 11.6663 8.66602H8.33301C7.08301 8.66602 6.45834 8.66602 6.01967 8.98402C5.87821 9.0868 5.7538 9.21121 5.65101 9.35268C5.33301 9.79202 5.33301 10.4167 5.33301 11.666C5.33301 12.9153 5.33301 13.5407 5.65101 13.9793C5.754 14.1209 5.87864 14.2453 6.02034 14.348C6.45834 14.666 7.08301 14.666 8.33301 14.666H11.6663C12.9163 14.666 13.541 14.666 13.9797 14.348C14.1211 14.2452 14.2456 14.1208 14.3483 13.9793C14.6663 13.5407 14.6663 12.916 14.6663 11.666Z" 
											 stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
									<path d="M10.9993 10.6667L11.6127 11.1953C11.8707 11.4173 11.9993 11.5287 11.9993 11.6667C11.9993 11.8047 11.8707 11.916 11.6127 12.138L10.9993 12.6667M8.99935 10.6667L8.38602 11.1953C8.12802 11.4173 7.99935 11.5287 7.99935 11.6667C7.99935 11.8047 8.12802 11.916 8.38602 12.138L8.99935 12.6667M1.66602 4H12.9993" 
											 stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
									</g>
									<defs>
									<clipPath id="clip0_685_4904">
										<rect width="16" height="16" fill="white"/>
									</clipPath>
									</defs>
								</svg>									
								<p class="nav_name">プロジェクト</p>
								<svg width="16" height="17" viewBox="0 0 16 17" fill="none" 
										 xmlns="http://www.w3.org/2000/svg">
									<g clip-path="url(#clip0_628_234)">
									<path fill-rule="evenodd" clip-rule="evenodd" d="M8.47121 10.9712C8.34619 11.0962 8.17666 11.1664 7.99988 11.1664C7.8231 11.1664 7.65356 11.0962 7.52855 10.9712L3.75721 7.1999C3.69354 7.13841 3.64275 7.06484 3.60781 6.98351C3.57287 6.90217 3.55448 6.81469 3.55371 6.72617C3.55294 6.63765 3.56981 6.54986 3.60333 6.46793C3.63685 6.386 3.68635 6.31157 3.74895 6.24897C3.81155 6.18638 3.88598 6.13688 3.96791 6.10336C4.04984 6.06983 4.13763 6.05297 4.22615 6.05374C4.31467 6.05451 4.40215 6.0729 4.48348 6.10784C4.56482 6.14277 4.63838 6.19356 4.69988 6.25724L7.99988 9.55724L11.2999 6.25724C11.4256 6.1358 11.594 6.0686 11.7688 6.07012C11.9436 6.07164 12.1108 6.14175 12.2344 6.26536C12.358 6.38896 12.4281 6.55617 12.4297 6.73097C12.4312 6.90577 12.364 7.07417 12.2425 7.1999L8.47121 10.9712Z" fill="white"/>
									</g>
									<defs>
									<clipPath id="clip0_628_234">
										<rect width="16" height="16" fill="white" transform="matrix(0 1 -1 0 16 0.5)"/>
									</clipPath>
									</defs>
								</svg>		
							</button>
							<ul class="nav_nst_list">
								{projects && projects.length > 0 ? (
									projects.map((project) => {
                    const projectId = project.id ?? "";
                    const link = `/projects/${projectId}`;
                    const projectActiveClass = isActiveProject(projectId);
										console.log(projectId)

                    return (
                      <li class={`nav_nst_item ${projectActiveClass}`}>
                        <a href={link} class="nav_nst_link">
                          <p class="nav_nst_name">{project.name}</p>
                        </a>
                      </li>
                    );
                  })
								) : (
									<li class="nav_nst_item">
										<a href="/" class="nav_nst_link">
											<p class="nav_nst_name">プロジェクトはありません</p>
										</a>
									</li>
								)}
							</ul>
						</li>
						<span class="span"></span>
						<li class={`nav_item ${isActive(`/${userId}/plan`)}`}>
							<a href={userId ? `/${userId}/plan` : "/plan"} class="nav_link">
								<svg width="16" height="16" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M14 5.16634V4.74634C14 3.95101 14 3.55301 13.8947 3.23301C13.7988 2.93595 13.6358 2.66496 13.4183 2.44102C13.2009 2.21709 12.9348 2.04622 12.6407 1.94167C12.3287 1.83301 11.9427 1.83301 11.17 1.83301H4.83C4.05733 1.83301 3.67133 1.83301 3.35933 1.94167C3.06529 2.04616 2.79923 2.21692 2.58178 2.44073C2.36432 2.66454 2.2013 2.93541 2.10533 3.23234C2 3.55367 2 3.95101 2 4.74634V10.4997M14 7.83301V14.0823C14 14.6543 13.3433 14.9583 12.928 14.5783C12.8115 14.4707 12.6587 14.4109 12.5 14.4109C12.3413 14.4109 12.1885 14.4707 12.072 14.5783L11.75 14.873C11.5459 15.0618 11.278 15.1666 11 15.1666C10.722 15.1666 10.4541 15.0618 10.25 14.873C10.0459 14.6842 9.77804 14.5794 9.5 14.5794C9.22196 14.5794 8.95414 14.6842 8.75 14.873C8.54586 15.0618 8.27804 15.1666 8 15.1666C7.72196 15.1666 7.45414 15.0618 7.25 14.873C7.04586 14.6842 6.77804 14.5794 6.5 14.5794C6.22196 14.5794 5.95414 14.6842 5.75 14.873C5.54586 15.0618 5.27804 15.1666 5 15.1666C4.72196 15.1666 4.45414 15.0618 4.25 14.873L3.928 14.5783C3.81148 14.4707 3.65865 14.4109 3.5 14.4109C3.34135 14.4109 3.18852 14.4707 3.072 14.5783C2.65667 14.9583 2 14.6543 2 14.0823V13.1663" stroke="white" stroke-linecap="round"/>
									<path d="M6.33301 7.43301L7.28567 8.49967L9.66634 5.83301" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
									<path d="M5 10.833H6M11 10.833H8" stroke="white" stroke-linecap="round"/>
								</svg>									
								<p class="nav_name">プラン</p>			
							</a>
						</li>
						<span class="span"></span>
						<li class={`nav_item ${isActive(`/${userId}/documents`)}`}>
							<a href={userId ? `/${userId}/documents` : "/documents"} class="nav_link">
								<svg width="16" height="16" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M11.17 1.83301H4.83C4.05733 1.83301 3.67133 1.83301 3.35933 1.94167C3.06529 2.04616 2.79923 2.21692 2.58178 2.44073C2.36432 2.66454 2.2013 2.93541 2.10533 3.23234C2 3.55367 2 3.95101 2 4.74634V14.0823C2 14.6543 2.65667 14.9583 3.072 14.5783C3.18852 14.4707 3.34135 14.4109 3.5 14.4109C3.65865 14.4109 3.81148 14.4707 3.928 14.5783L4.25 14.873C4.45414 15.0618 4.72196 15.1666 5 15.1666C5.27804 15.1666 5.54586 15.0618 5.75 14.873C5.95414 14.6842 6.22196 14.5794 6.5 14.5794C6.77804 14.5794 7.04586 14.6842 7.25 14.873C7.45414 15.0618 7.72196 15.1666 8 15.1666C8.27804 15.1666 8.54586 15.0618 8.75 14.873C8.95414 14.6842 9.22196 14.5794 9.5 14.5794C9.77804 14.5794 10.0459 14.6842 10.25 14.873C10.4541 15.0618 10.722 15.1666 11 15.1666C11.278 15.1666 11.5459 15.0618 11.75 14.873L12.072 14.5783C12.1885 14.4707 12.3413 14.4109 12.5 14.4109C12.6587 14.4109 12.8115 14.4707 12.928 14.5783C13.3433 14.9583 14 14.6543 14 14.0823V4.74634C14 3.95101 14 3.55301 13.8947 3.23301C13.7988 2.93595 13.6358 2.66496 13.4183 2.44102C13.2009 2.21709 12.9348 2.04622 12.6407 1.94167C12.3287 1.83301 11.9427 1.83301 11.17 1.83301Z" stroke="white"/>
									<path d="M7.00033 7.83333H11.3337M4.66699 7.83333H5.00033M4.66699 5.5H5.00033M4.66699 10.1667H5.00033M7.00033 5.5H11.3337M7.00033 10.1667H11.3337" stroke="white" stroke-linecap="round"/>
								</svg>									
								<p class="nav_name">ドキュメント</p>							
							</a>
						</li>
					</ul>
				</nav>
        <div class="account">
          <a href={userId ? `/${userId}/account` : "/account"} class={`account_btn ${isActive(`/${userId}/account`)}`} id="account_btn">
            <div class="account_icon"></div>
            <p class="account_name" id="account_name">{accountName}</p>
          </a>
        </div>
			</div>
		</aside>
		<main class="main" id="main">
			<slot />
			<div class="space"></div>
		</main>
		<TokenRefresher client:load />
		<script>
			// ページ読み込み時にトークンを確認・更新する処理
			document.addEventListener('DOMContentLoaded', async () => {
				try {
					// Cookieからトークンを取得
					const getCookie = (name) => {
						const value = `; ${document.cookie}`;
						const parts = value.split(`; ${name}=`);
						if (parts.length === 2) return parts.pop().split(';').shift();
						return null;
					};
					
					const token = getCookie('token');
					if (!token) return;
					
					// トークンの発行時刻を確認
					// FirebaseのJWTトークンをデコード（簡易版）
					const parseJwt = (token) => {
						try {
							// Base64エンコードされたペイロード部分を取得してデコード
							const base64Url = token.split('.')[1];
							const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
							const jsonPayload = decodeURIComponent(atob(base64).split('').map((c) => {
								return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
							}).join(''));
							return JSON.parse(jsonPayload);
						} catch (e) {
							console.error('トークンのデコードに失敗:', e);
							return null;
						}
					};
					
					const decodedToken = parseJwt(token);
					if (!decodedToken) return;
					
					// トークンの発行時刻と現在時刻の差を計算
					const nowSeconds = Math.floor(Date.now() / 1000);
					const tokenAge = nowSeconds - decodedToken.iat; // iatはトークン発行時刻（UNIX秒）
					
					// トークンが30分以上経過している場合は更新
					if (tokenAge > 30 * 60) {
						console.log(`トークンが${Math.floor(tokenAge/60)}分経過しています。更新を試みます...`);
						
						// Firebase SDKが初期化されているか確認
						if (typeof firebase !== 'undefined' && firebase.auth) {
							const user = firebase.auth().currentUser;
							if (user) {
								// 新しいトークンを取得
								const newToken = await user.getIdToken(true);
								
								// クッキーを更新（7日間有効）
								document.cookie = `token=${newToken}; path=/; max-age=604800; SameSite=Lax; Secure`;
								console.log('トークンを更新しました');
							}
						}
					}
				} catch (error) {
					console.error('トークン更新チェック中にエラーが発生:', error);
				}
			});
		</script>
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				const toggleBtn = document.getElementById('toggle-nav');
				const aside = document.getElementById('aside');
				const main = document.getElementById('main');

				// ナビゲーションの状態をローカルストレージから復元
				const isCollapsed = localStorage.getItem('nav-collapsed') === 'true';
				
				if (isCollapsed) {
					// 見えない状態でDOMに縮小スタイルを適用
					aside?.classList.add('collapsed');
					main?.classList.add('expanded');
					toggleBtn?.classList.add('rotated');
					
					// レンダリングの次のフレームで表示を戻す（チラつき防止）
					requestAnimationFrame(() => {
						requestAnimationFrame(() => {
							// 初期化完了、asideを表示
							document.documentElement.classList.remove('nav-init-collapsed');
						});
					});
				}

				// 既存のトグルボタンのイベントリスナー
				toggleBtn?.addEventListener('click', function() {
					// アニメーション付きでトグル
					aside?.classList.toggle('collapsed');
					main?.classList.toggle('expanded');
					this.classList.toggle('rotated');

					// 状態を保存
					const isNowCollapsed = aside?.classList.contains('collapsed');
					localStorage.setItem('nav-collapsed', isNowCollapsed ? 'true' : 'false');
					
					// HTML全体にクラスを設定（状態保持のため）
					if (isNowCollapsed) {
						document.documentElement.classList.add('nav-collapsed');
					} else {
						document.documentElement.classList.remove('nav-collapsed');
					}

					// プレビューモード時は状態を保持しない
					const url = new URL(window.location.href);
					const currentTab = url.searchParams.get('tab');
					if (currentTab === 'preview') {
						localStorage.removeItem('nav-collapsed');
						document.documentElement.classList.remove('nav-collapsed');
					}
				});

				// 既存のtabChangeイベントリスナー
			});
			
			// ページ遷移の直前に状態を保存（より正確な状態保持）
			window.addEventListener('beforeunload', function() {
				const aside = document.getElementById('aside');
				if (aside) {
					const isCollapsed = aside.classList.contains('collapsed');
					// 最後の状態を一時ストレージに保存
					sessionStorage.setItem('nav-last-state', isCollapsed ? 'collapsed' : 'expanded');
				}
			});
			
			// ページ遷移後すぐに実行
			window.addEventListener('load', function() {
				// 一時ストレージから最後の状態を確認
				const lastState = sessionStorage.getItem('nav-last-state');
				if (lastState === 'collapsed') {
					// asideがロード完了したか確認
					const aside = document.getElementById('aside');
					if (aside && !aside.classList.contains('collapsed')) {
						// 状態が一致しない場合は強制的に更新
						aside.classList.add('collapsed');
						const main = document.getElementById('main');
						if (main) main.classList.add('expanded');
						const toggleBtn = document.getElementById('toggle-nav');
						if (toggleBtn) toggleBtn.classList.add('rotated');
					}
				}
				
				// 一時ストレージをクリア
				sessionStorage.removeItem('nav-last-state');
				
				// トランジション抑制を解除
				setTimeout(() => {
					document.documentElement.classList.remove('nav-init-collapsed');
				}, 50);
			});
		</script>
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				const toggleBtn = document.getElementById('toggle-nav');
				const aside = document.getElementById('aside');
				const main = document.getElementById('main');

				// プロジェクトリストの処理
				const projectButton = document.querySelector('button.nav_link');
				const projectListContainer = document.querySelector('.nav_nst_list');
				
				// プロジェクトアイテムに頭文字バッジを追加する関数
				function addProjectBadges() {
					const projectItems = projectListContainer?.querySelectorAll('.nav_nst_item');
					if (!projectItems?.length) return;
					
					projectItems.forEach(item => {
						const nameElement = item.querySelector('.nav_nst_name');
						if (!nameElement) return;
						
						const projectName = nameElement.textContent || '';
						const initial = projectName.charAt(0) || '?';
						
						// 既存のバッジがなければ作成
						if (!item.querySelector('.project-badge')) {
							const badge = document.createElement('div');
							badge.className = 'project-badge';
							badge.textContent = initial;
							
							// リンク要素に挿入
							const link = item.querySelector('.nav_nst_link');
							if (link) {
								link.insertBefore(badge, link.firstChild);
							}
						}
					});
				}
				
				// 初期実行 - ページ読み込み時にバッジを追加
				addProjectBadges();
				
				if (projectButton && aside) {
					// クラス追加
					projectButton.classList.add('project-button');
					
					// 縮小時のイベント処理
					function handleProjectList() {
						const isCollapsed = aside?.classList.contains('collapsed');
						
						if (isCollapsed) {
							// 縮小表示時はホバーイベントを設定
							projectButton.addEventListener('mouseenter', showProjectList);
							projectListContainer?.addEventListener('mouseleave', hideProjectList);
							projectListContainer?.addEventListener('mouseenter', keepProjectList);
						} else {
							// 拡大表示時はイベントを削除
							projectButton.removeEventListener('mouseenter', showProjectList);
							projectListContainer?.removeEventListener('mouseleave', hideProjectList);
							projectListContainer?.removeEventListener('mouseenter', keepProjectList);
							
							// 展開時のリスト表示はデフォルトに戻す
							if (projectListContainer) {
								projectListContainer.style.display = '';
							}
						}
					}
					
					// プロジェクトリストを表示
					function showProjectList() {
						if (!aside?.classList.contains('collapsed')) return;
						
						if (projectListContainer) {
							projectListContainer.style.display = 'flex';
						}
					}
					
					// プロジェクトリストを維持
					function keepProjectList(e: Event) {
						if (e.currentTarget instanceof HTMLElement) {
							e.currentTarget.style.display = 'flex';
						}
					}
					
					// プロジェクトリストを非表示
					function hideProjectList(e: Event) {
						if (e.currentTarget instanceof HTMLElement) {
							e.currentTarget.style.display = 'none';
						}
					}
					
					// 初期設定
					handleProjectList();
					
					// 状態変化を監視
					const observer = new MutationObserver(function() {
						handleProjectList();
					});
					
					observer.observe(aside, { attributes: true });
				}
			});
		</script>
	</body>
</html>

<style lang="scss">
	.aside{
		position: fixed;
		top: 0;
		left: 0;
		width: auto;
		min-width: 264px;
		height: 100dvh;
		overflow: hidden;
		transition: all 0.3s ease;

		&.collapsed {
			min-width: 72px;

			.aside_inner {
				width: 56px;
			}

			.title {
				display: none;
			}

			.nav {
				&_label {
					display: none;
				}

				&_name {
					display: none;
				}

				&_item {
					display: flex;
					justify-content: center;
					position: relative; /* 子要素の位置決めのため */
				}

				&_link {
					width: 40px;
					height: 40px;
					padding: 0;
					display: flex;
					justify-content: center;
					align-items: center;

					/* プロジェクトの下向き矢印SVGを非表示 */
					svg:last-child {
						display: none;
					}
				}

				&_list {
					gap: 16px; /* 縮小時は16pxに拡大 */
				}

				&_nst {
					&_list {
						position: absolute;
						left: 64px;
						top: -8px;
						width: 240px;
						background-color: var(--sub-bg-color);
						border: 1px solid var(--main-border-color);
						border-radius: var(--border-radius-m);
						padding: 12px;
						z-index: 100;
						display: none;
						flex-direction: column;
						gap: 8px;
						box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
					}

					&_item {
						margin-bottom: 0;
						border-radius: var(--border-radius-s);
						overflow: hidden;
						transition: all 0.2s ease;

						&:hover {
							background-color: var(--item-bg-color);
						}
					}

					&_link {
						display: flex;
						align-items: center;
						padding: 8px 12px;
						color: var(--main-font-color);
						font-size: var(--font-size-xs);
						text-decoration: none;
					}

					&_name {
						margin-left: 8px;
					}
				}

			}

			/* プロジェクトバッジを表示 */
			.project-badge {
				display: flex;
				justify-content: center;
				align-items: center;
				padding: 4px;
				background-color: var(--accent-bg-color);
				border-radius: var(--border-radius-s);
				color: white;
				font-size: var(--font-size-xs);
				font-weight: 500;
			}

			.span {
				display: none;
			}

			.account {
				&_name {
					display: none;
				}
				
				&_btn {
					justify-content: center;
					padding: 8px 0;
				}
			}
		}

		&_inner{
			position: relative;
			width: calc(100% - 16px);
			height: calc(100% - 16px);
			margin: 8px;
			padding: 16px 8px;
			background-color: var(--sub-bg-color);
			border: 1px solid var(--main-border-color);
			border-radius: var(--border-radius-m);
			transition: all 0.3s ease;
		}
	}

	.header{
		display: flex;
		align-items: center;
		justify-content: space-between;

		>.title{
			font-size: var(--font-size-l);
			font-weight: 500;
			font-family: var(--font-family-en);
			color: var(--main-font-color);
			padding-left: 8px;
		}

		&_icon{
			display: flex;
			align-items: center;
			justify-content: center;
			width: 36px;
			height: 32px;
			background-color: var(--btn-bg-color);
			border: 1px solid var(--main-border-color);
			border-radius: var(--border-radius-s);
			cursor: pointer;
			transition: transform 0.3s ease;

			&.rotated {
				transform: rotate(180deg);
			}
		}
	}

	.nav{
		margin-top: 40px;

		&_label{
			margin-left: 8px;
			font-size: var(--font-size-xxs);
			color: var(--sub-font-color);
		}

		&_list{
			margin-top: 8px;
			display: flex;
			flex-direction: column;
			justify-content: center;
			gap: 8px; /* 通常時は8px */
			transition: gap 0.3s ease; /* ギャップの変更にもトランジションを適用 */

			>.active{
				background-color: var(--elem-bg-color);
			}
		}

		&_item{
			width: 100%;
			border-radius: var(--border-radius-s);

			&:hover{
				background-color: var(--item-bg-color);
				transition: all .3s;
			}
		}

		&_link{
			width: 100%;
			display: flex;
			align-items: center;
			padding: 12px;
			color: var(--main-font-color);
			font-size: var(--font-size-xs);
			font-weight: 400;
		}

		&_name{
			margin-left: 12px;
			flex: 1;
		}

		&_nst{

			&_list{
				display: flex;
				flex-direction: column;
				gap: 4px;
				justify-content: center;
				margin-left: 8px;

				>.active{
					background-color: var(--elem-bg-color);
				}
			}

			&_item{
			  border-radius: var(--border-radius-s);

			  >.active{
					background-color: var(--elem-bg-color);
				}

			  &:hover{
			  	background-color: var(--item-bg-color);
			  	transition: all .3s;
			  }
		  }

		  &_link{
		  	width: 100%;
		  	display: flex;
		  	align-items: center;
		  	justify-content: space-between;
		  	padding: 8px 12px;
		  	color: var(--sub-font-color);
		  	font-size: var(--font-size-xs);
		  	font-weight: 400;
		  }
		}
	}

	.account{
		position: absolute;
		bottom: 8px;
		left: 0;
		width: calc(100% - 16px);
		margin-inline: 8px;

		.active{
			background-color: var(--elem-bg-color);
		}

		&_btn{
			width: 100%;
			padding: 8px 12px;
			display: flex;
			align-items: center;
			border-radius: var(--border-radius-m);
			transition: all .3s;

			&:hover{
				background-color: var(--item-bg-color);
			}
		}

		&_icon{
			width: 24px;
			height: 24px;
			border-radius: 100px;
			background-color: var(--elem-bg-color);
			border: 1px solid var(--sub-border-color);
		}

		&_name{
			margin-left: 8px;
			font-size: var(--font-size-xxs);
			color: var(--main-font-color);
			font-weight: 400;
		}
	}

	.main{
		position: relative;
		width: calc(100% - 264px);
		max-width: 1400px;
		margin-left: auto;
		padding: 8px 16px 0 8px;
		transition: all 0.3s ease;

		&.expanded {
			width: calc(100% - 72px);
		}
	}

	.space{
		width: 100%;
		height: 80px;
	}

	/* ページ読み込み時のちらつき防止用グローバルスタイル */
	:root.nav-collapsed {
		.aside {
			min-width: 72px;
		}
		
		.main {
			width: calc(100% - 72px) !important;
		}
	}

	.span {
		display: none; /* デフォルトは非表示 */
		height: 1px;
		margin-inline: auto;
		background-color: var(--main-border-color);
		transition: all 0.3s ease;
	}

	/* 縮小時のみspanを表示 */
	.aside.collapsed .span {
		display: block;
		width: 24px;
		margin-inline: auto;
	}
</style>

